{
  "openapi": "3.0.2",
  "info": {
    "title": "IT Wallet API",
    "description": "API for the Italian EUDI Wallet implementation profile (version: '0.6.0') <a target=\"blank\" href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/\">https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/</a>",
    "version": "0.6.0"
  },
  "servers": [
    {
      "url": "https://api.server.test/it-wallet-api/v0.6.0",
      "description": "Main (production) server"
    }
  ],
  "paths": {
    "/as/par": {
      "post": {
        "tags": [
          "Credential Issuance Flow"
        ],
        "summary": "Starts authorization flow for the Wallet Instance",
        "operationId": "parRequest",
        "description": "<ol><li><b>Wallet Instance</b> have previously: <ul><li>obtained eID Provider federation metadata (<a href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/trust.html#entity-configuration\">Entity Configuration</a>) that discloses the URL endpoints, public keys, algorithms supported, credential types supported, and any other parameter required for interoperability needs;</li><li>created a PKCE code verifier and its challenge code (SHA256) for the Pushed Authorization Request (<a href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#pushed-authorization-request-par-request\">PAR Request<a/>) to send to this endpoint;</li><li>created a <a href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#pushed-authorization-request-par-request\">PAR Request<a/> for starting an authorzation flow to obtain an access token that authorize to access to the /credendential endpoint for requestinf an eID credential.</li></ul></li><li><b>Wallet Instance</b> sends a <a href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#pushed-authorization-request-par-request\">PAR Request<a/> to this endpoint</li><li><b>Authorization Server</b> validates <a href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#pushed-authorization-request-par-request\">PAR Request</a> received;</li> <li><b>Authorization Server</b> extracts the identifier of the Wallet Instance (<i>client_id</i>), the Wallet Instance side application session (<i>state</i>), the <a href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/wallet-attestation.html#id1\"><i>WTE</i></a> and its proof of possession (<i>WTE-PoP</i>), validates and storing them in the local database along with the PAR Request using the <i>state</i> as key; </li> <li><b>Authorization Server</b> extracts from the <a href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/wallet-attestation.html#id1\">WTE</a> of the Wallet Provider's identifier that issued the Wallet Instance (claim iss) and uses it to verify the presence in the local database of a valid trust chain related to the Wallet Provider (in case of absence it starts a federation flow that provides for building the Wallet Provider's trust chain and storing it in the local database by associating it with the <a href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#pushed-authorization-request-par-request\">PAR Request</a>);</li> <li><b>Authorization Server</b> validates the signature of the <a href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/wallet-attestation.html#id1\">WTE</a> using the Wallet Provider's federation public key contained in the Wallet Provider's <a href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/trust.html#entity-configuration\">Entity Configuration</a> retrieved from its trust chain; the identifier of this public key (specified into the claim <i>kid</i>) must match exactly the claim <i>kid</i> specified in the <a href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/wallet-attestation.html#id1\">WTE</a> header;</li> <li><b>Authorization Server</b> verifies that the Wallet Instance is the rightful owner of the submitted <a href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/wallet-attestation.html#id1\">WTE</a> by going to validate the signature of the WTE-PoP and checking if the public key of the Wallet Instance to which the <a href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/wallet-attestation.html#id1\">WTE</a> is bound (contained into the WTE claim <i>cnf</i>) is the same public key referenced by the claim <i>kid</i> of the WTE-DPoP header;</li> <li><b>Authorization Server</b> extracts the JWT request object from the <a href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#pushed-authorization-request-par-request\">PAR Request</a> (claim <i>request</i>) and verifies its signature using the public key of the Wallet Instance to which the <a href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/wallet-attestation.html#id1\">WTE</a> is bound (contained into the <a href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/wallet-attestation.html#id1\">WTE</a> claim <i>cnf</i>);</li> <li><b>Authorization Server</b> generates a time-limited disposable request uri that identifies the <a href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#pushed-authorization-request-par-request\">PAR Request</a> within the Authorization Server (e.g., SHA1 hash of the PAR Request) and creates a <a href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#pushed-authorization-request-par-response\">PAR Response</a> that encapsulates that URI (claim <i>request_uri</i>) and its validity interval (claim <i>request_uri_expires_in</i>);</li> <li><b>Authorization Server</b> stores the <i>identifier of the Wallet Provider</i>, <i>request_uri</i>, <i>request_uri_expires_in</i> and <a href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#pushed-authorization-request-par-response\"><i>PAR Response</i></a> in local database by associating them with the previously saved <a href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#pushed-authorization-request-par-request\"><i>PAR Request</i></a></li> <li><b>Authorization Server</b> sends <a href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#pushed-authorization-request-par-response\">PAR Request</a> to the Client.</li></ol>",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ParRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_405"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_413"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "5XX": {
            "description": "Unexpected error."
          }
        }
      }
    },
    "/authorize": {
      "get": {
        "tags": [
          "Credential Issuance Flow"
        ],
        "summary": "Issuing an authorization code to the Wallet Instance",
        "description": "<ol><li><b>Wallet Instance</b> opens its web view and sends an <a href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#authorization-request\">Authorization Request</a>, to this endpoint that presents in query string the Wallet Instance identifier (<i>client_id</i>), the <i>request_uri</i> returned by the <a href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#pushed-authorization-request-par-response\">PAR Response</a> and the <i>idphint</i> containing the hinted Identity Provider ID;<li><b>Authorization Server</b> validates the <a href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#authorization-request\">Authorization Request</a> and stores it in local database along with the <i>idphint</i> presented in query string, associating them with the <a href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#pushed-authorization-request-par-request\">PAR Request</a> saved previously and identified through the <i>client_id</i> and the <i>request_uri</i> parameters specified in the request;</li><li><b>Authorization Server</b> redirects the Wallet Instance to the login service of the SP with the <i>idphint</i> and a parameter <i>target</i> contains the redirection URI of the Service Provider(SP) to which the SP Assertion Consumer Service redirects the Wallet Instance with the SAML assertion extracted from the verified SAML Response issued by the IdP at the conclusion of the user's authentication flow. The redirect set a session cookie (called <i>state</i>) that contains the unique application session identifier at the Wallet Instance side (previously sent in the <a href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#pushed-authorization-request-par-request\">PAR Request</a>)</li></ol>",
        "operationId": "authorize",
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "It MUST be set to the same value in the PAR Request (in URL-encoded format)",
            "required": true,
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            },
            "example": "AxjAnj0t5qpRVgR6apZ7gChaPb6y8gNm7CkPd58PD4c"
          },
          {
            "name": "request_uri",
            "in": "query",
            "description": "It MUST be set to the same value as obtained by PAR Response (in URL-encoded format)",
            "required": true,
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            },
            "example": "urn%3ietf%3params%3oauth%3request_uri%3bwc4JK-ESC0w8acc191e-Y1LTC2"
          },
          {
            "name": "idphint",
            "in": "query",
            "description": "The identifier of the hinted Identity Provider ID (in URL-encoded format)",
            "required": true,
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            },
            "example": "https%3A%2F%2Fidp.example.org"
          }
        ],
        "responses": {
          "302": {
            "description": "Found  <br> <br/> <b>No content</b> <br> <br/> <b> EXAMPLE </b>: 'https%3A%2F%2Fwallet-sp.ipzs.it%2Flogin?idphint=https%3A%2F%2Fidp.example.org&target=https%3A%2F%2Fwallet-rp.ipzs.it%2Fcallback2%20'",
            "headers": {
              "Location": {
                "description": "The Location response header indicates the URL to redirect the Wallet Instance to. This URL presents in query string a parameter 'idphint' contains the identifier of the hinted Identity Provider (entityID), in URL-encoded format, and a parameter 'target' contains the redirection URI of the SP, in URL-encoded format, to which the SP Assertion Consumer Service redirects the Wallet Instance with the SAML assertion extracted from the verified SAML Response.",
                "style": "simple",
                "explode": false,
                "schema": {
                  "type": "string",
                  "format": "uri"
                }  
              },
              "Set-Cookie":{
                "description": "Contains the unique application session identifier at the Wallet Instance side",
                "schema": {
                  "type": "string",
                  "example": "state=fyZiOL9Lf2CeKuNT2JzxiLRDink0uPcd; Path=/; HttpOnly; Secure"
                }
              }
            }
          }
        }
      }
    },
    "/authorize_int": {
      "get": {
        "tags": [
          "Credential Issuance Flow"
        ],
        "summary": "Issuing an authorization code to the Wallet Instance",
        "description": "<ol><li><b>Service Provider</b>(<b>SP</b>) sends an HTTP GET request to this enpoint that presents in header HTTP the Minimum eIDAS Dataset attributes of the authenticated user (<i>FamilyName, FirstName, DateOfBirth, PersonIdentifier</i>), the level of authentication (<i>AuthnLevel</i>) performed by the IdP (<i>SpidL2</i> or <i>SpidL3</i>) and the application session identifier at the Wallet Instance side (<i>state</i>);<li><b>Authorization Server</b> validates the request received, extracts request HTTP header informations and stores them into local database (in encrypted form) with association to <a href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#pushed-authorization-request-par-request\">PAR Request</a> previously received and identified through the <i>state</i>;<li><b>Authorization Server</b> generates an <b>authorization code</b> for the Wallet Instance (following <a href=\"https://datatracker.ietf.org/doc/html/rfc6749#section-4.1.2\">RFC_6749</a> and <a href=\"https://datatracker.ietf.org/doc/html/rfc7636#section-4.4\">RFC_7636</a> specifications) to present to the /token endpoint of the Authorization Server of eID Provider for obtaining an access token that authorize to access to the /credendential endpoint of the Credential Issuer of the eID Provider for requesting an eID credential;</li><li><b>Authorization Server</b> creates an <a href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#authorization-response\">Authorization Response</a> that encapsulates the <i>authorization code</i> producted, the <i>state</i> and the <i>iss</i> of the <a href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#pushed-authorization-request-par-request\">PAR Request</a> previously received;</li><li><b>Authorization Server</b> redirects the web view of the Wallet Instance to his native side sending a redirect message to the app link/universal link of the Wallet Instance specified in the <i>redirect_uri</i> claim of the <a href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#pushed-authorization-request-par-request\">PAR Request</a> previously received;<li><b>Authorization Server</b> stores the <i>authorization code</i> and the <i><a href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#authorization-response\">Authorization Response</a></i> into local database with association to <a href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#pushed-authorization-request-par-request\">PAR Request</a> previously received.</li></ol>",
        "operationId": "authorize_int",
        "parameters": [
          {
            "name": "FamilyName",
            "in": "header",
            "description": "Family Name of the authenticated user",
            "required": false,
            "explode": true,
            "schema": {
              "type": "string"
            },
            "example": "Rossi"
          },
          {
            "name": "FirstName",
            "in": "header",
            "description": "First Name of the authenticated user",
            "required": false,
            "explode": true,
            "schema": {
              "type": "string"
            },
            "example": "Mario"
          },
          {
            "name": "DateOfBirth",
            "in": "header",
            "description": "Date of birth for the authenticated user (YYYY-MM-DD format)",
            "required": false,
            "explode": true,
            "schema": {
              "type": "string"
            },
            "example": "Mario"
          },
          {
            "name": "PersonIdentifier",
            "in": "header",
            "description": "Uniqueness Identifier of the authenticated user (tax id code)",
            "required": false,
            "explode": true,
            "schema": {
              "type": "string"
            },
            "example": "Mario"
          }
          ,
          {
            "name": "AuthnLevel",
            "in": "header",
            "description": "The Authentication Level used to authenticate the user",
            "required": false,
            "explode": true,
            "schema": {
              "type": "integer",
              "minimum": 2,
              "maximum": 3
            },
            "example": 2
          },
          {
            "name": "state",
            "in": "header",
            "description": "It MUST be set to the same value of the 'state' parameter in the PAR Request, in URL-encoded format",
            "required": false,
            "explode": true,
            "schema": {
              "type": "string"
            },
            "example": "fyZiOL9Lf2CeKuNT2JzxiLRDink0uPcd"
          }
        ],
        "responses": {
          "302": {
            "description": "Found  <br> <br/> <b>No content</b> <br> <br/> Redirect URI at the end of the authentication flow:<br><br> <b>302_After_Authentication_Flow</b> => EXAMPLE: 'https://start.wallet.example.org?code=SplxlOBeZQQYbYS6WxSbIA&state=fyZiOL9Lf2CeKuNT2JzxiLRDink0uPcd&iss=https%3A%2F%2Fpid-provider.example.org' <br><br> <b> 302_Authentication_Request_Invalid</b>  => EXAMPLE: 'https://start.wallet.example.org?error=server_error&error_description=The%20authorization%20server%20encountered%20an%20unexpected%20condition%20that%20prevented%20it%20from%20fulfilling%20the%20request%20response_type%20value&state=fyZiOL9Lf2CeKuNT2JzxiLRDink0uPcd&iss=https%3A%2F%2Fpid-provider.example.org'",
            "headers": {
              "Location": {
                "description": "The Location response header indicates the URL to redirect the Wallet Instance to. This URL present in query string the authorization code generated by the authorization server (parameter 'code') and the same 'state' and 'iss' parameters were present in the PAR Request (in URL-encoded format). If the request fails due to a missing, invalid, or mismatching redirection URI, or if the Wallet Instance  identifier is missing or invalid, the authorization server MUST NOT automatically redirect the  user-agent to the invalid redirection URI. If the authorization server denies the access request or  if the request fails for reasons other than a missing or invalid redirection URI, the authorization  server informs the Wallet Instance by adding the error parameter (in URL-encoded format) and  the error_description parameter (in URL-encoded format) to the query component of the redirection URI  ([RFC 6749#section-4.1.2.1] https://datatracker.ietf.org/doc/html/rfc6749.html#section-4.1.2.1).",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }  
              }
              }
          }
        }
      }
    },
    "/token": {
      "post": {
        "tags": [
          "Credential Issuance Flow"
        ],
        "summary": "Issuing an access token to the Wallet Instance",
        "description": "<ol><li><b>Wallet Instance</b> have previously: <ul><li>generated a public/private key pair for use with DPoP;</li><li>created a DPoP proof JWT for the /token endpoint of the Authorizatiuon Server of eID Provider adding the DPoP public key in the JWT header and signed the JWT with the DPoP private key, according to Section 4.2 of the DPoP specification (<a href=\"https://datatracker.ietf.org/doc/html/rfc9449.html#name-checking-dpop-proofs\">RFC 9449</a>).</li></ul></li><li><b>Wallet Instance</b> sends a <a href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#token-request\">Token Request</a>, that includes the WTE with its proof of possession (WTE-PoP) and the authorization code, to the /token endpoint of the Authorization Server for issuing an Access Token bounded to the public key of the DPoP proof presented in the DPoP HTTP header of the <a href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#token-request\">Token Request</a>;</li><li><b>Authorization Server</b> validates the <a href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#token-request\">Token Request</a> and the DPoP proof JWT in the DPoP HTTP header according to Section 4.3 of the DPoP specifications (<a href=\"https://datatracker.ietf.org/doc/html/rfc9449.html#name-checking-dpop-proofs\">RFC 9449</a>);</li><li><b>Authorization Server</b> extracts WTE from the <a href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#token-request\">Token Request</a> and control is equal to the WTE received previously within the <a href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#pushed-authorization-request-par-request\">PAR Request<a/>;</li><li><b>Authorization Server</b> generates an <b>Access Token</b> bounded to the public key of the DPoP proof JWT presented in the DPoP HTTP header of the <a href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#token-request\">Token Request</a> (according to the <a target=\"blank\" href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#access-token\">EUDI IT Wallet specification</a>) that represents the client authorization to access to the /credential endpoint of the Credential Issuer for issuing an eID credential; this Access Token presents a claim <b>sub</b> that contains an identifier assigned to the authenticated user and a claim <b>jkt</b> contains the SHA256 base64-url encoded of the public key defined into the DPoP proof JWT;</li><li><b>Authorization Server</b> creates a string containg a <b>nonce</b> value to be used to create a proof of possession of private key material that the Wallet Instance must present to the /credential endpoint with the access token (this nonce can be used only once and has a limited lifetime);</li><li><b>Authorization Server</b> sends the <a href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#token-response\">Token Response</a> containing the <i>DPoP-bounded access token</i>, the <i>authorized verifiable credential types</i> with the DPoP-bound Access Token, the <i>nonce</i> and the <i>nonce expires time</i><li><b>Authorization Server</b> stores the <i><a href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#token-request\">Token Request</a></i>, the <i>DPoP-bounded access token</i>, the <i>sub</i> of the DPoP-bounded access token, the <i>nonce</i>, the <i>nonce expires time</i> and the <a href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#token-response\">Token Response</a> in local databse with association to <a href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#pushed-authorization-request-par-request\">PAR Request</a> previously received.</li></ol>",
        "operationId": "tokenRequest",
        "parameters": [
          {
            "name": "DPoP",
            "in": "header",
            "description": "The DPoP proof JWT (in signed JWT format) presented in the request to the /token endpoint of the authorization server for issuing an access token bounded to the public key specified within the JWK header of the DPoP proof JWT. The issued DPoP-bounded access token represents the client's authorization to access to the /credential endpoint of the credential issuer for issuing a verifiable credential of type 'PersonIdentificationData'.</br></br> Header is a JSON object with this <a target=\"blank\" href=\"https://raw.githubusercontent.com/it-helpers/it-wallet-helpers/0.6.0/docs/schemes/jwt_dpop_header.json\">JSON schema</a> </br></br> Payload is a JSON object with this <a target=\"blank\" href=\"https://raw.githubusercontent.com/it-helpers/it-wallet-helpers/0.6.0/docs/schemes/jwt_dpop_token_endpoint.json\">JSON schema</a>",
            "required": false,
            "schema": {
              "pattern": "^[A-Za-z0-9_-]{2,}(?:\\.[A-Za-z0-9_-]{2,}){2}$",
              "type": "string",
              "format": "jwt (<base64-url-encoded header>.<base64-url-encoded claims>.<base64-url-encoded signature>)"
            },
            "example": "eyJ0eXAiOiJkcG9wK2p3dCIsImFsZyI6IkVTMjU2IiwiandrIjp7Imt0eSI6IkVDIiwieCI6IjM1bHZDOHV6MlFyV3BRSjNUVUg4dDlvOURVUk1wN3lkVTUxOFJLRGwyMGsiLCJ5IjoiSThCdVhCMmJ2eGVsekpBZDdPS2hkLVp3akNzdDA1Rng0N01iXzB1Z3JvcyIsImNydiI6IlAtMjU2In19.eyJqdGkiOiJlMWozVl9iS2ljOC1MQUVBIiwiaHRtIjoiUE9TVCIsImh0dSI6Imh0dHBzOi8vaXQtd2FsbGV0LWVpZC1wcm92aWRlci5leGFtcGxlLml0L3Rva2VuIiwiaWF0IjoxNzEwMzQ2MzQzfQ.mIDdPx1KjBnitErOYJjvzr5EYjl8dRQlzAT30e0mhk8NZZCwAMfktzcyb1_IuEywi_VMbrWTp1gFOAxJv_uaJQ"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/token_body"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_400_1"
                }
              }
            }
          },
          "5XX": {
            "description": "Unexpected error."
          }
        }
      }
    },
    "/credential": {
      "post": {
        "tags": [
          "Credential Issuance Flow"
        ],
        "summary": "Issuing an eID Credential to the Wallet Instance",
        "description": "1. <b>Client</b> validates the token response received from the /token endpoint of the authotization server; \n 2. <b>Client</b> extras the DPoP-bounded access token, the nonce and the nonce expires time from the token response; validates the DPoP-bound access token and controls nonce expires time; \n 3. <b>Client</b> creates a <u>JWT proof</u> for the /credential endpoint of the credential issuer adding the nonce in the payload, the DPoP public key in the JWT header and signs the JWT with the DPoP private key, according to the <a target=\"blank\" href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#credential-request\">EUDI IT Wallet specification</a>; \n 4. <b>Client</b> creates a <u>DPoP proof JWT</u> for the /credential endpoint of the credential issuer adding the DPoP public key in the JWT header and signs the JWT with the DPoP private key, according to Section 4.2 of the DPoP specification (RFC 9449); \n 5. <b>Client</b> sends a request to the /credential endpoint of the credential issuer for issuing a verifiable credential of type 'PersonIdentificationData' bounded to the public key of the <u>JWT proof</u> presented in the request body with the <u>type 'PersonIdentificationData'</u> and the <u>format 'vc+sd-jwt'</u>; the credential request includes in the Authorization HTTP header the <u>DPoP-bounded access token</u> and contains in the DPoP HTTP header the <u>DPoP proof JWT</u> as proof of possession of the access token sign private key; \n 6. The <b>credential issuer</b> must validate the credential request received, verify the DPoP-bounded access token in the Authorization HTTP header and the DPoP proof JWT in the DPoP HTTP header according to Section 4.3 of the DPoP specifications (RFC 9449); it must also control that the public key of the DPoP proof JWT matches the public key that the access token is bound to (it provides additional assurance about the legitimacy of the Wallet Instance to present the access token) \n 7. The <b>credential issuer</b> extracts JWT proof from the credential request and checks its validity, then controls if the nonce inside the JWT proof is equal to the nonce sent previously to the Wallet Instance within the Token Response and verifies the nonce expiration; \n 8. The <b>authorization server</b> generates the <u>verifiable credential</u> requested bounded to the public key of the JWT proof, according to the <a target=\"blank\" href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-data-model.html#id1\">EUDI IT Wallet specification</a> and the <a target=\"blank\" href=\"https://www.ietf.org/archive/id/draft-ietf-oauth-sd-jwt-vc-02.html\">SD-JWT-based Verifiable Credentials (SD-JWT VC) specification</a> (type 'PersonIdentificationData' and format 'vc+sd-jw'); \n 8. The <b>authorization server</b> creates a string containg a nonce value to be used to create a new JWT proof for the /credential endpoint of the credential issuer when requesting a new verifiable credential of type 'PersonIdentificationData' with the same DPoP-bounded access token (the nonce can be used only once and has a limited lifetime); \n 9. The authorization server sends the response containing the DPoP-bounded access token, the authorizations grainted with the DPoP-bound Access Tokent, the nonce and the nonce expires time",
        "operationId": "credentialRequest",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "The DPoP-bound access token (in digitally signed JWT format) presented in the request to the /credential endpoint of the credential issuer for issuing a verifiable credential of type 'PersonIdentificationData'. The access token represents the client's authorization to access to the /credential endpoint of the credential issuer for issuing a verifiable credential of type 'PersonIdentificationData'.</br></br> Header is a JSON object with this <a target=\"blank\" href=\"https://raw.githubusercontent.com/it-helpers/it-wallet-helpers/0.6.0/docs/schemes/jwt_dpop_header.json\">JSON schema</a> </br></br> Payload is a JSON object with this <a target=\"blank\" href=\"https://raw.githubusercontent.com/it-helpers/it-wallet-helpers/0.6.0/docs/schemes/jwt_dpop_credential_endpoint.json\">JSON schema</a>",
            "required": false,
            "schema": {
              "pattern": "^[A-Za-z0-9_-]{2,}(?:\\.[A-Za-z0-9_-]{2,}){2}$",
              "type": "string",
              "format": "A digitally signed JWT"
            },
            "example": "eyJhbGciOiJFUzI1NiJ9.eyJzdWIiOiJzdWJfcGFpcndpc2UiLCJhdWQiOiJodHRwczovL3VhdC5ldWRpLXdhbGxldC1pdC1xZWFhLWlzc3Vlci5kZW1vLmlwenMuaXQvdG9rZW4iLCJqa3QiOiJrUU1VMTNOcnZpYzJEOUlHcDJ0LVBoTGZpSEdFRkc1Uk9FSUlleXVlN05NIiwiZXhwIjoxNzA1NTczNjU1LCJpYXQiOjE3MDU1NzAwNTUsIm5vbmNlIjoidHNfRXRVUXMwaWVpSVMxTllOQkhFUVNveTNjdDRncHktNEZaS3dIaWxrWSIsImp0aSI6ImY4NTU1Y2ViLWM2NWMtNDAyNS05Mzc4LWI2NjcyYjYxNDlhZiIsImNsaWVudF9pZCI6Imh0dHBzOi8vdWF0LmV1ZGktd2FsbGV0LWl0LXFlYWEtaXNzdWVyLmRlbW8uaXB6cy5pdC90b2tlbiJ9.VyT25r23eO_ppWuw0ONV6GKjJFfvYtJKQSIngGwtyklmckhE3vg5U7Cws9V41GOU6F77MVifGfXf0l2HP3mW1Q"
          },
          {
            "name": "DPoP",
            "in": "header",
            "description": "The DPoP proof JWT (in signed JWT format) presented with the access token in the request to the /credential endpoint of the credential issuer as proof possession of the access token sign private key.</br></br> Header is a JSON object with this <a target=\"blank\" href=\"https://raw.githubusercontent.com/it-helpers/it-wallet-helpers/0.6.0/docs/schemes/jwt_dpop_header.json\">JSON schema</a> </br></br> Payload is a JSON object with this <a target=\"blank\" href=\"https://raw.githubusercontent.com/it-helpers/it-wallet-helpers/0.6.0/docs/schemes/jwt_dpop_credential_endpoint.json\">JSON schema</a>",
            "required": false,
            "schema": {
              "pattern": "^[A-Za-z0-9_-]{2,}(?:\\.[A-Za-z0-9_-]{2,}){2}$",
              "type": "string",
              "format": "A digitally signed JWT"
            },
            "example": "eyJ0eXAiOiJkcG9wK2p3dCIsImFsZyI6IkVTMjU2IiwiandrIjp7Imt0eSI6IkVDIiwieCI6IjM1bHZDOHV6MlFyV3BRSjNUVUg4dDlvOURVUk1wN3lkVTUxOFJLRGwyMGsiLCJ5IjoiSThCdVhCMmJ2eGVsekpBZDdPS2hkLVp3akNzdDA1Rng0N01iXzB1Z3JvcyIsImNydiI6IlAtMjU2In19.ewogICJqdGkiOiAiZTFqM1ZfYktpYzgtTEFFQiIsCiAgImh0bSI6ICJQT1NUIiwKICAiaHR1IjogImh0dHBzOi8vaXQtd2FsbGV0LWVpZC1wcm92aWRlci5leGFtcGxlLml0L2NyZWRlbnRpYWwiLAogICJpYXQiOiAxNzEwMzQ2MzQzLAogICJhdGgiOiAiZlVIeU8ycjJaM0RaNTNFc05yV0JiMHhXWG9hTnk1OUlpS0NBcWtzbVFFbyIsCiAgIm5vbmNlIjogInRzX0V0VVFzMGllaUlTMU5ZTkJIRVFTb3kzY3Q0Z3B5LTRGWkt3SGlsa1kiCn0=.vnMKJBR2HB0CmWdrag6lt6aNRtN8BVvXiBoENFiqKlgXK7LFKz75WRza69Z9YhAd9yxAj2lKHlBGAulOG_IcMg"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/credential_body"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK <br><br>Header is a JSON object with this <a target=\"blank\" href=\"https://raw.githubusercontent.com/it-helpers/it-wallet-helpers/0.6.0/docs/schemes/jwt_vc_sd_header.json\">JSON schema</a> </br></br> Payload is a JSON object with this <a target=\"blank\" href=\"https://raw.githubusercontent.com/it-helpers/it-wallet-helpers/0.6.0/docs/schemes/jwt_vc_sc.json\">JSON schema</a> <br> The verifiable credential (VC) is a digitally signed JWT carrying the information about a subject in clear text and containing SHA256 digests/thumbprints over the selectively disclosable claims with the Disclosures outside the document, using the format defined in <a target=\"blank\" href=\"https://datatracker.ietf.org/doc/html/draft-ietf-oauth-selective-disclosure-jwt-07\">draft-ietf-oauth-selective-disclosure-jwt-07</a> and <a target=\"blank\" href=\"https://hub.ebsi.eu/vc-framework/did/selective-disclosure-sd-jwt\">draft-selective-disclosure-sd-jwt</a>. <br/>The SD-JWT and the Disclosures are issued as a single concatenated string, with the tilde ~ serving as a separator.<br/>The first block comprises the SD-JWT, while the remainder constitutes the Disclosures. <br/><SD-JWT> ~ <Disclosure 1> ~ <Disclosure 2> ~ ... <br/><br/>SD-JWT=<base64-url-encoded(header)>.<base64-url-encoded(payload)>.<base64-url-encoded(signature)><br/><br/>Disclosure is created as follow: <br/> <br/> 1) Create an array of three elements in this order: salt (base64url-encode minimum 128 bits of cryptographically secure pseudorandom data), claim name, claim value; <br/> <br/> 2) JSON-encode the array generated at the step 1, producing an UTF-8 string: <br> <i>$ echo -n '[\"pZ5MRyOxpVWZuHLoJ-yjRg\",\"tax_id_code\",\"RSSMRA80R01H501B\"]' </i> <br> --> <b>[\"pZ5MRyOxpVWZuHLoJ-yjRg\",\"tax_id_code\",\"RSSMRA80R01H501B\"]</b> <br/> <br/> 3) base64url-encode the byte representation of the UTF-8 string produced at the step 2 (the result is the Disclosure)<br> <i>$ echo -n '[\"pZ5MRyOxpVWZuHLoJ-yjRg\",\"tax_id_code\",\"RSSMRA80R01H501B\"]' | openssl base64 -a -A | sed 's/+/-/g; s,/,_,g; s/=//g' </i> <br> --> <b> WyJwWjVNUnlPeHBWV1p1SExvSi15alJnIiwidGF4X2lkX2NvZGUiLCJSU1NNUkE4MFIwMUg1MDFCIl0</b> <br><br>In the example given here, within the claim <b>&#95;sd</b> of the payload of the SD-JWT we found the base64url-encode of the SHA256 digest of the disclosure 'WyJwWjVNUnlPeHBWV1p1SExvSi15alJnIiwidGF4X2lkX2NvZGUiLCJSU1NNUkE4MFIwMUg1MDFCIl0' <br>$ echo -n 'W1wicFo1TVJ5T3hwVldadUhMb0oteWpSZ1wiLFwidGF4X2lkX2NvZGVcIixcIlJTU01SQTgwUjAxSDUwMUJcIl0'| openssl sha256 -binary | openssl base64 -a -A | sed 's/+/-/g; s,/,_,g; s/=//g' <br> --> <b>WIilTHgXkryvO4HdJATdqoYK3J8WSQAIujGxe1fb8bE</b> <br><br>{<br>  \"_sd\": [<br>    \"NOxVzjUJg667iBdeDwmr6tZ46X-jchKwIVxMAfv43yc\",<br>    \"wyfxVqq9BosPT7tN4SHOI4E48P19aVA1ktW5Zf0E-fc\",<br>    \"UHChpGtNF2bj1FvAfBby1rnf7WXkxelFJ5a4vSj2FO4\", <br>    \"TK2RguPYoXzCx0vv5hbN9u5M2mHlWBt41qGWlLXCNu8\", <br>    \"<b>WIilTHgXkryvO4HdJATdqoYK3J8WSQAIujGxe1fb8bE</b>\"  <br>  ], <br> \"exp\": 1883000000,<br>  \"iss\": \"https://pidprovider.example.org\",<br>  \"sub\": \"NzbLsXh8uDCcd7noWXFZAfHkxZsRGC9Xs\",<br>  \"status\": {<br>    \"status_attestation\": {<br>      \"credential_hash_alg\": \"sha-256\"<br>    }<br>  },<br>  \"vct\": \"PersonIdentificationData\",<br>  \"_sd_alg\": \"sha-256\",<br>  \"cnf\": {<br>    \"jwk\": {<br>      \"kty\": \"EC\",<br>      \"crv\": \"P-256\",<br>      \"x\": \"TCAER19Zvu3OHF4j4W4vfSVoHIP1ILilDls7vCeGemc\",<br>      \"y\": \"ZxjiWWbZMQGHVWKVQ4hbSIirsVfuecCE6t4jT9F2HZQ\"<br>    }<br>  }<br>}<br>",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "5XX": {
            "description": "Unexpected error."
          }
        }
      }
    },
    "/.well-know/openid-federation": {
      "get": {
        "tags": [
          "Credential Issuance Flow"
        ],
        "summary": "Retrieve Entity Configuration of eID Provider.",
        "operationId": "federationEntityConfigurationRequest",
        "description": "1. <b>Client</b> calls the “/.well-know/openid-federation” of the eID Provider to obtain the entity configuration; \n 2. <b>eID Provider // OpenIdFederation</b> returns the entity configuration; \n 3. <b>Client</b> extracts the entity Configuration and entityId of the Trust Anchor from the authority_hints; \n 4. <b>Client</b> calls the “./well-know/openid-federation” of the Trust Anchor using the entityId from the previous step; \n 5. <b>Trust Anchor // OpenIdFederation</b> validates the request, retrieves the entity configuration (jwt), and creates a response; \n 6. <b>Client</b> receives the Response from the Trust Anchor; \n 7. <b>Client</b> extracts the entity configuration of the Trust Anchor and retrieves the fetch URL of the Trust Configuration // OpenIdFederation; \n 8. <b>Client</b> sends a GET request to the fetch using the endpoint from the previous step to obtain the Subordinate Statement of the eId Provider (transmitting “iss” = Trust Anchor identifier, and “sub” = identifier of the eIdProvider as the Subordinate Statement owner); \n 9. <b>Trust Anchor // OpenIdFederation</b> receives and retrieves the Subordinate Statement of the eId Provider using “sub”; \n 10. <b>Trust Anchor // OpenIdFederation</b> returns the response; \n 11. <b>Client</b> retrieves all metadata from the “metadata” claim of the eId Provider in the response and proceeds with storage. \n ",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/entity-statement+jwt": {
                "schema": {
                  "pattern": "^[A-Za-z0-9_-]{2,}(?:\\.[A-Za-z0-9_-]{2,}){2}$",
                  "type": "string",
                  "description": "Metadata that an Entity publishes about itself (in signed JWT format), verifiable with a trusted third party (Superior Entity). It's called Entity Configuration. (<a target=\"blank\" href=\"https://github.com/it-helpers/it-wallet-helpers/blob/0.6.0/docs/schemes/jwt_entity-configuration_eid_provider.json\">View the JSON schema</a>).",
                  "format": "A digitally signed JWT",
                  "example": "eyJhbGciOiJFUzI1NiIsImtpZCI6IkZBTkZTM1luQzl0amlDYWl2aFdMVlVKM0F4d0dHel85OHVSRmFxTUVFcyIsInR5cCI6ImVudGl0eS1zdGF0ZW1lbnQrand0In0.eyJleHAiOiIxNjQ5NjEwMjQ5IiwiaWF0IjoiMTY0OTQzNzQ0OSIsImlzcyI6Imh0dHBzOi8vaXQtd2FsbGV0LWVpZC1wcm92aWRlci5leGFtcGxlLml0Iiwic3ViIjoiaHR0cHM6Ly9pdC13YWxsZXQtZWlkLXByb3ZpZGVyLmV4YW1wbGUuaXQiLCJqd2tzIjp7ImtleXMiOlt7Imt0eSI6IlJTQSIsInVzZSI6InNpZyIsIm4iOiIxVGEtc0UgLi4uIiwiZSI6IkFRQUIiLCJraWQiOiJGQU5GUzNZbkM5dGppQ2FpdmhXTFZVSjNBeHdHR3pfOTh1UkZhcU1FRXMifV19LCJhdXRob3JpdHlfaGludHMiOlsiaHR0cHM6Ly9zdXBlcmlvci1lbnRpdHkuZXhhbXBsZS5vcmcvZmVkZXJhdGlvbiJdLCJtZXRhZGF0YSI6eyJmZWRlcmF0aW9uX2VudGl0eSI6eyJvcmdhbml6YXRpb25fbmFtZSI6IlBJRCBQcm92aWRlciBPcmdhbml6YXRpb24gRXhhbXBsZSIsImhvbWVwYWdlX3VyaSI6Imh0dHBzOi8vaXQtd2FsbGV0LWVpZC1wcm92aWRlci5leGFtcGxlLml0IiwicG9saWN5X3VyaSI6Imh0dHBzOi8vaXQtd2FsbGV0LWVpZC1wcm92aWRlci5leGFtcGxlLml0L3ByaXZhY3lfcG9saWN5IiwidG9zX3VyaSI6Imh0dHBzOi8vaXQtd2FsbGV0LWVpZC1wcm92aWRlci5leGFtcGxlLml0L2luZm9fcG9saWN5IiwibG9nb191cmkiOiJodHRwczovL2l0LXdhbGxldC1laWQtcHJvdmlkZXIuZXhhbXBsZS5pdC9sb2dvLnN2ZyIsImNvbnRhY3RzIjpbIm9wc0BwaWQtcHJvdmlkZXIuZXhhbXBsZS5vcmciXSwiZmVkZXJhdGlvbl9yZXNvbHZlX2VuZHBvaW50IjoiaHR0cHM6Ly9pdC13YWxsZXQtZWlkLXByb3ZpZGVyLmV4YW1wbGUuaXQvcmVzb2x2ZSJ9LCJvYXV0aF9hdXRob3JpemF0aW9uX3NlcnZlciI6eyJhdXRob3JpemF0aW9uX2VuZHBvaW50IjoiaHR0cHM6Ly9pdC13YWxsZXQtZWlkLXByb3ZpZGVyLmV4YW1wbGUuaXQvYXV0aG9yaXphdGlvbiIsInB1c2hlZF9hdXRob3JpemF0aW9uX3JlcXVlc3RfZW5kcG9pbnQiOiJodHRwczovL2l0LXdhbGxldC1laWQtcHJvdmlkZXIuZXhhbXBsZS5pdC9hcy9wYXIiLCJkcG9wX3NpZ25pbmdfYWxnX3ZhbHVlc19zdXBwb3J0ZWQiOlsiRVMyNTYiLCJFUzUxMiJdLCJ0b2tlbl9lbmRwb2ludCI6Imh0dHBzOi8vaXQtd2FsbGV0LWVpZC1wcm92aWRlci5leGFtcGxlLml0L3Rva2VuIiwiY2xpZW50X3JlZ2lzdHJhdGlvbl90eXBlc19zdXBwb3J0ZWQiOlsiYXV0b21hdGljIl0sImNvZGVfY2hhbGxlbmdlX21ldGhvZHNfc3VwcG9ydGVkIjpbIlMyNTYiXSwiYXV0aG9yaXphdGlvbl9kZXRhaWxzX3R5cGVzX3N1cHBvcnRlZCI6WyJvcGVuaWRfY3JlZGVudGlhbCJdLCJhY3JfdmFsdWVzX3N1cHBvcnRlZCI6WyJodHRwczovL3d3dy5zcGlkLmdvdi5pdC9TcGlkTDIiLCJodHRwczovL3d3dy5zcGlkLmdvdi5pdC9TcGlkTDMiXSwiZ3JhbnRfdHlwZXNfc3VwcG9ydGVkIjpbImF1dGhvcml6YXRpb25fY29kZSJdLCJpc3N1ZXIiOiJodHRwczovL2l0LXdhbGxldC1laWQtcHJvdmlkZXIuZXhhbXBsZS5pdCIsImp3a3MiOnsia2V5cyI6W3sia3R5IjoiRUMiLCJraWQiOiJGQU5GUzNZbkM5dGppQ2FpdmhXTFZVSjNBeHdHR3pfOTh1UkZhcU1FRXMifV19LCJzY29wZXNfc3VwcG9ydGVkIjpbIlBlcnNvbklkZW50aWZpY2F0aW9uRGF0YSJdLCJyZXF1ZXN0X3BhcmFtZXRlcl9zdXBwb3J0ZWQiOnRydWUsInJlcXVlc3RfdXJpX3BhcmFtZXRlcl9zdXBwb3J0ZWQiOmZhbHNlLCJyZXNwb25zZV90eXBlc19zdXBwb3J0ZWQiOlsiY29kZSJdLCJzdWJqZWN0X3R5cGVzX3N1cHBvcnRlZCI6WyJwYWlyd2lzZSJdLCJ0b2tlbl9lbmRwb2ludF9hdXRoX21ldGhvZHNfc3VwcG9ydGVkIjpbImF0dGVzdF9qd3RfY2xpZW50X2F1dGgiXSwidG9rZW5fZW5kcG9pbnRfYXV0aF9zaWduaW5nX2FsZ192YWx1ZXNfc3VwcG9ydGVkIjpbIkVTMjU2IiwiRVMzODQiLCJFUzUxMiJdLCJyZXF1ZXN0X29iamVjdF9zaWduaW5nX2FsZ192YWx1ZXNfc3VwcG9ydGVkIjpbIkVTMjU2IiwiRVMzODQiLCJFUzUxMiJdfSwib3BlbmlkX2NyZWRlbnRpYWxfaXNzdWVyIjp7ImNyZWRlbnRpYWxfaXNzdWVyIjoiaHR0cHM6Ly9pdC13YWxsZXQtZWlkLXByb3ZpZGVyLmV4YW1wbGUuaXQiLCJjcmVkZW50aWFsX2VuZHBvaW50IjoiaHR0cHM6Ly9pdC13YWxsZXQtZWlkLXByb3ZpZGVyLmV4YW1wbGUuaXQvY3JlZGVudGlhbCIsInJldm9jYXRpb25fZW5kcG9pbnQiOiJodHRwczovL2l0LXdhbGxldC1laWQtcHJvdmlkZXIuZXhhbXBsZS5pdC9yZXZva2UiLCJzdGF0dXNfYXR0ZXN0YXRpb25fZW5kcG9pbnQiOiJodHRwczovL2l0LXdhbGxldC1laWQtcHJvdmlkZXIuZXhhbXBsZS5pdC9zdGF0dXMiLCJkaXNwbGF5IjpbeyJuYW1lIjoiUElEIFByb3ZpZGVyIEl0YWxpYW5vIGRpIGVzZW1waW8iLCJsb2NhbGUiOiJpdC1JVCJ9LHsibmFtZSI6IkV4YW1wbGUgUElEIFByb3ZpZGVyIiwibG9jYWxlIjoiZW4tVVMiLCJsb2dvIjp7InVybCI6Imh0dHBzOi8vaXQtd2FsbGV0LWVpZC1wcm92aWRlci5leGFtcGxlLml0L3B1YmxpYy9sb2dvLnN2ZyIsImFsdF90ZXh0IjoibG9nbyBkaSBxdWVzdG8gUElEIFByb3ZpZGVyIn19XSwiandrcyI6eyJrZXlzIjpbeyJjcnYiOiJQLTI1NiIsImt0eSI6IkVDIiwieCI6Im5ld0s1cURZTWVrckNQUE8teUVZVGRKVldKTVR6YXNNYXZ0MnZtMU1iLUEiLCJ5IjoiVml6WGFMTzZkemVlc1pQeGZwR1phYlRLM2NUWHRCVWJJaVFwbWlZUnRTRSIsImtpZCI6ImZmMGJkZWQwNDVmZTYzZmU1ZDFkNjRkZDgzYjU2N2UwIn1dfSwiY3JlZGVudGlhbF9jb25maWd1cmF0aW9uc19zdXBwb3J0ZWQiOlt7ImZvcm1hdCI6InZjK3NkLWp3dCIsImNyeXB0b2dyYXBoaWNfYmluZGluZ19tZXRob2RzX3N1cHBvcnRlZCI6WyJqd2siXSwiY3JlZGVudGlhbF9zaWduaW5nX2FsZ192YWx1ZXNfc3VwcG9ydGVkIjpbIkVTMjU2IiwiRVMzODQiLCJFUzUxMiJdLCJwcm9vZl90eXBlc19zdXBwb3J0ZWQiOnsiand0Ijp7InByb29mX3NpZ25pbmdfYWxnX3ZhbHVlc19zdXBwb3J0ZWQiOlsiRVMyNTYiXX19LCJkaXNwbGF5IjpbeyJuYW1lIjoiUElEIEl0YWxpYW5vIGRpIGVzZW1waW8iLCJsb2NhbGUiOiJpdC1JVCIsImxvZ28iOnsidXJsIjoiaHR0cHM6Ly9pdC13YWxsZXQtZWlkLXByb3ZpZGVyLmV4YW1wbGUuaXQvcHVibGljL2xvZ28uc3ZnIiwiYWx0X3RleHQiOiJsb2dvIGRpIHF1ZXN0YSBDcmVkZW56aWFsZSJ9LCJiYWNrZ3JvdW5kX2NvbG9yIjoiIzEyMTA3YyIsInRleHRfY29sb3IiOiIjRkZGRkZGIn0seyJuYW1lIjoiRXhhbXBsZSBJdGFsaWFuIFBJRCIsImxvY2FsZSI6ImVuLVVTIiwibG9nbyI6eyJ1cmwiOiJodHRwczovL2l0LXdhbGxldC1laWQtcHJvdmlkZXIuZXhhbXBsZS5pdC9wdWJsaWMvbG9nby5zdmciLCJhbHRfdGV4dCI6IlRoZSBsb2dvIG9mIHRoaXMgY3JlZGVudGlhbCJ9LCJiYWNrZ3JvdW5kX2NvbG9yIjoiIzEyMTA3YyIsInRleHRfY29sb3IiOiIjRkZGRkZGIn1dLCJjcmVkZW50aWFsX2RlZmluaXRpb24iOnsidHlwZSI6WyJQZXJzb25JZGVudGlmaWNhdGlvbkRhdGEiXSwidmVyaWZpY2F0aW9uIjp7InRydXN0X2ZyYW1ld29yayI6ImVpZGFzIiwiYXNzdXJhbmNlX2xldmVsIjoiaGlnaCIsImV2aWRlbmNlIjpbeyJ0eXBlIjoiZWxlY3Ryb25pY19yZWNvcmQiLCJyZWNvcmQiOnsidHlwZSI6Imh0dHBzOi8vZXVkaS53YWxsZXQuY2llLmdvdi5pdCIsInNvdXJjZSI6eyJvcmdhbml6YXRpb25fbmFtZSI6Ik1pbmlzdGVybyBkZWxsJ0ludGVybm8iLCJvcmdhbml6YXRpb25faWQiOiJ1cm46ZXVkaTppdDpvcmdhbml6YXRpb25faWQ6aXBhX2NvZGU6bV9pdCIsImNvdW50cnlfY29kZSI6IklUIn19fV19LCJjcmVkZW50aWFsU3ViamVjdCI6eyJnaXZlbl9uYW1lIjp7Im1hbmRhdG9yeSI6dHJ1ZSwiZGlzcGxheSI6W3sibmFtZSI6IkN1cnJlbnQgRmlyc3QgTmFtZSIsImxvY2FsZSI6ImVuLVVTIn0seyJuYW1lIjoiTm9tZSIsImxvY2FsZSI6Iml0LUlUIn1dfSwiZmFtaWx5X25hbWUiOnsibWFuZGF0b3J5Ijp0cnVlLCJkaXNwbGF5IjpbeyJuYW1lIjoiQ3VycmVudCBGYW1pbHkgTmFtZSIsImxvY2FsZSI6ImVuLVVTIn0seyJuYW1lIjoiQ29nbm9tZSIsImxvY2FsZSI6Iml0LUlUIn1dfSwiYmlydGhfZGF0ZSI6eyJtYW5kYXRvcnkiOnRydWUsImRpc3BsYXkiOlt7Im5hbWUiOiJEYXRlIG9mIEJpcnRoIiwibG9jYWxlIjoiZW4tVVMifSx7Im5hbWUiOiJEYXRhIGRpIE5hc2NpdGEiLCJsb2NhbGUiOiJpdC1JVCJ9XX0sInVuaXF1ZV9pZCI6eyJtYW5kYXRvcnkiOnRydWUsImRpc3BsYXkiOlt7Im5hbWUiOiJVbmlxdWUgSWRlbnRpZmllciIsImxvY2FsZSI6ImVuLVVTIn0seyJuYW1lIjoiSWRlbnRpZmljYXRpdm8gdW5pdm9jbyIsImxvY2FsZSI6Iml0LUlUIn1dfSwidGF4X2lkX2NvZGUiOnsibWFuZGF0b3J5Ijp0cnVlLCJkaXNwbGF5IjpbeyJuYW1lIjoiVGF4IElkIE51bWJlciIsImxvY2FsZSI6ImVuLVVTIn0seyJuYW1lIjoiQ29kaWNlIEZpc2NhbGUiLCJsb2NhbGUiOiJpdC1JVCJ9XX19fX1dfX19.h-VsgOMMpnwTZNHcm5e_amXhBvqH4teRfh5CUT3WbRJb2fRIgQU6yBiGaZXFkcR1dYodQNqy3Ds4Hu15Yn6ZWg"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "5XX": {
            "description": "Unexpected error."
          }
        }
      }
    },
    "/status": {
      "post": {
        "summary": "The Issuer provides the Wallet Instance with a Status Attestation.",
        "description": "1. The <b>Credential Issuer</b> checks validity of Status Attestation Request and stores it in local database. \n <b>Note.</b>Verification of the request is done by extracting the DPoP Proof JWT contained in the credential_pop parameter and validating its signature with the public key contained in the digital credential identified by the hash of the credential itself reported within the credentianl_hash claim of the DPoP Proof JWT (the Credential Issuer uses the hash of the credential extracted from the DPoP Proof JWT presented in the request to retrieve the credential from local database); \n 2.The <b>Credential Issuer</b> extracts from local database the identifier (CF) of the user holding the digital credential retrieved in step 1 using the hash of the credential as the search key; \n 3. The <b>Credential Issuer</b> sends digital credential data request by submitting the user ID retrieved in step 2 to the Authentic Source; \n 4. The <b>Credential Issuer</b> performs a formal validation of the response returned by the Authentic Source; checks if the data received from the Authentic Source is still valid or has been revoked and checks if it is the same as the data present in local database (hashes of the data returned from the Authentic Source are generated and compared with the same data present locally in order to check for any updates on the same).  <b>Note.</b> In the case of at least one data update, the digital credential must be revoked by the Credential Issuer of the EAA Provider and no Status Attestation must be issued for this credential; \n 5. The <b>Credential Issuer</b> gives of the Status Attestation in JWT format and its storage in local database by associating it with the digital credential; creation of the Status Attestation Response encapsulating the Status Attestation and its storage in local database with linkage to the Status Attestation Request saved in step 1; \n 6. The <b>Credential Issuer</b> sends the Status Attestation Response to the Client.",
        "tags": [
          "Credential Issuance Flow"
        ],
        "operationId": "statusRequest",
        "parameters": [
          {
            "in": "header",
            "name": "credential_pop",
            "schema": {
              "type": "string",
              "format": "jwt (<base64-url-encoded header>.<base64-url-encoded claims>.<base64-url-encoded signature>)",
              "pattern": "^[A-Za-z0-9_-]{2,}(?:\\.[A-Za-z0-9_-]{2,}){2}$"
            },
            "description": "The Wallet Instance sends the Status Attestation Request to the Issuer. The request MUST contain the Credential Proof of Possession JWT, signed with the private key related to the public key contained within the Credential..</br></br> Header is a JSON object with this <a target=\"blank\" href=\"https://raw.githubusercontent.com/it-helpers/it-wallet-helpers/0.6.0/docs/schemes/jwt_status_attestation_header_eid_provider.json\">JSON schema</a> </br></br> Payload is a JSON object with this <a target=\"blank\" href=\"https://raw.githubusercontent.com/it-helpers/it-wallet-helpers/0.6.0/docs/schemes/jwt_status_attestation_eid_provider.json\">JSON schema</a>",
            "example": "ewogICAgImFsZyI6ICJFUzI1NiIsCiAgICAidHlwIjogInN0YXR1cy1hdHRlc3RhdGlvbi1yZXF1ZXN0K2p3dCIsCiAgICAia2lkIjogImVOTi1nNWk2Q25MS2NsdFFCcDZhYmJpb0dNYnpNNm11VzN2dXh3NnVoODgiCn0.ewogICAgImlzcyI6ICJld29nSUNBZ0ltTnVaaUk2SUhzS0lDQWdJQ0FnSUNBaWFuZHJJam9nZXdvZ0lDQWdJQ0FnSUNBZ0lDQWlhM1I1SWpvZ0lrVkRJaXdLSUNBZ0lDQWdJQ0FnSUNBZ0ltTnlkaUk2SUNKUUxUSTFOaUlzQ2lBZ0lDQWdJQ0FnSUNBZ0lDSjRJam9nSWxSRFFVVlNNVGxhZG5VelQwaEdOR28wVnpSMlpsTldiMGhKVURGSlRHbHNSR3h6TjNaRFpVZGxiV01pTEFvZ0lDQWdJQ0FnSUNBZ0lDQWllU0k2SUNKYWVHcHBWMWRpV2sxUlIwaFdWMHRXVVRSb1lsTkphWEp6Vm1aMVpXTkRSVFowTkdwVU9VWXlTRnBSSWdvZ0lDQWdJQ0FnSUgwS0lDQWdJSDBLZlEiLAogICAgImlhdCI6IDE1MDQ2OTkxMzYsCiAgICAiZXhwIjogMTUwNDcwMDEzNiwKICAgICJjcmVkZW50aWFsX2hhc2giOiAiMjExZjgwNDAwZWRlYWFmNjgzYmE2NTBlODJiOWFjZTI0NmQzNDM3Mjc4YjAxZTczYjc3OTM5YjFjYTZjYzgwZCIsCiAgICAiY3JlZGVudGlhbF9oYXNoX2FsZyI6ICJzaGEtMjU2IiwKICAgICJjbmYiOiB7CiAgICAgICAgImp3ayI6IHsKICAgICAgICAgICAgImt0eSI6ICJFQyIsCiAgICAgICAgICAgICJjcnYiOiAiUC0yNTYiLAogICAgICAgICAgICAieCI6ICJUQ0FFUjE5WnZ1M09IRjRqNFc0dmZTVm9ISVAxSUxpbERsczd2Q2VHZW1jIiwKICAgICAgICAgICAgInkiOiAiWnhqaVdXYlpNUUdIVldLVlE0aGJTSWlyc1ZmdWVjQ0U2dDRqVDlGMkhaUSIKICAgICAgICB9CiAgICB9Cn0.VyT25r23eO_ppWuw0ONV6GKjJFfvYtJKQSIngGwtyklmckhE3vg5U7Cws9V41GOU6F77MVifGfXf0l2HP3mW1Q"
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The error code",
                      "example": "invalid_request"
                    },
                    "error_description": {
                      "type": "string",
                      "description": "Text in human-readable form providing further details to clarify the nature of the error encountered",
                      "example": "The signature of credential_pop JWT is not valid"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The error code",
                      "example": "not_found"
                    },
                    "error_description": {
                      "type": "string",
                      "description": "Text in human-readable form providing further details to clarify the nature of the error encountered",
                      "example": "The Digital Credential can not be found by the Issuer"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The error code",
                      "example": "internal_server_error"
                    },
                    "error_description": {
                      "type": "string",
                      "description": "Text in human-readable form providing further details to clarify the nature of the error encountered",
                      "example": "The Issuer encountered an internal problem."
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The error code",
                      "example": "service_unavaible"
                    },
                    "error_description": {
                      "type": "string",
                      "description": "Text in human-readable form providing further details to clarify the nature of the error encountered",
                      "example": "The Issuer is temporary unavailable."
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/revoke": {
      "post": {
        "summary": "A Wallet Instance request the revocation of a Digital Credential",
        "description": "1. The <b>Client</b> send the Revocation Request by HTTP-POST; \n 2. The <b>Credential Issuer</b> checks the validity of the Revocation Request and stores it in local database. <b>Note.</b> The check of the request is done by extracting the DPoP Proof JWT contained in the credential_pop parameter and validating its signature of the DPoP Proof JWT with the public key contained in the digital credential identified by the hash of the credential itself reported within the credentianl_hash claim of the DPoP Proof JWT (the Credential Issuer uses the hash of the digital credential extracted from the DPoP Proof JWT presented in the request to retrieve the credential from local database); \n 3. The <b>Credential Issuer</b> checks local database for the existence and validity status of the digital credential retrieved in step 2 using the hash of the credential as the search key; \n 4. The <b>Credential Issuer</b> revokes the digital credential retrieved in step 2 and updates local database; creates the Revocation Response and stores it in local database by associating it with the Revocation Request saved in step 2; \n 5. The <b>Credential Issuer</b> the Wallet Instance sends the Revocation Response.",
        "tags": [
          "Credential Issuance Flow"
        ],
        "operationId": "revokeRequest",
        "parameters": [
          {
            "in": "header",
            "name": "credential_pop",
            "schema": {
              "type": "string",
              "format": "jwt (<base64-url-encoded header>.<base64-url-encoded claims>.<base64-url-encoded signature>)",
              "pattern": "^[A-Za-z0-9_-]{2,}(?:\\.[A-Za-z0-9_-]{2,}){2}$"
            },
            "description": "The Wallet Instance sends the Revocation Request to the Issuer. The request MUST contain the Credential Proof of Possession JWT, signed with the private key related to the public key contained within the Credential.</br></br> Header is a JSON object with this <a target=\"blank\" href=\"https://raw.githubusercontent.com/it-helpers/it-wallet-helpers/0.6.0/docs/schemes/jwt_revocation_header_eid_provider.json\">JSON schema</a> </br></br> Payload is a JSON object with this <a target=\"blank\" href=\"https://raw.githubusercontent.com/it-helpers/it-wallet-helpers/0.6.0/docs/schemes/jwt_revocation_eid_provider.json\">JSON schema</a>",
            "example": "ewogICJhbGciOiAiRVMyNTYiLAogICJ0eXAiOiAicmV2b2NhdGlvbi1yZXF1ZXN0K2p3dCIsCiAgImtpZCI6ICJlTk4tZzVpNkNuTEtjbHRRQnA2YWJiaW9HTWJ6TTZtdVczdnV4dzZ1aDg4Igp9.ewogICJqdGkiOiAiLUJ3QzNFU2M2YWNjMmxUYyIsCiAgImlzcyI6ICJld29nSUNBZ0ltTnVaaUk2SUhzS0lDQWdJQ0FnSUNBaWFuZHJJam9nZXdvZ0lDQWdJQ0FnSUNBZ0lDQWlhM1I1SWpvZ0lrVkRJaXdLSUNBZ0lDQWdJQ0FnSUNBZ0ltTnlkaUk2SUNKUUxUSTFOaUlzQ2lBZ0lDQWdJQ0FnSUNBZ0lDSjRJam9nSWxSRFFVVlNNVGxhZG5VelQwaEdOR28wVnpSMlpsTldiMGhKVURGSlRHbHNSR3h6TjNaRFpVZGxiV01pTEFvZ0lDQWdJQ0FnSUNBZ0lDQWllU0k2SUNKYWVHcHBWMWRpV2sxUlIwaFdWMHRXVVRSb1lsTkphWEp6Vm1aMVpXTkRSVFowTkdwVU9VWXlTRnBSSWdvZ0lDQWdJQ0FnSUgwS0lDQWdJSDBLZlEiLAogICJhdWQiOiAiaHR0cDovL2l0LXdhbGxldC1laWQtcHJvdmlkZXIuZXhhbXBsZS5pdC9yZXZva2UiLAogICJpYXQiOiAxNTA0Njk5MTM2LAogICJleHAiOiAxNTA0NzAwMTM2LAogICJjcmVkZW50aWFsX2hhc2giOiAiMjExZjgwNDAwZWRlYWFmNjgzYmE2NTBlODJiOWFjZTI0NmQzNDM3Mjc4YjAxZTczYjc3OTM5YjFjYTZjYzgwZCIsCiAgImNyZWRlbnRpYWxfaGFzaF9hbGciOiAic2hhLTI1NiIKfQ.VyT25r23eO_ppWuw0ONV6GKjJFfvYtJKQSIngGwtyklmckhE3vg5U7Cws9V41GOU6F77MVifGfXf0l2HP3mW1Q"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The error code",
                      "example": "invalid_request"
                    },
                    "error_description": {
                      "type": "string",
                      "description": "Text in human-readable form providing further details to clarify the nature of the error encountered",
                      "example": "The issuer cannot fulfill the request because of invalid parameters"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The error code",
                      "example": "not_found"
                    },
                    "error_description": {
                      "type": "string",
                      "description": "Text in human-readable form providing further details to clarify the nature of the error encountered",
                      "example": "The Digital Credential to be revoked can not be found by the Issuer."
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The error code",
                      "example": "internal_server_error"
                    },
                    "error_description": {
                      "type": "string",
                      "description": "Text in human-readable form providing further details to clarify the nature of the error encountered",
                      "example": "The Issuer encountered an internal problem."
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The error code",
                      "example": "service_unavaible"
                    },
                    "error_description": {
                      "type": "string",
                      "description": "Text in human-readable form providing further details to clarify the nature of the error encountered",
                      "example": "The Issuer is temporary unavailable."
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/login": {
      "get": {
        "tags": [
          "SAML Authentication Flow"
        ],
        "summary": "Login request for starting a user authentication flow to a specific SAML IdP", 
        "description": "<ol><li><b>Client</b> sends a login request to the Service Provider (SP) for starting a user authentication flow to a specific Identity Provider (IdP);</li><li>The <b>Service Provider (SP)</b> generates an identifier for the login request received ('RelayState'), creates a SAML authentication request and signs it;</li><li>The <b>SP</b> redirects the Wallet Instance to the IdP with the SAML authentication request, the signature, the signature algorithm used and the RelayState;</li><li>The <b>IdP</b> validates the SAML authentication request;</li><li>The <b>IdP</b> authenticates the user by prompting for a username and password or some other authentication factor</li><li>Upon successful authentication, the <b>IdP</b> generates a SAML response that include the SAML authentication assertion contains user identity and authentication context data and signs it;</li><li>The <b>IdP</b> redirects the Wallet Instance to the Assertion Consumer Service of the SP (specified inside the \"AssertionConsumerService\" element of the SP Metadata) with the generated SAML Response, the signature, the signature algorithm and the RelayState;</li></ol>",
        "operationId": "login",
        "parameters": [
          {
            "name": "state",
            "in": "cookie",
            "description": "Contains the unique application session identifier at the Wallet Instance side",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "fyZiOL9Lf2CeKuNT2JzxiLRDink0uPcd"
          },
          {
            "name": "idphint",
            "in": "query",
            "description": "The identifier of the hinted Identity Provider (entityID), in URL-encoded format",
            "required": true,
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            },
            "example": "https%3A%2F%2Fidp.example.org"
          },
          {
            "name": "target",
            "in": "query",
            "description": "Redirection URI of the SP, in URL-encoded format, to which the SP Assertion Consumer Service redirects the Wallet Instance with the SAML assertion extracted from the verified SAML Response (SP forward the request to the /authorization endpoint of the authorization server of eID Provider translating the SAML assertion to text plane values in HTTP heades).",
            "required": true,
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            },
            "example": "https%3A%2F%2Fwallet-sp.ipzs.it%2Fcallback"
          }
        ],
        "responses": {
          "302": {
            "description": "Found  <br> <br/> <b>No content</b> <br/><br/>=> EXAMPLE: 'https%3A%2F%2Fidp.example.org/saml2-sso?SAMLRequest=PHNhbWxwOkxvZ291dFJlcXVlc3QgeG1sbnM6c2FtbHA9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpwcm90b2NvbCIgeG1sbnM9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iCiAgICBJRD0iZDJiN2MzODhjZWMzNmZhN2MzOWMyOGZkMjk4NjQ0YTgiIElzc3VlSW5zdGFudD0iMjAwNC0wMS0yMVQxOTowMDo0OVoiIFZlcnNpb249IjIuMCI+CiAgICA8SXNzdWVyPmh0dHBzOi8vSWRlbnRpdHlQcm92aWRlci5jb20vU0FNTDwvSXNzdWVyPgogICAgPE5hbWVJRCBGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpuYW1laWQtZm9ybWF0OnBlcnNpc3RlbnQiPjAwNWEwNmUwLWFkODItMTEwZC1hNTU2LTAwNDAwNWIxM2EyYjwvTmFtZUlEPgogICAgPHNhbWxwOlNlc3Npb25JbmRleD4xPC9zYW1scDpTZXNzaW9uSW5kZXg+Cjwvc2FtbHA6TG9nb3V0UmVxdWVzdD4K&Signature=DCDqAwIDqSwyXGvG2cYvNjmj7P1kt0+kbCfRjq9gGTrN4KKPxvQl5EsFrWRkMOdxxuwPldWPKvfgX6rt+pKwLgCt1TqRj+71y+VdGS8ORsBeEIURRn9wSu+pKsWiHexwKnIe65bjONbg2db44QOWZlDe76fLi05Psy/7HZTQuMoDRFYSR//VyNGHQmf9Sxi6mkmrYMXPOyZAUfNhX4eLaXFfwCHt0yRrEcm/PAEDDa7uqe8Uo5ilstgXDWDodWdkSzk8ZS1irjFkvtxH7FJlm9ADtlW/SoX92jGjMIrdQwCyArI6o8KTiDp/cjDjHZGiXLx2WvS7GEibA7Qd+5hSBQ&SigAlg=http%3A%2F%2Fwww.w3.org%2F2000%2F09%2Fxmldsig%23rsa-sha1&RelayState=0043bfc1bc45110dae17004005b13a2b'",
            "headers": {
              "Location": {
                "description": "The Location response header indicates the URL of Identity Provider SSO seervice to redirect the Wallet Instance to. This URL present in query string the SANL authorization request (parameter 'SAMLRequest'), the signature (parameter 'Signature'), the signature algorithm (parameter 'SigAlg') and the login request id (parameter 'RelayState').",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }         
            }
          },
          "200": {
            "description": "Ok",
            "content": {
              "text/html:": {
                "example":"<?xml version='1.0' encoding='UTF-8'?>\n<!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.1//EN' 'http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd'>\n<html xmlns='http://www.w3.org/1999/xhtml'xml:lang='en'>\n<body onload='document.forms[0].submit()'>\n<noscript>\n<p>\n<strong>Note:</strong> Poiché il tuo browser non supporta JavaScript, devi premere il pulsante Continua una volta per procedere.\n</p>\n</noscript>\n<form action='https://idp.example.org/saml2-sso'method='post'>\n<div>\n<input type='hidden' name='RelayState' value='0043bfc1bc45110dae17004005b13a2b'/>\n<input type='hidden' name='SAMLRequest' value='PHNhbWxwOkxvZ291dFJlcXVlc3QgeG1sbnM6c2FtbHA9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpwcm90b2NvbCIgeG1sbnM9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iCiAgICBJRD0iZDJiN2MzODhjZWMzNmZhN2MzOWMyOGZkMjk4NjQ0YTgiIElzc3VlSW5zdGFudD0iMjAwNC0wMS0yMVQxOTowMDo0OVoiIFZlcnNpb249IjIuMCI+CiAgICA8SXNzdWVyPmh0dHBzOi8vSWRlbnRpdHlQcm92aWRlci5jb20vU0FNTDwvSXNzdWVyPgogICAgPE5hbWVJRCBGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpuYW1laWQtZm9ybWF0OnBlcnNpc3RlbnQiPjAwNWEwNmUwLWFkODItMTEwZC1hNTU2LTAwNDAwNWIxM2EyYjwvTmFtZUlEPgogICAgPHNhbWxwOlNlc3Npb25JbmRleD4xPC9zYW1scDpTZXNzaW9uSW5kZXg+Cjwvc2FtbHA6TG9nb3V0UmVxdWVzdD4K'/>\n<input type='hidden' name='Signature' value='J4if7CCeHVfn4H6hMZN5fijOjQIyZ/laoFUZWz4LCRN3J82UeoyYvAiTDoQOUZHTRJNU1lWGub1pW4QR9MH5bwfLEa8XDivA118dR0Q7YN5L/U5rmbxnGlQ9pV0jT44cRNeqtbLW0YF4plfcqg7E5iOSljE3QLkiaAdkAec2a4HwPFkn/JP7wO11Mc6kU8MLCBbZAa3+94ZvVwHBEdyCdU+1yEvf+JGxTw66BwI2ugmPfxvoJdsOOAWwS3KhAFhLLSPXnhb3nd/ovKNNV/khZYwqsFTFNTMA+0JraKsZiCRtEZzEPXaP9KilrjPIIvRVxDQhETj96flk5zMkEM3ruw=='/>\n<input type='hidden' name='SigAlg' value='http://www.w3.org/2000/09/xmldsig#rsa-sha1'/>\n</div>\n<noscript>\n<div>\n<input type='submit' value='Continua'/>\n</div>\n</noscript>\n</form>\n</body>\n</html>"
              }
            }
          }
        }
      }
    },
    "/acs": {
      "post": {
        "tags": [
          "SAML Authentication Flow"
        ],
        "summary": "Validating the SAML Response comes from a SAML IdP after successfully login",
        "description": "<ul><li><b>SP</b> validates the SAML response received from the Identity Provider and the SAML assertion that is contained in this response, creates a session for the authenticated user populated with the attributes extracted from the SAML assertion and redirects the Wallet Instance to the callback URI of the SP setting a session cookie ('sp_user_session') containing the unique user session identifier at the SP side (the callback URI is specified into the 'target' parameter of the login request previously recevived from the client)</li></ul>",
        "operationId": "assertionConsumer",
        "parameters": [
          {
            "name": "state",
            "in": "cookie",
            "description": "Contains the unique application session identifier at the Wallet Instance side",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "fyZiOL9Lf2CeKuNT2JzxiLRDink0uPcd"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/assertionConsumerRequest"
              }
            }
          }
        },
        "responses": {
          "302": {
            "description": "Found <br> <br/> <b>No content</b> <br> <br/> <b> EXAMPLE </b>: 'https%3A%2F%2Fwallet-sp.ipzs.it%2Fcallback'",
            "headers": {
              "Location": {
                "description": "The Location response header indicates the URL to which the instance wallet should be redirected. In this case the wallet instance will be redirected to the callback",
                "explode": false,
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              },
              "Set-Cookie":{
                "description": "Contains the unique user session identifier at the SP side",
                "schema": {
                  "type": "string",
                  "example": "sp_user_session=avZU92A1ke1goP4NT2JzxiLRPink89Pqw; Path=/; HttpOnly; Secure"
                }
              }
            }
          }
        }
      }
    },
    "/callback": {
      "get": {
        "tags": [
          "SAML Authentication Flow"
        ],
        "summary": "Forwarding authenticated user data to the /authorize_int endpoint of the eID Provider",
        "operationId": "callback",
        "description": "<ol><li>The <b>SP</b> validates the Wallet Instance request;</li><li>The <b>SP</b> extracts the unique user session identifier at the SP side from the session cookie 'sp_user_session' and use it for retrieving user data from his internal user session;</li><li>The <b>SP</b> forwards the request to the /authorize_int endpoint of eID Provider adding in header HTTP the user data extracted from the 'cookie sp_user_session' (eIDAS minimum set and authentication level) and the unique application session identifier at the Wallet Instance side extracted from the 'cookie state'.</li></ol> ",
        "parameters": [
          {
            "name": "state",
            "in": "cookie",
            "description": "Contains the unique application session identifier at the Wallet Instance side",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "fyZiOL9Lf2CeKuNT2JzxiLRDink0uPcd"
          },
          {
            "name": "sp_user_session",
            "in": "cookie",
            "description": "Contains the unique user session identifier at the SP side",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "avZU92A1ke1goP4NT2JzxiLRPink89Pqw"
          }
        ],
        "responses": {
          "302": {
            "description": "Found  <br> <br/> <b>No content</b> <br> <br/> <b> EXAMPLE </b>: 'https%3A%2F%2Fit-wallet-eid-provider.example.it%2Fauthorize_int'",
            "headers": {
              "Location": {
                "description": "The Location response header indicates the URL to forward the Wallet Instance to Eht internat Authorization Service of the eId Provider",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }  
              }
              }
            
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ParRequest": {
        "required": [
          "client_assertion",
          "client_assertion_type",
          "client_id",
          "code_challenge",
          "code_challenge_method",
          "request",
          "response_type"
        ],
        "type": "object",
        "properties": {
          "response_type": {
            "type": "string",
            "description": "MUST be set to 'code'",
            "example": "code"
          },
          "client_id": {
            "type": "string",
            "description": "MUST be set to the base64url encoded SHA-256 thumbprint of the public key specified inside the claim 'jwt' (in JWT format) of the cnf parameter of the Wallet Attestation JWT",
            "example": "AxjAnj0t5qpRVgR6apZ7gChaPb6y8gNm7CkPd58PD4c"
          },
          "code_challenge": {
            "type": "string",
            "description": "A challenge derived from the code verifier that is sent in the authorization request",
            "example": "E9Melhoa2OwvFrEMTJguCHaoeK1t8URWbuGJSstw-cM"
          },
          "code_challenge_method": {
            "type": "string",
            "description": "A method that was used to derive code challenge. It MUST be set to 'S256'",
            "example": "S256"
          },
          "request": {
            "pattern": "^[A-Za-z0-9_-]{2,}(?:\\.[A-Za-z0-9_-]{2,}){2}$",
            "type": "string",
            "description": "It MUST be a signed JWT (<a target=\"blank\" href=\"https://github.com/it-helpers/it-wallet-helpers/blob/0.6.0/docs/schemes/jwt_request_object.json\">View the JSON schema</a>). The private key corresponding to the public one in the cnf parameter inside the Wallet Attestation JWT MUST be used for signing the Request Object",
            "format": "A digitally signed JWT",
            "example": "$SIGNED-JWT"
          },
          "client_assertion_type": {
            "type": "string",
            "description": "It MUST be set to 'urn:ietf:params:oauth:client-assertion-type:jwt-client-attestation' (in URL-encoded format)",
            "example": "urn%3Aietf%3Aparams%3Aoauth%3Aclient-assertion-type%3Ajwt-client-attestation"
          },
          "client_assertion": {
            "type": "string",
            "description": "It MUST be set to a value containing the Wallet Attestation (in signed JWT format) and the Proof of Possession of the Wallet Attestation (in signed JWT format) separated with the ~ character",
            "example": "$WIA~WIA-PoP"
          }
        },
        "description": "The par request"
      },
      "ParResponse": {
        "required": [
          "expires_in",
          "request_uri"
        ],
        "type": "object",
        "properties": {
          "request_uri": {
            "type": "string",
            "description": "The request URI corresponding to the authorization request posted. This URI MUST be a single-use reference to the respective authorization request. It MUST contain some part generated using a cryptographically strong pseudorandom algorithm. The value format MUST be urn:ietf:params:oauth:request_uri:<reference-value> with <reference-value> as the random part of the URI that references the respective authorization request data",
            "example": "urn:ietf:params:oauth:request_uri:bwc4JK-ESC0w8acc191e-Y1LTC2"
          },
          "expires_in": {
            "type": "integer",
            "description": "Integer, it represents the lifetime in seconds of the request URI",
            "format": "int32",
            "example": 60
          }
        },
        "description": "The par response"
      },
      "TokenRequest": {
        "required": [
          "c_nonce_expires_in",
          "client_assertion",
          "client_assertion_type",
          "code",
          "code_verifier",
          "grant_type",
          "redirect_uri"
        ],
        "type": "object",
        "properties": {
          "grant_type": {
            "type": "string",
            "description": "MUST be set to 'authorization_code'",
            "example": "authorization_code"
          },
          "code": {
            "type": "string",
            "description": "The authorization code returned in the Authorization Response",
            "example": "SplxlOBeZQQYbYS6WxSbIA"
          },
          "redirect_uri": {
            "type": "string",
            "description": "It MUST be set as the Request Objectredirect_uri claim of the PAR Request",
            "example": "https://start.wallet.example.org/cb"
          },
          "code_verifier": {
            "type": "string",
            "description": "Verification code of the code_challenge of the PAR Request",
            "example": "dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk"
          },
          "client_assertion_type": {
            "type": "string",
            "description": "It MUST be set to 'urn:ietf:params:oauth:client-assertion-type:jwt-client-attestation' (in URL-encoded format)",
            "example": "urn%3Aietf%3Aparams%3Aoauth%3Aclient-assertion-type%3Ajwt-client-attestation"
          },
          "client_assertion": {
            "type": "string",
            "description": "It MUST be set to a value containing the Wallet Attestation (in signed JWT format) and the Proof of Possession of the Wallet Attestation (in signed JWT format) separated with the ~ character",
            "example": "$WIA~WIA-PoP"
          }
        },
        "description": "The token request"
      },
      "TokenResponse": {
        "required": [
          "access_token",
          "authorization_details",
          "c_nonce",
          "c_nonce_expires_in",
          "expires_in",
          "token_type"
        ],
        "type": "object",
        "properties": {
          "access_token": {
            "pattern": "^([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_=]+)$",
            "type": "string",
            "description": "The DPoP-bound Access Token (in signed JWT format) allows accessing the PID/(Q)EAA Credential Endpoint for obtaining Credentials specified in the PAR Request",
            "format": "A digitally signed JWT",
            "example": "eyJhbGciOiJFUzI1NiJ9.eyJzdWIiOiJzdWJfcGFpcndpc2UiLCJhdWQiOiJodHRwczovL3VhdC5ldWRpLXdhbGxldC1pdC1xZWFhLWlzc3Vlci5kZW1vLmlwenMuaXQvdG9rZW4iLCJqa3QiOiJrUU1VMTNOcnZpYzJEOUlHcDJ0LVBoTGZpSEdFRkc1Uk9FSUlleXVlN05NIiwiZXhwIjoxNzA1NTczNjU1LCJpYXQiOjE3MDU1NzAwNTUsIm5vbmNlIjoidHNfRXRVUXMwaWVpSVMxTllOQkhFUVNveTNjdDRncHktNEZaS3dIaWxrWSIsImp0aSI6ImY4NTU1Y2ViLWM2NWMtNDAyNS05Mzc4LWI2NjcyYjYxNDlhZiIsImNsaWVudF9pZCI6Imh0dHBzOi8vdWF0LmV1ZGktd2FsbGV0LWl0LXFlYWEtaXNzdWVyLmRlbW8uaXB6cy5pdC90b2tlbiJ9.VyT25r23eO_ppWuw0ONV6GKjJFfvYtJKQSIngGwtyklmckhE3vg5U7Cws9V41GOU6F77MVifGfXf0l2HP3mW1Q"
          },
          "token_type": {
            "type": "string",
            "description": "Type of Access Token returned. It MUST be equal to 'DPoP'",
            "example": "DPoP"
          },
          "expires_in": {
            "type": "integer",
            "description": "Expiry time of the Access Token in seconds",
            "format": "int32",
            "example": 3600
          },
          "c_nonce": {
            "type": "string",
            "description": "String containing a nonce value to be used to create a proof of possession of Private key material when requesting a Credential",
            "example": "ts_EtUQs0ieiIS1NYNBHEQSoy3ct4gpy-4FZKwHilkY"
          },
          "c_nonce_expires_in": {
            "type": "integer",
            "description": "Integer, it represents the lifetime in seconds of the c_nonce",
            "format": "int32",
            "example": 86400
          },
          "authorization_details": {
            "type": "array",
            "description": "Array, used to identify the authorized Verifiable Credential types with the DPoP-bound Access Token",
            "items": {
              "$ref": "#/components/schemas/TokenResponse_authorization_details"
            }
          }
        },
        "description": "The token response"
      },
      "WellKnowResponse": {
        "required": [
          "response"
        ],
        "type": "object",
        "properties": {
          "entity_configuration": {
            "pattern": "^[A-Za-z0-9_-]{2,}(?:\\.[A-Za-z0-9_-]{2,}){2}$",
            "type": "string",
            "description": "Metadata that an Entity publishes about itself (in signed JWT format), verifiable with a trusted third party (Superior Entity). It's called Entity Configuration. (<a target=\"blank\" href=\"https://github.com/it-helpers/it-wallet-helpers/blob/0.6.0/docs/schemes/jwt_well_know_openid_federation.json\">View the JSON schema</a>).",
            "format": "A digitally signed JWT",
            "example": "ewoKICAiYWxnIjogIkVTMjU2IiwKICAia2lkIjogIkZBTkZTM1luQzl0amlDYWl2aFdMVlVKM0F4d0dHel85OHVSRmFxTUVFcyIsCiAgInR5cCI6ICJlbnRpdHktc3RhdGVtZW50K2p3dCIKCn0..vnMKJBR2HB0CmWdrag6lt6aNRtN8BVvXiBoENFiqKlgXK7LFKz75WRza69Z9YhAd9yxAj2lKHlBGAulOG_IcMg"
          }
        },
        "description": "The well-known response"
      },
      "CredentialRequest": {
        "required": [
          "credential_definition",
          "format",
          "proof"
        ],
        "type": "object",
        "properties": {
          "credential_definition": {
            "$ref": "#/components/schemas/CredentialRequest_credential_definition"
          },
          "format": {
            "type": "string",
            "description": "Format of the verifiable credential type to be issued. This MUST be 'vc+sd-jwt' (selective disclosure JWT format)",
            "example": "vc+sd-jwt"
          },
          "proof": {
            "$ref": "#/components/schemas/CredentialRequest_proof"
          }
        },
        "description": "The credendential request"
      },
      "CredentialResponse": {
        "required": [
          "c_nonce",
          "c_nonce_expires_in",
          "credential",
          "format"
        ],
        "type": "object",
        "properties": {
          "format": {
            "type": "string",
            "description": "Format of the verifiable credential issued. This MUST be 'vc+sd-jwt'",
            "example": "vc+sd-jwt"
          },
          "credential": {
            "pattern": "^[A-Za-z0-9_-]{2,}(?:\\.[A-Za-z0-9_-]{2,}){2}(?:\\~[A-Za-z0-9_-]{2,})+$",
            "type": "string",
            "description": "The verifiable credential (VC) is a digitally signed JWT carrying the information about a subject in clear text and containing digests/thumbprints over the selectively disclosable claims with the Disclosures outside the document, using the format defined in <a target=\"blank\" href=\"https://datatracker.ietf.org/doc/html/draft-ietf-oauth-selective-disclosure-jwt-07\">draft-ietf-oauth-selective-disclosure-jwt-07</a> and <a target=\"blank\" href=\"https://hub.ebsi.eu/vc-framework/did/selective-disclosure-sd-jwt\">draft-selective-disclosure-sd-jwt</a>. <br/>The SD-JWT and the Disclosures are issued as a single concatenated string, with the tilde ~ serving as a separator.<br/>The first block comprises the SD-JWT, while the remainder constitutes the Disclosures. <br/><SD-JWT>~<Disclosure 1>~<Disclosure 2>~...~<Disclosure N><br/><br/>SD-JWT=<base64-url-encoded(header)>.<base64-url-encoded(payload)>.<base64-url-encoded(signature)><br/><br/>Disclosure is created as follow:<ul><li>Create a JSOM array of 3 strings:</li><ul><li>A salt value base64url encoded;</li><li>The claim name as it would be used in a regular JWT payload;</li><li>The claim value as it would be used in a regular JWT payload.</li></ul><li>base64url encoded the JSON array, producing a string. This string is the Disclosure</li></ul>The following example illustrates the steps described above.<br/>The JSON array created is: [\"pZ5MRyOxpVWZuHLoJ-yjRg\", \"tax_id_code\", \"TINIT-XXXXXXXXXXXXXXXX\"]<br/>The resulting Disclosure would be: WyJwWjVNUnlPeHBWV1p1SExvSi15alJnIiwgInRheF9pZF9jb2RlIiwgIlRJTklULVhYWFhYWFhYWFhYWFhYWFgiXQ",
            "format": "SD-JWT",
            "example": "ewogICAidHlwIjoidmMrc2Qtand0IiwKICAgImFsZyI6IkVTMjU2IiwKICAgImtpZCI6ImVOTi1nNWk2Q25MS2NsdFFCcDZhYmJpb0dNYnpNNm11VzN2dXh3NnVoODgiCn0.ewogICJfc2QiOiBbCiAgICAiTk94VnpqVUpnNjY3aUJkZUR3bXI2dFo0NlgtamNoS3dJVnhNQWZ2NDN5YyIsCiAgICAid3lmeFZxcTlCb3NQVDd0TjRTSE9JNEU0OFAxOWFWQTFrdFc1WmYwRS1mYyIsCiAgICAiVUhDaHBHdE5GMmJqMUZ2QWZCYnkxcm5mN1dYa3hlbEZKNWE0dlNqMkZPNCIsCiAgICAiVEsyUmd1UFlvWHpDeDB2djVoYk45dTVNMm1IbFdCdDQxcUdXbExYQ051OCIsCiAgICAiV0lpbFRIZ1hrcnl2TzRIZEpBVGRxb1lLM0o4V1NRQUl1akd4ZTFmYjhiRSIKICBdLAogICJleHAiOiAxODgzMDAwMDAwLAogICJpc3MiOiAiaHR0cHM6Ly9waWRwcm92aWRlci5leGFtcGxlLm9yZyIsCiAgInN1YiI6ICJOemJMc1hoOHVEQ2NkN25vV1hGWkFmSGt4WnNSR0M5WHMiLAogICJzdGF0dXMiOiB7CiAgICAic3RhdHVzX2F0dGVzdGF0aW9uIjogewogICAgICAiY3JlZGVudGlhbF9oYXNoX2FsZyI6ICJzaGEtMjU2IgogICAgfQogIH0sCiAgInZjdCI6ICJQZXJzb25JZGVudGlmaWNhdGlvbkRhdGEiLAogICJfc2RfYWxnIjogInNoYS0yNTYiLAogICJjbmYiOiB7CiAgICAiandrIjogewogICAgICAia3R5IjogIkVDIiwKICAgICAgImNydiI6ICJQLTI1NiIsCiAgICAgICJ4IjogIlRDQUVSMTladnUzT0hGNGo0VzR2ZlNWb0hJUDFJTGlsRGxzN3ZDZUdlbWMiLAogICAgICAieSI6ICJaeGppV1diWk1RR0hWV0tWUTRoYlNJaXJzVmZ1ZWNDRTZ0NGpUOUYySFpRIgogICAgfQogIH0KfQ.MrbtZznuS3fnYugwMTFRi0AMTS5rKlLvqwbRRZWeqkA8EpSnEHtTUhA4bR-QF0sInThLeLFS5C4pVf414gy1UT-IS2vx0xksnXaUnMqIaPOF8ElRPTwUYI8tXeV8LM_wsmV61TtZadHOn6YHpju-jHEtMcD80ddwzJhSq4jig-lBVH_Ud-KWIKtN60SJ1uHxFar1Jdhoi6AlHI5u3nIzbmKG6a87qN00rqtcL2LE11IhDh3yg8XqbszqEaRftLtPl833_YD5t4tO0xiU25zq_TAWt5L_5ea7JjY6k-zzo-X2GEedRDRFSfmG6Nbk4ZvZ16ildG-pjiXLS6bpPQ1nvg~WyI1N212eWNUaDV5WkNyS0xaNXhuZlV3IiwgImlhdCIsIDE2ODMwMDAwMDBd~WyJrdWNyQm1sb19oTWFJRkY1ODVSemFRIiwgInVuaXF1ZV9pZCIsICJ4eHh4eHh4eC14eHh4LXh4eHgteHh4eC14eHh4eHh4eHh4eHgiXQ~WyJOVE5Sb09pdVZWUnRGNkNFenRkOVp3IiwgImdpdmVuX25hbWUiLCAiTWFyaW8iXQ~WyJGRFNTUGdnekdCVXdRTEhEU0U2d1FRIiwgImZhbWlseV9uYW1lIiwgIlJvc3NpIl0~WyJLWjhlNXdWRXREdmIxemlTUEE0RHpBIiwgImJpcnRoX2RhdGUiLCAiMTk4MC0wMS0xMCJd~WyJwWjVNUnlPeHBWV1p1SExvSi15alJnIiwidGF4X2lkX2NvZGUiLCJSU1NNUkE4MFIwMUg1MDFCIl0"
          },
          "c_nonce": {
            "type": "string",
            "description": "String containing a nonce value to be used to create a proof of possession of key material when requesting a further Credential",
            "example": "ts_EtUQs0ieiIS1NYNBHEQSoy3ct4gpy-4FZKwHilkY"
          },
          "c_nonce_expires_in": {
            "type": "integer",
            "description": "Integer, it represents the lifetime in seconds of the c_nonce",
            "format": "int32",
            "example": 86400
          }
        },
        "description": "The credendential response"
      },
      "StatusResponse": {
        "type": "object",
        "properties": {
          "status_attestation": {
            "type": "string",
            "description": "The Issuer then returns the Status Attestation to the Wallet Instance as a signed JWT",
            "pattern": "^([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_=]+)$",
            "example": "ewogICAgImFsZyI6ICJFUzI1NiIsCiAgICAidHlwIjogInN0YXR1cy1hdHRlc3RhdGlvbitqd3QiLAogICAgImtpZCI6ICJlTk4tZzVpNkNuTEtjbHRRQnA2YWJiaW9HTWJ6TTZtdVczdnV4dzZ1aDg4Igp9.ewogICAgImlzcyI6ICJld29nSUNBZ0ltTnVaaUk2SUhzS0lDQWdJQ0FnSUNBaWFuZHJJam9nZXdvZ0lDQWdJQ0FnSUNBZ0lDQWlhM1I1SWpvZ0lrVkRJaXdLSUNBZ0lDQWdJQ0FnSUNBZ0ltTnlkaUk2SUNKUUxUSTFOaUlzQ2lBZ0lDQWdJQ0FnSUNBZ0lDSjRJam9nSWxSRFFVVlNNVGxhZG5VelQwaEdOR28wVnpSMlpsTldiMGhKVURGSlRHbHNSR3h6TjNaRFpVZGxiV01pTEFvZ0lDQWdJQ0FnSUNBZ0lDQWllU0k2SUNKYWVHcHBWMWRpV2sxUlIwaFdWMHRXVVRSb1lsTkphWEp6Vm1aMVpXTkRSVFowTkdwVU9VWXlTRnBSSWdvZ0lDQWdJQ0FnSUgwS0lDQWdJSDBLZlEiLAogICAgImlhdCI6IDE1MDQ2OTkxMzYsCiAgICAiZXhwIjogMTUwNDcwMDEzNiwKICAgICJjcmVkZW50aWFsX2hhc2giOiAiMjExZjgwNDAwZWRlYWFmNjgzYmE2NTBlODJiOWFjZTI0NmQzNDM3Mjc4YjAxZTczYjc3OTM5YjFjYTZjYzgwZCIsCiAgICAiY3JlZGVudGlhbF9oYXNoX2FsZyI6ICJzaGEtMjU2IiwKICAgICJjbmYiOiB7CiAgICAgICAgImp3ayI6IHsKICAgICAgICAgICAgImt0eSI6ICJFQyIsCiAgICAgICAgICAgICJjcnYiOiAiUC0yNTYiLAogICAgICAgICAgICAieCI6ICJUQ0FFUjE5WnZ1M09IRjRqNFc0dmZTVm9ISVAxSUxpbERsczd2Q2VHZW1jIiwKICAgICAgICAgICAgInkiOiAiWnhqaVdXYlpNUUdIVldLVlE0aGJTSWlyc1ZmdWVjQ0U2dDRqVDlGMkhaUSIKICAgICAgICB9CiAgICB9Cn0.VyT25r23eO_ppWuw0ONV6GKjJFfvYtJKQSIngGwtyklmckhE3vg5U7Cws9V41GOU6F77MVifGfXf0l2HP3mW1Q"
          }
        },
        "required": [
          "status_attestation"
        ]
      },
      "ErrorResponse": {
        "required": [
          "error"
        ],
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "The error code",
            "example": "invalid_proof"
          },
          "error_description": {
            "type": "string",
            "description": "Text in human-readable form providing further details to clarify the nature of the error encountered",
            "example": "The proof field is not present or the provided key proof is invalid or not bound to a nonce provided by the Credential Issuer."
          }
        }
      },
      "inline_response_400": {
        "required": [
          "error"
        ],
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "The error code",
            "example": "invalid_request"
          },
          "error_description": {
            "type": "string",
            "description": "Text in human-readable form providing further details to clarify the nature of the error encountered",
            "example": "The redirect_uri is not valid for the given client"
          }
        }
      },
      "inline_response_405": {
        "required": [
          "error"
        ],
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "The error code",
            "example": "method_not-allowed"
          },
          "error_description": {
            "type": "string",
            "description": "Text in human-readable form providing further details to clarify the nature of the error encountered",
            "example": "If the request did not use the POST method, the authorization server responds with an HTTP 405 (Method Not Allowed) status code"
          }
        }
      },
      "inline_response_413": {
        "required": [
          "error"
        ],
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "The error code",
            "example": "payload_too_large"
          },
          "error_description": {
            "type": "string",
            "description": "Text in human-readable form providing further details to clarify the nature of the error encountered",
            "example": "If the request size was beyond the upper bound that the authorization server allows, the authorization server responds with an HTTP 413 (Payload Too Large) status code."
          }
        }
      },
      "inline_response_429": {
        "required": [
          "error"
        ],
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "The error code",
            "example": "too_many_requests"
          },
          "error_description": {
            "type": "string",
            "description": "Text in human-readable form providing further details to clarify the nature of the error encountered",
            "example": "If the number of requests from a Wallet Instance during a particular time period exceeds the number the authorization server allows, the authorization server responds with an HTTP 429 (Too Many Requests) status code."
          }
        }
      },
      "token_body": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/TokenRequest"
          }
        ]
      },
      "inline_response_400_1": {
        "required": [
          "error"
        ],
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "The error code",
            "example": "invalid_client"
          },
          "error_description": {
            "type": "string",
            "description": "Text in human-readable form providing further details to clarify the nature of the error encountered",
            "example": "Client authentication failed"
          }
        }
      },
      "credential_body": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CredentialRequest"
          }
        ]
      },
      "inline_response_404": {
        "required": [
          "error"
        ],
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "The error code",
            "example": "federation_not_enabled"
          },
          "error_description": {
            "type": "string",
            "description": "Text in human-readable form providing further details to clarify the nature of the error encountered",
            "example": "OpenID Connect Federation 1.0 not enabled"
          }
        }
      },
      "TokenResponse_authorization_details": {
        "required": [
          "credential_configuration_id",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The authorization details type. It MUST be set to 'openid_credential'",
            "example": "openid_credential"
          },
          "credential_configuration_id": {
            "type": "string",
            "description": "The unique identifier of the authorized Verifiable Credential type",
            "example": "PersonIdentificationData"
          }
        }
      },
      "CredentialRequest_credential_definition": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "array",
            "description": "Array of one string, used to identify the verifiable credential type requested",
            "example": "[\"PersonIdentificationData\"]",
            "items": {
              "type": "string",
              "example": "PersonIdentificationData"
            }
          }
        },
        "description": "JSON object containing the verifiable credential type requested"
      },
      "CredentialRequest_proof": {
        "required": [
          "jwt",
          "proof_type"
        ],
        "type": "object",
        "properties": {
          "proof_type": {
            "type": "string",
            "description": "String denoting the proof type. It MUST be 'jwt'",
            "example": "jwt"
          },
          "jwt": {
            "type": "string",
            "description": "The base64url encoded SHA-256 thumbprint of the public key specified inside the claim 'jwt' of the JWT proof (in JWK format) the issued Credentials shall be bound to",
            "example": "eyJ0eXAiOiJvcGVuaWQ0dmNpLXByb29mK2p3dCIsImFsZyI6IkVTMjU2IiwiandrIjp7Imt0eSI6IkVDIiwiY3J2IjoiUC0yNTYiLCJ4IjoiblVXQW9BdjNYWml0aDhFN2kxOU9kYXhPTFlGT3dNLVoyRXVNMDJUaXJUNCIsInkiOiJIc2tIVThCalVpMVU5WHFpN1N3bWo4Z3dBS18weGtjRGpFV183MVNvc0VZIn19.ewogICJhdWQiOiAiaHR0cHM6Ly9pdC13YWxsZXQtZWlkLXByb3ZpZGVyLmV4YW1wbGUuaXQvY3JlZGVudGlhbCIsCiAgImlhdCI6IDE3MDU1NzAwNTUsCiAgIm5vbmNlIjogInRzX0V0VVFzMGllaUlTMU5ZTkJIRVFTb3kzY3Q0Z3B5LTRGWkt3SGlsa1kiCn0=.-a3EDsxClUB4O3LeDD5DVGEnNMT01FCQW4P6-2-BNBqc_Zxf0Qw4CWayLEpqkAomlkLb9zioZoipdP-jvh1WlA"
          }
        },
        "description": "JSON object containing a reference to the public key specified inside the JWT proof (in JWK format) the issued Credentials shall be bound to"
      },
      "assertionConsumerRequest": {
        "required": [
          "SAMLResponse", "relayState", "Signature", "SigAlg"
        ],
        "type": "object",
        "properties": {
          "SAMLResponse": {
            "type": "string",
            "description": "The SAMLResponse base64-url-encoded",
            "example": "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBYSFRNTCAxLjEvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIveGh0bWwxMS9EVEQveGh0bWwxMS5kdGQiPgo8aHRtbCB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCIgeG1sOmxhbmc9ImVuIj4KPGJvZHkgb25sb2FkPSJkb2N1bWVudC5mb3Jtc1swXS5zdWJtaXQoKSI-Cjxub3NjcmlwdD4KPHA-CjxzdHJvbmc-Tm90ZTo8L3N0cm9uZz4gU2luY2UgeW91ciBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgSmF2YVNjcmlwdCwgeW91IG11c3QgcHJlc3MgdGhlIENvbnRpbnVlIGJ1dHRvbiBvbmNlIHRvIHByb2NlZWQuCjwvcD4KPC9ub3NjcmlwdD4KPGZvcm0gYWN0aW9uPSJodHRwczovL2lkcC5leGFtcGxlLm9yZy9zYW1sMi1zc28iIG1ldGhvZD0icG9zdCI-PGRpdj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJSZWxheVN0YXRlIiB2YWx1ZT0iMDA0M2JmYzFiYzQ1MTEwZGFlMTcwMDQwMDViMTNhMmIiLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJTQU1MUmVzcG9uc2UiIHZhbHVlPSJQSE5oYld4d09reHZaMjkxZEZKbGNYVmxjM1FnZUcxc2JuTTZjMkZ0YkhBOUluVnlianB2WVhOcGN6cHVZVzFsY3pwMFl6cFRRVTFNT2pJdU1EcHdjbTkwYjJOdmJDSWdlRzFzYm5NOUluVnlianB2WVhOcGN6cHVZVzFsY3pwMFl6cFRRVTFNT2pJdU1EcGhjM05sY25ScGIyNGlDaUFnSUNCSlJEMGlaREppTjJNek9EaGpaV016Tm1aaE4yTXpPV015T0daa01qazROalEwWVRnaUlFbHpjM1ZsU1c1emRHRnVkRDBpTWpBd05DMHdNUzB5TVZReE9Ub3dNRG8wT1ZvaUlGWmxjbk5wYjI0OUlqSXVNQ0krQ2lBZ0lDQThTWE56ZFdWeVBtaDBkSEJ6T2k4dlNXUmxiblJwZEhsUWNtOTJhV1JsY2k1amIyMHZVMEZOVER3dlNYTnpkV1Z5UGdvZ0lDQWdQRTVoYldWSlJDQkdiM0p0WVhROUluVnlianB2WVhOcGN6cHVZVzFsY3pwMFl6cFRRVTFNT2pJdU1EcHVZVzFsYVdRdFptOXliV0YwT25CbGNuTnBjM1JsYm5RaVBqQXdOV0V3Tm1Vd0xXRmtPREl0TVRFd1pDMWhOVFUyTFRBd05EQXdOV0l4TTJFeVlqd3ZUbUZ0WlVsRVBnb2dJQ0FnUEhOaGJXeHdPbE5sYzNOcGIyNUpibVJsZUQ0eFBDOXpZVzFzY0RwVFpYTnphVzl1U1c1a1pYZytDand2YzJGdGJIQTZURzluYjNWMFVtVnhkV1Z6ZEQ0SyIvPgo8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJTaWduYXR1cmUiIHZhbHVlPSJEQ0RxQXdJRHFTd3lYR3ZHMmNZdk5qbWo3UDFrdDAra2JDZlJqcTlnR1RyTjRLS1B4dlFsNUVzRnJXUmtNT2R4eHV3UGxkV1BLdmZnWDZydCtwS3dMZ0N0MVRxUmorNzF5K1ZkR1M4T1JzQmVFSVVSUm45d1N1K3BLc1dpSGV4d0tuSWU2NWJqT05iZzJkYjQ0UU9XWmxEZTc2ZkxpMDVQc3kvN0haVFF1TW9EUkZZU1IvL1Z5TkdIUW1mOVN4aTZta21yWU1YUE95WkFVZk5oWDRlTGFYRmZ3Q0h0MHlSckVjbS9QQUVERGE3dXFlOFVvNWlsc3RnWERXRG9kV2RrU3prOFpTMWlyakZrdnR4SDdGSmxtOUFEdGxXL1NvWDkyakdqTUlyZFF3Q3lBckk2bzhLVGlEcC9jakRqSFpHaVhMeDJXdlM3R0VpYkE3UWQrNWhTQlE9PSIvPgo8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJTaWdBbGciIHZhbHVlPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjcnNhLXNoYTEiLz4KPC9kaXY-Cjxub3NjcmlwdD4KPGRpdj4KPGlucHV0IHR5cGU9InN1Ym1pdCIgdmFsdWU9IkNvbnRpbnVlIi8-CjwvZGl2Pgo8L25vc2NyaXB0Pgo8L2Zvcm0-CjwvYm9keT4KPC9odG1sPg"
          },
          "relayState": {
            "type": "string",
            "description": "The unique login request identifier previously received from the client",
            "example": "0043bfc1bc45110dae17004005b13a2b"
          }
        },
        "description": "The Assertion consumer Request"
      }
  }
  }
}