{
  "openapi": "3.0.2",
  "info": {
    "title": "IT Wallet API",
    "version": "0.6.0",
    "description": "API for the Italian EUDI Wallet implementation profile (version: '0.6.0')  <a target=\"blank\" href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/\">https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/</a>"
  },
  "servers": [
    {
      "url": "https://api.server.test/it-wallet-api/v0.6.0",
      "description": "Main (production) server"
    }
  ],
  "paths": {
    "/as/par": {
      "post": {
        "summary": "Starts authorization flow for the Wallet",
        "tags": [
          "Credential Issuance Flow"
        ],
        "operationId": "parRequest",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ParRequest"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The error code",
                      "example": "invalid_request"
                    },
                    "error_description": {
                      "type": "string",
                      "description": "Text in human-readable form providing further details to clarify the nature of the error encountered",
                      "example": "The redirect_uri is not valid for the given client"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The error code",
                      "example": "method_not-allowed"
                    },
                    "error_description": {
                      "type": "string",
                      "description": "Text in human-readable form providing further details to clarify the nature of the error encountered",
                      "example": "If the request did not use the POST method, the authorization server responds with an HTTP 405 (Method Not Allowed) status code"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The error code",
                      "example": "payload_too_large"
                    },
                    "error_description": {
                      "type": "string",
                      "description": "Text in human-readable form providing further details to clarify the nature of the error encountered",
                      "example": "If the request size was beyond the upper bound that the authorization server allows, the authorization server responds with an HTTP 413 (Payload Too Large) status code."
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The error code",
                      "example": "too_many_requests"
                    },
                    "error_description": {
                      "type": "string",
                      "description": "Text in human-readable form providing further details to clarify the nature of the error encountered",
                      "example": "If the number of requests from a client during a particular time period exceeds the number the authorization server allows, the authorization server responds with an HTTP 429 (Too Many Requests) status code."
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "Unexpected error."
          }
        }
      }
    },
    "/authorize": {
      "get": {
        "summary": "Issuing authorization code to the Wallet",
        "tags": [
          "Credential Issuance Flow"
        ],
        "operationId": "authorize",
        "parameters": [
          {
            "name": "jwt_user",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_=]+)$"
            },
            "description": "A signed JWT that includes claims regarding the authentication of the user by a Service Provider (SP) or a Relay Party (RP) (<a target=\"blank\" href=\"https://github.com/it-helpers/it-wallet-helpers/blob/0.6.0/docs/schema/jwt_wte.json\">View the JSON schema</a>)"
          },
          {
            "name": "state",
            "in": "cookie",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "It MUST be set to the same value of the 'state' parameter in the PAR Request, in URL-encoded format",
            "example": "fyZiOL9Lf2CeKuNT2JzxiLRDink0uPcd"
          },
          {
            "name": "client_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "It MUST be set to the same value in the PAR Request, in URL-encoded format",
            "allowEmptyValue": true,
            "example": "$thumprint-of-the-jwk-in-the-cnf-wallet-attestation$"
          },
          {
            "name": "request_uri",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "It MUST be set to the same value as obtained by PAR Response, in URL-encoded format",
            "allowEmptyValue": true,
            "example": "urn%3ietf%3params%3oauth%3request_uri%3bwc4JK-ESC0w8acc191e-Y1LTC2"
          },
          {
            "name": "idphint",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The identifier of the hinted Identity Provider ID, in URL-encoded format",
            "allowEmptyValue": true,
            "example": "https%3A%2F%2Fidp.example.org"
          }
        ],
        "responses": {
          "302": {
            "description": "Found",
            "headers": {
              "Location": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "The Location response header indicates the URL to redirect the Wallet Instance to. This URL present in query string the authorization code generated by the authorization server (parameter 'code') and the same 'state' and 'iss' parameters were present in the PAR Request.     If the request fails due to a missing, invalid, or mismatching redirection URI, or if the client  identifier is missing or invalid, the authorization server MUST NOT automatically redirect the  user-agent to the invalid redirection URI. If the authorization server denies the access request or  if the request fails for reasons other than a missing or invalid redirection URI, the authorization  server informs the client by adding the error parameter (in URL-encoded format) and  the error_description parameter (in URL-encoded format) to the query component of the redirection URI  ([RFC 6749#section-4.1.2.1] https://datatracker.ietf.org/doc/html/rfc6749.html#section-4.1.2.1)",
                "examples": {
                  "302_After_Authentication_Flow": {
                    "description": "Redirect URI at the end of the authentication flow",
                    "value": "https://start.wallet.example.org?code=SplxlOBeZQQYbYS6WxSbIA&state=fyZiOL9Lf2CeKuNT2JzxiLRDink0uPcd&iss=https%3A%2F%2Fpid-provider.example.org"
                  },
                  "302_Authentication_Request_Invalid": {
                    "description": "Redirect URI in  the end of the authentication flow",
                    "value": "https://start.wallet.example.org?error=server_error&error_description=The%20authorization%20server%20encountered%20an%20unexpected%20condition%20that%20prevented%20it%20from%20fulfilling%20the%20request%20response_type%20value&state=fyZiOL9Lf2CeKuNT2JzxiLRDink0uPcd&iss=https%3A%2F%2Fpid-provider.example.org"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/token": {
      "post": {
        "summary": "Issuing access token to the Wallet",
        "tags": [
          "Credential Issuance Flow"
        ],
        "operationId": "tokenRequest",
        "parameters": [
          {
            "in": "header",
            "name": "DPoP",
            "schema": {
              "type": "string",
              "description": "The DPoP Proof JWT for the Token Endpoint, in signed JWT format (<a target=\"blank\" href=\"https://github.com/it-helpers/it-wallet-helpers/blob/0.6.0/docs/schema/jwt_dpop_token_endpoint.json\">View the JSON schema</a>)",
              "pattern": "^([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_=]+)$"
            },
            "example": "eyJ0eXAiOiJkcG9wK2p3dCIsImFsZyI6IkVTMjU2IiwiandrIjp7Imt0eSI6IkVDIiwieCI6IjM1bHZDOHV6MlFyV3BRSjNUVUg4dDlvOURVUk1wN3lkVTUxOFJLRGwyMGsiLCJ5IjoiSThCdVhCMmJ2eGVsekpBZDdPS2hkLVp3akNzdDA1Rng0N01iXzB1Z3JvcyIsImNydiI6IlAtMjU2In19.eyJqdGkiOiJlMWozVl9iS2ljOC1MQUVBIiwiaHRtIjoiUE9TVCIsImh0dSI6Imh0dHBzOi8vaXQtd2FsbGV0LWVpZC1wcm92aWRlci5leGFtcGxlLml0L3Rva2VuIiwiaWF0IjoxNzEwMzQ2MzQzfQ.mIDdPx1KjBnitErOYJjvzr5EYjl8dRQlzAT30e0mhk8NZZCwAMfktzcyb1_IuEywi_VMbrWTp1gFOAxJv_uaJQ"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TokenRequest"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The error code",
                      "example": "invalid_client"
                    },
                    "error_description": {
                      "type": "string",
                      "description": "Text in human-readable form providing further details to clarify the nature of the error encountered",
                      "example": "Client authentication failed"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "Unexpected error."
          }
        }
      }
    },
    "/credential": {
      "post": {
        "summary": "Issuing eID Credential to the Wallet",
        "operationId": "credentialRequest",
        "tags": [
          "Credential Issuance Flow"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "DPoP",
            "schema": {
              "type": "string",
              "description": "The DPoP Proof for the Credential Endpoint, in signed JWT format (<a target=\"blank\" href=\"https://github.com/it-helpers/it-wallet-helpers/blob/0.6.0/docs/schema/jwt_dpop_credential_endpoint.json\">View the JSON schema</a>)",
              "pattern": "^([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_=]+)$"
            },
            "example": "eyJ0eXAiOiJkcG9wK2p3dCIsImFsZyI6IkVTMjU2IiwiandrIjp7Imt0eSI6IkVDIiwieCI6IjM1bHZDOHV6MlFyV3BRSjNUVUg4dDlvOURVUk1wN3lkVTUxOFJLRGwyMGsiLCJ5IjoiSThCdVhCMmJ2eGVsekpBZDdPS2hkLVp3akNzdDA1Rng0N01iXzB1Z3JvcyIsImNydiI6IlAtMjU2In19.eyJqdGkiOiJlMWozVl9iS2ljOC1MQUVCIiwiaHRtIjoiUE9TVCIsImh0dSI6Imh0dHBzOi8vaXQtd2FsbGV0LWVpZC1wcm92aWRlci5leGFtcGxlLml0L2NyZWRlbnRpYWwiLCJpYXQiOjE3MTAzNDYzNDMsImF0aCI6ImZVSHlPMnIyWjNEWjUzRXNOcldCYjB4V1hvYU55NTlJaUtDQXFrc21RRW8ifQ.vnMKJBR2HB0CmWdrag6lt6aNRtN8BVvXiBoENFiqKlgXK7LFKz75WRza69Z9YhAd9yxAj2lKHlBGAulOG_IcMg"
          },
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string",
              "description": "The DPoP-bound Access Token, in signed JWT format(<a target=\"blank\" href=\"https://github.com/it-helpers/it-wallet-helpers/blob/0.6.0/docs/schema/jwt_dpop_bound_access_token.json\">View the JSON schema</a>)",
              "pattern": "^([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_=]+)$"
            },
            "example": "DPoP eyJ0eXAiOiJkcG9wK2p3dCIsImFsZyI6IkVTMjU2Iiwia2lkIjoiY3o2dXM2cHdsYmswYTNxNnNjZHc4M3gifQ.eyJqdGkiOiItQndDM0VTYzZhY2MybFRjIiwiaXNzIjoiaHR0cHM6Ly9pdC13YWxsZXQtZWlkLXByb3ZpZGVyLmV4YW1wbGUuaXQvdG9rZW4iLCJzdWIiOiJOemJMc1hoOHVEQ2NkN25vV1hGWkFmSGt4WnNSR0M5WHMiLCJhdWQiOiJodHRwczovL2l0LXdhbGxldC1laWQtcHJvdmlkZXIuZXhhbXBsZS5pdC9jcmVkZW50aWFsIiwiaWF0IjoxNzExNDAzNDMyLCJleHAiOjE3MTE0MDQwMzIsImprdCI6ImtRTVUxM05ydmljMkQ5SUdwMnQtUGhMZmlIR0VGRzVST0VJSWV5dWU3Tk0ifQ.9qrEiuuKa490FT3JyJy9hqnjopVkZM98q59blR0Q24NdTE2VVTDQIvjoJE3thYLN8Vqe_dI2-I1V31wK_W_JQQ"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CredentialRequest"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "5XX": {
            "description": "Unexpected error."
          }
        }
      }
    },
    "/.well-know/openid-federation": {
      "get": {
        "summary": "Retrieve Entity Configuration of eID Provider.",
        "tags": [
          "Credential Issuance Flow"
        ],
        "operationId": "federationEntityConfigurationRequest",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/entity-statement+jwt": {
                "schema": {
                  "type": "string",
                  "description": "Metadata that an Entity publishes about itself, verifiable with a trusted third party (Superior Entity). It's called Entity Configuration. (<a target=\"blank\" href=\"https://github.com/it-helpers/it-wallet-helpers/blob/0.6.0/docs/schema/jwt_entity-configuration_eid_provider.json\">View the JSON schema</a>).",
                  "pattern": "^([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_=]+)$",
                  "example": "eyJhbGciOiJFUzI1NiIsImtpZCI6IkZBTkZTM1luQzl0amlDYWl2aFdMVlVKM0F4d0dHel85OHVSRmFxTUVFcyIsInR5cCI6ImVudGl0eS1zdGF0ZW1lbnQrand0In0.eyJleHAiOiIxNjQ5NjEwMjQ5IiwiaWF0IjoiMTY0OTQzNzQ0OSIsImlzcyI6Imh0dHBzOi8vaXQtd2FsbGV0LWVpZC1wcm92aWRlci5leGFtcGxlLml0Iiwic3ViIjoiaHR0cHM6Ly9pdC13YWxsZXQtZWlkLXByb3ZpZGVyLmV4YW1wbGUuaXQiLCJqd2tzIjp7ImtleXMiOlt7Imt0eSI6IlJTQSIsInVzZSI6InNpZyIsIm4iOiIxVGEtc0UgLi4uIiwiZSI6IkFRQUIiLCJraWQiOiJGQU5GUzNZbkM5dGppQ2FpdmhXTFZVSjNBeHdHR3pfOTh1UkZhcU1FRXMifV19LCJhdXRob3JpdHlfaGludHMiOlsiaHR0cHM6Ly9zdXBlcmlvci1lbnRpdHkuZXhhbXBsZS5vcmcvZmVkZXJhdGlvbiJdLCJtZXRhZGF0YSI6eyJmZWRlcmF0aW9uX2VudGl0eSI6eyJvcmdhbml6YXRpb25fbmFtZSI6IlBJRCBQcm92aWRlciBPcmdhbml6YXRpb24gRXhhbXBsZSIsImhvbWVwYWdlX3VyaSI6Imh0dHBzOi8vaXQtd2FsbGV0LWVpZC1wcm92aWRlci5leGFtcGxlLml0IiwicG9saWN5X3VyaSI6Imh0dHBzOi8vaXQtd2FsbGV0LWVpZC1wcm92aWRlci5leGFtcGxlLml0L3ByaXZhY3lfcG9saWN5IiwidG9zX3VyaSI6Imh0dHBzOi8vaXQtd2FsbGV0LWVpZC1wcm92aWRlci5leGFtcGxlLml0L2luZm9fcG9saWN5IiwibG9nb191cmkiOiJodHRwczovL2l0LXdhbGxldC1laWQtcHJvdmlkZXIuZXhhbXBsZS5pdC9sb2dvLnN2ZyIsImNvbnRhY3RzIjpbIm9wc0BwaWQtcHJvdmlkZXIuZXhhbXBsZS5vcmciXSwiZmVkZXJhdGlvbl9yZXNvbHZlX2VuZHBvaW50IjoiaHR0cHM6Ly9pdC13YWxsZXQtZWlkLXByb3ZpZGVyLmV4YW1wbGUuaXQvcmVzb2x2ZSJ9LCJvYXV0aF9hdXRob3JpemF0aW9uX3NlcnZlciI6eyJhdXRob3JpemF0aW9uX2VuZHBvaW50IjoiaHR0cHM6Ly9pdC13YWxsZXQtZWlkLXByb3ZpZGVyLmV4YW1wbGUuaXQvYXV0aG9yaXphdGlvbiIsInB1c2hlZF9hdXRob3JpemF0aW9uX3JlcXVlc3RfZW5kcG9pbnQiOiJodHRwczovL2l0LXdhbGxldC1laWQtcHJvdmlkZXIuZXhhbXBsZS5pdC9hcy9wYXIiLCJkcG9wX3NpZ25pbmdfYWxnX3ZhbHVlc19zdXBwb3J0ZWQiOlsiRVMyNTYiLCJFUzUxMiJdLCJ0b2tlbl9lbmRwb2ludCI6Imh0dHBzOi8vaXQtd2FsbGV0LWVpZC1wcm92aWRlci5leGFtcGxlLml0L3Rva2VuIiwiY2xpZW50X3JlZ2lzdHJhdGlvbl90eXBlc19zdXBwb3J0ZWQiOlsiYXV0b21hdGljIl0sImNvZGVfY2hhbGxlbmdlX21ldGhvZHNfc3VwcG9ydGVkIjpbIlMyNTYiXSwiYXV0aG9yaXphdGlvbl9kZXRhaWxzX3R5cGVzX3N1cHBvcnRlZCI6WyJvcGVuaWRfY3JlZGVudGlhbCJdLCJhY3JfdmFsdWVzX3N1cHBvcnRlZCI6WyJodHRwczovL3d3dy5zcGlkLmdvdi5pdC9TcGlkTDIiLCJodHRwczovL3d3dy5zcGlkLmdvdi5pdC9TcGlkTDMiXSwiZ3JhbnRfdHlwZXNfc3VwcG9ydGVkIjpbImF1dGhvcml6YXRpb25fY29kZSJdLCJpc3N1ZXIiOiJodHRwczovL2l0LXdhbGxldC1laWQtcHJvdmlkZXIuZXhhbXBsZS5pdCIsImp3a3MiOnsia2V5cyI6W3sia3R5IjoiRUMiLCJraWQiOiJGQU5GUzNZbkM5dGppQ2FpdmhXTFZVSjNBeHdHR3pfOTh1UkZhcU1FRXMifV19LCJzY29wZXNfc3VwcG9ydGVkIjpbIlBlcnNvbklkZW50aWZpY2F0aW9uRGF0YSJdLCJyZXF1ZXN0X3BhcmFtZXRlcl9zdXBwb3J0ZWQiOnRydWUsInJlcXVlc3RfdXJpX3BhcmFtZXRlcl9zdXBwb3J0ZWQiOmZhbHNlLCJyZXNwb25zZV90eXBlc19zdXBwb3J0ZWQiOlsiY29kZSJdLCJzdWJqZWN0X3R5cGVzX3N1cHBvcnRlZCI6WyJwYWlyd2lzZSJdLCJ0b2tlbl9lbmRwb2ludF9hdXRoX21ldGhvZHNfc3VwcG9ydGVkIjpbImF0dGVzdF9qd3RfY2xpZW50X2F1dGgiXSwidG9rZW5fZW5kcG9pbnRfYXV0aF9zaWduaW5nX2FsZ192YWx1ZXNfc3VwcG9ydGVkIjpbIkVTMjU2IiwiRVMzODQiLCJFUzUxMiJdLCJyZXF1ZXN0X29iamVjdF9zaWduaW5nX2FsZ192YWx1ZXNfc3VwcG9ydGVkIjpbIkVTMjU2IiwiRVMzODQiLCJFUzUxMiJdfSwib3BlbmlkX2NyZWRlbnRpYWxfaXNzdWVyIjp7ImNyZWRlbnRpYWxfaXNzdWVyIjoiaHR0cHM6Ly9pdC13YWxsZXQtZWlkLXByb3ZpZGVyLmV4YW1wbGUuaXQiLCJjcmVkZW50aWFsX2VuZHBvaW50IjoiaHR0cHM6Ly9pdC13YWxsZXQtZWlkLXByb3ZpZGVyLmV4YW1wbGUuaXQvY3JlZGVudGlhbCIsInJldm9jYXRpb25fZW5kcG9pbnQiOiJodHRwczovL2l0LXdhbGxldC1laWQtcHJvdmlkZXIuZXhhbXBsZS5pdC9yZXZva2UiLCJzdGF0dXNfYXR0ZXN0YXRpb25fZW5kcG9pbnQiOiJodHRwczovL2l0LXdhbGxldC1laWQtcHJvdmlkZXIuZXhhbXBsZS5pdC9zdGF0dXMiLCJkaXNwbGF5IjpbeyJuYW1lIjoiUElEIFByb3ZpZGVyIEl0YWxpYW5vIGRpIGVzZW1waW8iLCJsb2NhbGUiOiJpdC1JVCJ9LHsibmFtZSI6IkV4YW1wbGUgUElEIFByb3ZpZGVyIiwibG9jYWxlIjoiZW4tVVMiLCJsb2dvIjp7InVybCI6Imh0dHBzOi8vaXQtd2FsbGV0LWVpZC1wcm92aWRlci5leGFtcGxlLml0L3B1YmxpYy9sb2dvLnN2ZyIsImFsdF90ZXh0IjoibG9nbyBkaSBxdWVzdG8gUElEIFByb3ZpZGVyIn19XSwiandrcyI6eyJrZXlzIjpbeyJjcnYiOiJQLTI1NiIsImt0eSI6IkVDIiwieCI6Im5ld0s1cURZTWVrckNQUE8teUVZVGRKVldKTVR6YXNNYXZ0MnZtMU1iLUEiLCJ5IjoiVml6WGFMTzZkemVlc1pQeGZwR1phYlRLM2NUWHRCVWJJaVFwbWlZUnRTRSIsImtpZCI6ImZmMGJkZWQwNDVmZTYzZmU1ZDFkNjRkZDgzYjU2N2UwIn1dfSwiY3JlZGVudGlhbF9jb25maWd1cmF0aW9uc19zdXBwb3J0ZWQiOlt7ImZvcm1hdCI6InZjK3NkLWp3dCIsImNyeXB0b2dyYXBoaWNfYmluZGluZ19tZXRob2RzX3N1cHBvcnRlZCI6WyJqd2siXSwiY3JlZGVudGlhbF9zaWduaW5nX2FsZ192YWx1ZXNfc3VwcG9ydGVkIjpbIkVTMjU2IiwiRVMzODQiLCJFUzUxMiJdLCJwcm9vZl90eXBlc19zdXBwb3J0ZWQiOnsiand0Ijp7InByb29mX3NpZ25pbmdfYWxnX3ZhbHVlc19zdXBwb3J0ZWQiOlsiRVMyNTYiXX19LCJkaXNwbGF5IjpbeyJuYW1lIjoiUElEIEl0YWxpYW5vIGRpIGVzZW1waW8iLCJsb2NhbGUiOiJpdC1JVCIsImxvZ28iOnsidXJsIjoiaHR0cHM6Ly9pdC13YWxsZXQtZWlkLXByb3ZpZGVyLmV4YW1wbGUuaXQvcHVibGljL2xvZ28uc3ZnIiwiYWx0X3RleHQiOiJsb2dvIGRpIHF1ZXN0YSBDcmVkZW56aWFsZSJ9LCJiYWNrZ3JvdW5kX2NvbG9yIjoiIzEyMTA3YyIsInRleHRfY29sb3IiOiIjRkZGRkZGIn0seyJuYW1lIjoiRXhhbXBsZSBJdGFsaWFuIFBJRCIsImxvY2FsZSI6ImVuLVVTIiwibG9nbyI6eyJ1cmwiOiJodHRwczovL2l0LXdhbGxldC1laWQtcHJvdmlkZXIuZXhhbXBsZS5pdC9wdWJsaWMvbG9nby5zdmciLCJhbHRfdGV4dCI6IlRoZSBsb2dvIG9mIHRoaXMgY3JlZGVudGlhbCJ9LCJiYWNrZ3JvdW5kX2NvbG9yIjoiIzEyMTA3YyIsInRleHRfY29sb3IiOiIjRkZGRkZGIn1dLCJjcmVkZW50aWFsX2RlZmluaXRpb24iOnsidHlwZSI6WyJQZXJzb25JZGVudGlmaWNhdGlvbkRhdGEiXSwidmVyaWZpY2F0aW9uIjp7InRydXN0X2ZyYW1ld29yayI6ImVpZGFzIiwiYXNzdXJhbmNlX2xldmVsIjoiaGlnaCIsImV2aWRlbmNlIjpbeyJ0eXBlIjoiZWxlY3Ryb25pY19yZWNvcmQiLCJyZWNvcmQiOnsidHlwZSI6Imh0dHBzOi8vZXVkaS53YWxsZXQuY2llLmdvdi5pdCIsInNvdXJjZSI6eyJvcmdhbml6YXRpb25fbmFtZSI6Ik1pbmlzdGVybyBkZWxsJ0ludGVybm8iLCJvcmdhbml6YXRpb25faWQiOiJ1cm46ZXVkaTppdDpvcmdhbml6YXRpb25faWQ6aXBhX2NvZGU6bV9pdCIsImNvdW50cnlfY29kZSI6IklUIn19fV19LCJjcmVkZW50aWFsU3ViamVjdCI6eyJnaXZlbl9uYW1lIjp7Im1hbmRhdG9yeSI6dHJ1ZSwiZGlzcGxheSI6W3sibmFtZSI6IkN1cnJlbnQgRmlyc3QgTmFtZSIsImxvY2FsZSI6ImVuLVVTIn0seyJuYW1lIjoiTm9tZSIsImxvY2FsZSI6Iml0LUlUIn1dfSwiZmFtaWx5X25hbWUiOnsibWFuZGF0b3J5Ijp0cnVlLCJkaXNwbGF5IjpbeyJuYW1lIjoiQ3VycmVudCBGYW1pbHkgTmFtZSIsImxvY2FsZSI6ImVuLVVTIn0seyJuYW1lIjoiQ29nbm9tZSIsImxvY2FsZSI6Iml0LUlUIn1dfSwiYmlydGhfZGF0ZSI6eyJtYW5kYXRvcnkiOnRydWUsImRpc3BsYXkiOlt7Im5hbWUiOiJEYXRlIG9mIEJpcnRoIiwibG9jYWxlIjoiZW4tVVMifSx7Im5hbWUiOiJEYXRhIGRpIE5hc2NpdGEiLCJsb2NhbGUiOiJpdC1JVCJ9XX0sInVuaXF1ZV9pZCI6eyJtYW5kYXRvcnkiOnRydWUsImRpc3BsYXkiOlt7Im5hbWUiOiJVbmlxdWUgSWRlbnRpZmllciIsImxvY2FsZSI6ImVuLVVTIn0seyJuYW1lIjoiSWRlbnRpZmljYXRpdm8gdW5pdm9jbyIsImxvY2FsZSI6Iml0LUlUIn1dfSwidGF4X2lkX2NvZGUiOnsibWFuZGF0b3J5Ijp0cnVlLCJkaXNwbGF5IjpbeyJuYW1lIjoiVGF4IElkIE51bWJlciIsImxvY2FsZSI6ImVuLVVTIn0seyJuYW1lIjoiQ29kaWNlIEZpc2NhbGUiLCJsb2NhbGUiOiJpdC1JVCJ9XX19fX1dfX19.h-VsgOMMpnwTZNHcm5e_amXhBvqH4teRfh5CUT3WbRJb2fRIgQU6yBiGaZXFkcR1dYodQNqy3Ds4Hu15Yn6ZWg"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The error code",
                      "example": "federation_not_enabled"
                    },
                    "error_description": {
                      "type": "string",
                      "description": "Text in human-readable form providing further details to clarify the nature of the error encountered",
                      "example": "OpenID Connect Federation 1.0 not enabled"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "Unexpected error."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ParRequest": {
        "type": "object",
        "properties": {
          "response_type": {
            "type": "string",
            "description": "MUST be set to 'code'",
            "example": "code"
          },
          "client_id": {
            "type": "string",
            "description": "MUST be set to the thumbprint of the jwk value in the cnf parameter inside the Wallet Attestation JWT",
            "example": "$thumprint-of-the-jwk-in-the-cnf-wallet-attestation$"
          },
          "code_challenge": {
            "type": "string",
            "description": "A challenge derived from the code verifier that is sent in the authorization request",
            "example": "E9Melhoa2OwvFrEMTJguCHaoeK1t8URWbuGJSstw-cM"
          },
          "code_challenge_method": {
            "type": "string",
            "description": "A method that was used to derive code challenge. It MUST be set to 'S256'",
            "example": "S256"
          },
          "request": {
            "type": "string",
            "description": "It MUST be a signed JWT (<a target=\"blank\" href=\"https://github.com/it-helpers/it-wallet-helpers/blob/0.6.0/docs/schema/jwt_request_object.json\">View the JSON schema</a>). The private key corresponding to the public one in the cnf parameter inside the Wallet Attestation JWT MUST be used for signing the Request Object",
            "pattern": "^([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_=]+)$",
            "example": "$SIGNED-JWT"
          },
          "client_assertion_type": {
            "type": "string",
            "description": "It MUST be set to 'urn:ietf:params:oauth:client-assertion-type:jwt-client-attestation'",
            "example": "urn:ietf:params:oauth:client-assertion-type:jwt-client-attestation"
          },
          "client_assertion": {
            "type": "string",
            "description": "It MUST be set to a value containing the Wallet Attestation JWT (<a target=\"blank\" href=\"https://github.com/it-helpers/it-wallet-helpers/blob/0.6.0/docs/schema/jwt_wte.json\">View the JSON schema</a>) and the Proof of Possession (<a target=\"blank\" href=\"https://github.com/it-helpers/it-wallet-helpers/blob/0.6.0/docs/schema/jwt_wte_proof.json\">View the JSON schema</a>), separated with the ~ character",
            "example": "$WIA~WIA-PoP"
          }
        },
        "required": [
          "response_type",
          "client_id",
          "code_challenge",
          "code_challenge_method",
          "request",
          "client_assertion_type",
          "client_assertion"
        ]
      },
      "ParResponse": {
        "type": "object",
        "properties": {
          "request_uri": {
            "type": "string",
            "description": "The request URI corresponding to the authorization request posted. This URI MUST be a single-use reference to the respective authorization request. It MUST contain some part generated using a cryptographically strong pseudorandom algorithm. The value format MUST be urn:ietf:params:oauth:request_uri:<reference-value> with <reference-value> as the random part of the URI that references the respective authorization request data",
            "example": "urn:ietf:params:oauth:request_uri:bwc4JK-ESC0w8acc191e-Y1LTC2"
          },
          "expires_in": {
            "type": "integer",
            "format": "int32",
            "description": "Integer, it represents the lifetime in seconds of the request URI",
            "example": 60
          }
        },
        "required": [
          "request_uri",
          "expires_in"
        ]
      },
      "TokenRequest": {
        "type": "object",
        "properties": {
          "grant_type": {
            "type": "string",
            "description": "MUST be set to 'authorization_code'",
            "example": "authorization_code"
          },
          "code": {
            "type": "string",
            "description": "The authorization code returned in the Authorization Response",
            "example": "SplxlOBeZQQYbYS6WxSbIA"
          },
          "redirect_uri": {
            "type": "string",
            "description": "It MUST be set as the Request Objectredirect_uri claim of the PAR Request",
            "example": "https://start.wallet.example.org/cb"
          },
          "code_verifier": {
            "type": "string",
            "description": "Verification code of the code_challenge of the PAR Request",
            "example": "dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk"
          },
          "client_assertion_type": {
            "type": "string",
            "description": "It MUST be set to 'urn:ietf:params:oauth:client-assertion-type:jwt-client-attestation'",
            "example": "urn:ietf:params:oauth:client-assertion-type:jwt-client-attestation"
          },
          "client_assertion": {
            "type": "string",
            "description": "It MUST be set to a value containing the Wallet Attestation JWT and the Proof of Possession, separated with the ~ character",
            "example": "$WIA~WIA-PoP"
          }
        },
        "required": [
          "grant_type",
          "code",
          "redirect_uri",
          "code_verifier",
          "c_nonce_expires_in",
          "client_assertion_type",
          "client_assertion"
        ]
      },
      "TokenResponse": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "The DPoP-bound Access Token, in signed JWT format, allows accessing the PID/(Q)EAA Credential Endpoint for obtaining Credentials specified in the PAR Request",
            "pattern": "^([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_=]+)$",
            "example": "eyJhbGciOiJFUzI1NiJ9.eyJzdWIiOiJzdWJfcGFpcndpc2UiLCJhdWQiOiJodHRwczovL3VhdC5ldWRpLXdhbGxldC1pdC1xZWFhLWlzc3Vlci5kZW1vLmlwenMuaXQvdG9rZW4iLCJqa3QiOiJrUU1VMTNOcnZpYzJEOUlHcDJ0LVBoTGZpSEdFRkc1Uk9FSUlleXVlN05NIiwiZXhwIjoxNzA1NTczNjU1LCJpYXQiOjE3MDU1NzAwNTUsIm5vbmNlIjoidHNfRXRVUXMwaWVpSVMxTllOQkhFUVNveTNjdDRncHktNEZaS3dIaWxrWSIsImp0aSI6ImY4NTU1Y2ViLWM2NWMtNDAyNS05Mzc4LWI2NjcyYjYxNDlhZiIsImNsaWVudF9pZCI6Imh0dHBzOi8vdWF0LmV1ZGktd2FsbGV0LWl0LXFlYWEtaXNzdWVyLmRlbW8uaXB6cy5pdC90b2tlbiJ9.VyT25r23eO_ppWuw0ONV6GKjJFfvYtJKQSIngGwtyklmckhE3vg5U7Cws9V41GOU6F77MVifGfXf0l2HP3mW1Q"
          },
          "token_type": {
            "type": "string",
            "description": "Type of Access Token returned. It MUST be equal to 'DPoP'",
            "example": "DPoP"
          },
          "expires_in": {
            "type": "integer",
            "format": "int32",
            "description": "Expiry time of the Access Token in seconds",
            "example": 3600
          },
          "c_nonce": {
            "type": "string",
            "description": "String containing a nonce value to be used to create a proof of possession of key material when requesting a Credential",
            "example": "ts_EtUQs0ieiIS1NYNBHEQSoy3ct4gpy-4FZKwHilkY"
          },
          "c_nonce_expires_in": {
            "type": "integer",
            "format": "int32",
            "description": "Integer, it represents the lifetime in seconds of the c_nonce",
            "example": 86400
          },
          "authorization_details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuthorizationDetails"
            },
            "description": "Array, used to identify authorizations grainted with the DPoP-bound Access Token"
          }
        },
        "required": [
          "access_token",
          "token_type",
          "expires_in",
          "c_nonce",
          "c_nonce_expires_in",
          "authorization_details"
        ]
      },
      "WellKnowResponse": {
        "type": "object",
        "properties": {
          "entity_configuration": {
            "type": "string",
            "description": "Metadata that an Entity publishes about itself, verifiable with a trusted third party (Superior Entity). It's called Entity Configuration. (<a target=\"blank\" href=\"https://github.com/it-helpers/it-wallet-helpers/blob/0.6.0/docs/schema/jwt_well_know_openid_federation.json\">View the JSON schema</a>).",
            "pattern": "^([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_=]+)$",
            "example": "ewoKICAiYWxnIjogIkVTMjU2IiwKICAia2lkIjogIkZBTkZTM1luQzl0amlDYWl2aFdMVlVKM0F4d0dHel85OHVSRmFxTUVFcyIsCiAgInR5cCI6ICJlbnRpdHktc3RhdGVtZW50K2p3dCIKCn0.ewogICAgImV4cCI6ICIxNjQ5NjEwMjQ5IiwKICAgICJpYXQiOiAiMTY0OTQzNzQ0OSIsCiAgICAiaXNzIjogImh0dHBzOi8vcGlkLXByb3ZpZGVyLmV4YW1wbGUub3JnIiwKICAgICJzdWIiOiAiaHR0cHM6Ly9waWQtcHJvdmlkZXIuZXhhbXBsZS5vcmciLAogICAgImp3a3MiOiB7CiAgICAgICAgImtleXMiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJrdHkiOiAiUlNBIiwKICAgICAgICAgICAgICAgICJ1c2UiOiAic2lnIiwKICAgICAgICAgICAgICAgICJuIjogIjFUYS1zRSAuLi4iLAogICAgICAgICAgICAgICAgImUiOiAiQVFBQiIsCiAgICAgICAgICAgICAgICAia2lkIjogIkZBTkZTM1luQzl0amlDYWl2aFdMVlVKM0F4d0dHel85OHVSRmFxTUVFcyIKICAgICAgICAgICAgfQogICAgICAgIF0KICAgIH0sCiAgICAiYXV0aG9yaXR5X2hpbnRzIjogWwogICAgICAgICJodHRwczovL3N1cGVyaW9yLWVudGl0eS5leGFtcGxlLm9yZy9mZWRlcmF0aW9uIgogICAgXSwKICAgICJtZXRhZGF0YSI6IHsKICAgICAgICAiZmVkZXJhdGlvbl9lbnRpdHkiOiB7CiAgICAgICAgICAgICJvcmdhbml6YXRpb25fbmFtZSI6ICJQSUQgUHJvdmlkZXIgT3JnYW5pemF0aW9uIEV4YW1wbGUiLAogICAgICAgICAgICAiaG9tZXBhZ2VfdXJpIjogImh0dHBzOi8vcGlkLXByb3ZpZGVyLmV4YW1wbGUub3JnIiwKICAgICAgICAgICAgInBvbGljeV91cmkiOiAiaHR0cHM6Ly9waWQtcHJvdmlkZXIuZXhhbXBsZS5vcmcvcHJpdmFjeV9wb2xpY3kiLAogICAgICAgICAgICAidG9zX3VyaSI6ICJodHRwczovL3BpZC1wcm92aWRlci5leGFtcGxlLm9yZy9pbmZvX3BvbGljeSIsCiAgICAgICAgICAgICJsb2dvX3VyaSI6ICJodHRwczovL3BpZC1wcm92aWRlci5leGFtcGxlLm9yZy9sb2dvLnN2ZyIsCiAgICAgICAgICAgICJjb250YWN0cyI6IFsKICAgICAgICAgICAgICAgICJvcHNAcGlkLXByb3ZpZGVyLmV4YW1wbGUub3JnIgogICAgICAgICAgICBdLAogICAgICAgICAgICAiZmVkZXJhdGlvbl9yZXNvbHZlX2VuZHBvaW50IjogImh0dHBzOi8vcGlkLXByb3ZpZGVyLmV4YW1wbGUub3JnL3Jlc29sdmUiCiAgICAgICAgfSwKICAgICAgICAib2F1dGhfYXV0aG9yaXphdGlvbl9zZXJ2ZXIiOiB7CiAgICAgICAgICAgICJhdXRob3JpemF0aW9uX2VuZHBvaW50IjogImh0dHBzOi8vcGlkLXByb3ZpZGVyLmV4YW1wbGUub3JnL2F1dGhvcml6YXRpb24iLAogICAgICAgICAgICAicHVzaGVkX2F1dGhvcml6YXRpb25fcmVxdWVzdF9lbmRwb2ludCI6ICJodHRwczovL3BpZC1wcm92aWRlci5leGFtcGxlLm9yZy9jb25uZWN0L3BhciIsCiAgICAgICAgICAgICJkcG9wX3NpZ25pbmdfYWxnX3ZhbHVlc19zdXBwb3J0ZWQiOiBbCiAgICAgICAgICAgICAgICAiRVMyNTYiLAogICAgICAgICAgICAgICAgIkVTNTEyIgogICAgICAgICAgICBdLAogICAgICAgICAgICAidG9rZW5fZW5kcG9pbnQiOiAiaHR0cHM6Ly9waWQtcHJvdmlkZXIuZXhhbXBsZS5vcmcvdG9rZW4iLAogICAgICAgICAgICAiaW50cm9zcGVjdGlvbl9lbmRwb2ludCI6ICJodHRwczovL3BpZC1wcm92aWRlci5leGFtcGxlLm9yZy9pbnRyb3NwZWN0aW9uIiwKICAgICAgICAgICAgImNsaWVudF9yZWdpc3RyYXRpb25fdHlwZXNfc3VwcG9ydGVkIjogWwogICAgICAgICAgICAgICAgImF1dG9tYXRpYyIKICAgICAgICAgICAgXSwKICAgICAgICAgICAgImNvZGVfY2hhbGxlbmdlX21ldGhvZHNfc3VwcG9ydGVkIjogWwogICAgICAgICAgICAgICAgIlMyNTYiCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgICJhdXRob3JpemF0aW9uX2RldGFpbHNfdHlwZXNfc3VwcG9ydGVkIjogWwogICAgICAgICAgICAgICAgIm9wZW5pZF9jcmVkZW50aWFsIgogICAgICAgICAgICBdLAogICAgICAgICAgICAiYWNyX3ZhbHVlc19zdXBwb3J0ZWQiOiBbCiAgICAgICAgICAgICAgICAiaHR0cHM6Ly93d3cuc3BpZC5nb3YuaXQvU3BpZEwyIiwKICAgICAgICAgICAgICAgICJodHRwczovL3d3dy5zcGlkLmdvdi5pdC9TcGlkTDMiCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgICJncmFudF90eXBlc19zdXBwb3J0ZWQiOiBbCiAgICAgICAgICAgICAgICAiYXV0aG9yaXphdGlvbl9jb2RlIgogICAgICAgICAgICBdLAogICAgICAgICAgICAiaXNzdWVyIjogImh0dHBzOi8vcGlkLXByb3ZpZGVyLmV4YW1wbGUub3JnIiwKICAgICAgICAgICAgImp3a3MiOiB7CiAgICAgICAgICAgICAgICAia2V5cyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJrdHkiOiAiRUMiLAogICAgICAgICAgICAgICAgICAgICAgICAia2lkIjogIkZBTkZTM1luQzl0amlDYWl2aFdMVlVKM0F4d0dHel85OHVSRmFxTUVFcyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJzY29wZXNfc3VwcG9ydGVkIjogWwogICAgICAgICAgICAgICAgIlBlcnNvbklkZW50aWZpY2F0aW9uRGF0YSIKICAgICAgICAgICAgXSwKICAgICAgICAgICAgInJlcXVlc3RfcGFyYW1ldGVyX3N1cHBvcnRlZCI6IHRydWUsCiAgICAgICAgICAgICJyZXF1ZXN0X3VyaV9wYXJhbWV0ZXJfc3VwcG9ydGVkIjogZmFsc2UsCiAgICAgICAgICAgICJyZXNwb25zZV90eXBlc19zdXBwb3J0ZWQiOiBbCiAgICAgICAgICAgICAgICAiY29kZSIKICAgICAgICAgICAgXSwKICAgICAgICAgICAgInN1YmplY3RfdHlwZXNfc3VwcG9ydGVkIjogWwogICAgICAgICAgICAgICAgInBhaXJ3aXNlIgogICAgICAgICAgICBdLAogICAgICAgICAgICAidG9rZW5fZW5kcG9pbnRfYXV0aF9tZXRob2RzX3N1cHBvcnRlZCI6IFsKICAgICAgICAgICAgICAgICJhdHRlc3Rfand0X2NsaWVudF9hdXRoIgogICAgICAgICAgICBdLAogICAgICAgICAgICAidG9rZW5fZW5kcG9pbnRfYXV0aF9zaWduaW5nX2FsZ192YWx1ZXNfc3VwcG9ydGVkIjogWwogICAgICAgICAgICAgICAgIkVTMjU2IiwKICAgICAgICAgICAgICAgICJFUzM4NCIsCiAgICAgICAgICAgICAgICAiRVM1MTIiCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgICJyZXF1ZXN0X29iamVjdF9zaWduaW5nX2FsZ192YWx1ZXNfc3VwcG9ydGVkIjogWwogICAgICAgICAgICAgICAgIkVTMjU2IiwKICAgICAgICAgICAgICAgICJFUzM4NCIsCiAgICAgICAgICAgICAgICAiRVM1MTIiCiAgICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgICJvcGVuaWRfY3JlZGVudGlhbF9pc3N1ZXIiOiB7CiAgICAgICAgICAgICJjcmVkZW50aWFsX2lzc3VlciI6ICJodHRwczovL3BpZC1wcm92aWRlci5leGFtcGxlLm9yZyIsCiAgICAgICAgICAgICJjcmVkZW50aWFsX2VuZHBvaW50IjogImh0dHBzOi8vcGlkLXByb3ZpZGVyLmV4YW1wbGUub3JnL2NyZWRlbnRpYWwiLAogICAgICAgICAgICAicmV2b2NhdGlvbl9lbmRwb2ludCI6ICJodHRwczovL3BpZC1wcm92aWRlci5leGFtcGxlLm9yZy9yZXZva2UiLAogICAgICAgICAgICAic3RhdHVzX2F0dGVzdGF0aW9uX2VuZHBvaW50IjogImh0dHBzOi8vcGlkLXByb3ZpZGVyLmV4YW1wbGUub3JnL3N0YXR1cyIsCiAgICAgICAgICAgICJkaXNwbGF5IjogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJuYW1lIjogIlBJRCBQcm92aWRlciBJdGFsaWFubyBkaSBlc2VtcGlvIiwKICAgICAgICAgICAgICAgICAgICAibG9jYWxlIjogIml0LUlUIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJFeGFtcGxlIFBJRCBQcm92aWRlciIsCiAgICAgICAgICAgICAgICAgICAgImxvY2FsZSI6ICJlbi1VUyIsCiAgICAgICAgICAgICAgICAgICAgImxvZ28iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9waWQtcHJvdmlkZXIuZXhhbXBsZS5vcmcvcHVibGljL2xvZ28uc3ZnIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFsdF90ZXh0IjogImxvZ28gZGkgcXVlc3RvIFBJRCBQcm92aWRlciIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgICJqd2tzIjogewogICAgICAgICAgICAgICAgImtleXMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAiY3J2IjogIlAtMjU2IiwKICAgICAgICAgICAgICAgICAgICAgICAgImt0eSI6ICJFQyIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ4IjogIm5ld0s1cURZTWVrckNQUE8teUVZVGRKVldKTVR6YXNNYXZ0MnZtMU1iLUEiLAogICAgICAgICAgICAgICAgICAgICAgICAieSI6ICJWaXpYYUxPNmR6ZWVzWlB4ZnBHWmFiVEszY1RYdEJVYklpUXBtaVlSdFNFIiwKICAgICAgICAgICAgICAgICAgICAgICAgImtpZCI6ICJmZjBiZGVkMDQ1ZmU2M2ZlNWQxZDY0ZGQ4M2I1NjdlMCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJjcmVkZW50aWFsX2NvbmZpZ3VyYXRpb25zX3N1cHBvcnRlZCI6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAiZm9ybWF0IjogInZjK3NkLWp3dCIsCiAgICAgICAgICAgICAgICAgICAgImNyeXB0b2dyYXBoaWNfYmluZGluZ19tZXRob2RzX3N1cHBvcnRlZCI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgImp3ayIKICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICJjcmVkZW50aWFsX3NpZ25pbmdfYWxnX3ZhbHVlc19zdXBwb3J0ZWQiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICJFUzI1NiIsCiAgICAgICAgICAgICAgICAgICAgICAgICJFUzM4NCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJFUzUxMiIKICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICJwcm9vZl90eXBlc19zdXBwb3J0ZWQiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJqd3QiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAicHJvb2Zfc2lnbmluZ19hbGdfdmFsdWVzX3N1cHBvcnRlZCI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiRVMyNTYiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJkaXNwbGF5IjogWwogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJQSUQgSXRhbGlhbm8gZGkgZXNlbXBpbyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAibG9jYWxlIjogIml0LUlUIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJsb2dvIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9waWQtcHJvdmlkZXIgZXhhbXBsZS5vcmcvcHVibGljL2xvZ28uc3ZnIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiYWx0X3RleHQiOiAibG9nbyBkaSBxdWVzdGEgQ3JlZGVuemlhbGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImJhY2tncm91bmRfY29sb3IiOiAiIzEyMTA3YyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidGV4dF9jb2xvciI6ICIjRkZGRkZGIgogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJFeGFtcGxlIEl0YWxpYW4gUElEIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJsb2NhbGUiOiAiZW4tVVMiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImxvZ28iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInVybCI6ICJodHRwczovL3BpZC1wcm92aWRlci5leGFtcGxlLm9yZy9wdWJsaWMvbG9nby5zdmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJhbHRfdGV4dCI6ICJUaGUgbG9nbyBvZiB0aGlzIGNyZWRlbnRpYWwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImJhY2tncm91bmRfY29sb3IiOiAiIzEyMTA3YyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidGV4dF9jb2xvciI6ICIjRkZGRkZGIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAiY3JlZGVudGlhbF9kZWZpbml0aW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJQZXJzb25JZGVudGlmaWNhdGlvbkRhdGEiCiAgICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAgICJ2ZXJpZmljYXRpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHJ1c3RfZnJhbWV3b3JrIjogImVpZGFzIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJhc3N1cmFuY2VfbGV2ZWwiOiAiaGlnaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZXZpZGVuY2UiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJlbGVjdHJvbmljX3JlY29yZCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJyZWNvcmQiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJodHRwczovL2V1ZGkud2FsbGV0LmNpZS5nb3YuaXQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInNvdXJjZSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAib3JnYW5pemF0aW9uX25hbWUiOiAiTWluaXN0ZXJvIGRlbGwnSW50ZXJubyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIm9yZ2FuaXphdGlvbl9pZCI6ICJ1cm46ZXVkaTppdDpvcmdhbml6YXRpb25faWQ6aXBhX2NvZGU6bV9pdCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImNvdW50cnlfY29kZSI6ICJJVCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgImNyZWRlbnRpYWxTdWJqZWN0IjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgImdpdmVuX25hbWUiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIm1hbmRhdG9yeSI6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImRpc3BsYXkiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogIkN1cnJlbnQgRmlyc3QgTmFtZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAibG9jYWxlIjogImVuLVVTIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJOb21lIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJsb2NhbGUiOiAiaXQtSVQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImZhbWlseV9uYW1lIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJtYW5kYXRvcnkiOiB0cnVlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkaXNwbGF5IjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJDdXJyZW50IEZhbWlseSBOYW1lIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJsb2NhbGUiOiAiZW4tVVMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogIkNvZ25vbWUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImxvY2FsZSI6ICJpdC1JVCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiYmlydGhfZGF0ZSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAibWFuZGF0b3J5IjogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGlzcGxheSI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAiRGF0ZSBvZiBCaXJ0aCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAibG9jYWxlIjogImVuLVVTIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJEYXRhIGRpIE5hc2NpdGEiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImxvY2FsZSI6ICJpdC1JVCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidW5pcXVlX2lkIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJtYW5kYXRvcnkiOiB0cnVlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkaXNwbGF5IjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJVbmlxdWUgSWRlbnRpZmllciIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAibG9jYWxlIjogImVuLVVTIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJJZGVudGlmaWNhdGl2byB1bml2b2NvIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJsb2NhbGUiOiAiaXQtSVQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgInRheF9pZF9jb2RlIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJtYW5kYXRvcnkiOiB0cnVlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkaXNwbGF5IjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJUYXggSWQgTnVtYmVyIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJsb2NhbGUiOiAiZW4tVVMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogIkNvZGljZSBGaXNjYWxlIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJsb2NhbGUiOiAiaXQtSVQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgICJvcGVuaWRfcmVseWluZ19wYXJ0eSI6IHsKICAgICAgICAgICAgICAgICJleGFtcGxlIjogIjxUaGlzIGlzIHRoZSBtZXRhZGF0YSBvZiB0aGUgUElEL0VBQSBQcm92aWRlciBhY3RpbmcgYXMgYSBSZWx5aW5nIFBhcnR5IGluIHRoZSBuYXRpb25hbCBkaWdpdGFsIGlkZW50aXR5IHN5c3RlbXMgKENJRS9TUElEKS4gU2VlIHNwaWQtY2llLW9pZGMtZG9jcyBmb3IgZGV0YWlscy4-IgogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9.vnMKJBR2HB0CmWdrag6lt6aNRtN8BVvXiBoENFiqKlgXK7LFKz75WRza69Z9YhAd9yxAj2lKHlBGAulOG_IcMg"
          }
        },
        "required": [
          "response"
        ]
      },
      "AuthorizationDetails": {
        "type": "object",
        "description": "Object containing the detailed description of a specific autorization",
        "properties": {
          "type": {
            "type": "string",
            "description": "The authorization details type. It MUST be set to 'openid_credential'"
          },
          "credential_configuration_id": {
            "type": "string",
            "description": "The unique identifier of the authorized Credential"
          }
        },
        "required": [
          "type",
          "credential_configuration_id"
        ]
      },
      "CredentialRequest": {
        "type": "object",
        "properties": {
          "credential_definition": {
            "type": "object",
            "description": "Object containing the detailed description of the credential types the Wallet Instance requests in the Credential Request",
            "properties": {
              "type": {
                "type": "array",
                "description": "Array containing the credential type values the Wallet requests in the Credential Request. Credential types supported by the Credential Issuer are specified in the credential_configurations_supported map in the Credential Issuer Metadata",
                "items": {
                  "type": "string",
                  "example": "PersonIdentificationData"
                }
              }
            }
          },
          "format": {
            "type": "string",
            "description": "Format of the Credentials to be issued. This MUST be 'vc+sd-jwt'",
            "example": "vc+sd-jwt"
          },
          "proof": {
            "type": "object",
            "description": "Object containing proof of possession of the key material the issued Credentials shall be bound to",
            "properties": {
              "proof_type": {
                "type": "object",
                "properties": {
                  "proof_type": {
                    "type": "string",
                    "description": "String denoting the proof type. It MUST be 'jwt'",
                    "example": "jwt"
                  }
                }
              },
              "jwt": {
                "type": "string",
                "description": "The base64url encoded SHA-256 thumprint of the JWT proof public key (in JWK format); the claim 'jwk' of the credential MUST be set to this thumprint for bounding the Credential to the JWT proof public key",
                "example": "eyJraWQiOiJkaWQ6ZXhhbXBsZTplYm"
              }
            }
          }
        },
        "required": [
          "credential_definition",
          "format",
          "proof"
        ]
      },
      "CredentialResponse": {
        "type": "object",
        "properties": {
          "credential": {
            "type": "object",
            "description": "The Credential",
            "properties": {
              "type": {
                "type": "array",
                "description": "Array containing the credential type values the Wallet requests in the Credential Request",
                "items": {
                  "type": "string"
                }
              }
            },
            "example": ".eyJzdWIiOiJvZVE1Vk5UQlAyakU2N0l1Sy1vN3pDWlN0VHV1d1Qwc1hSZFoyS1Nyc2R3IiwidmVyaWZpZWRfY2xhaW1zIjp7ImNsYWltcyI6eyJfc2QiOlsiLVkxU1ZGaW03azdCdjVmWXlJY05hTGFqel9QVWxxeEFsUjE4cDRDcU5UNCIsIkZqaS1wSHk3YTBMSGFNam1wSENJRUhfbktnUW52VGxqbFI2VGVmdzlyVkEiLCJHb19OU283TTFlalpXRmxPSlZMaUN1ZVdUQnJDY3JSYjQzOTNJb0hWQktZIiwiWFhWeFNpS1M1Tm83cmpNazVNRFFhUjlEcjRPb3cyR194UFNBWnE1djNUNCIsImNGUUdVUHFGNENPbHpnQ3pHcWxrb2Rya3hIaHhrcnFYTzZrM0tUUEZqdWsiLCJmT0hmQ0dsTDY2UG1ocDl6T0pqQnZVR1Zmd1UwRThtb3BUWVVxT0cwWURZIiwibTZycXc3cThDV2dFdldrTEk0T0paLUVKN2o5MmVkMnZIY2tQcnh0ck1VWSJdfSwidmVyaWZpY2F0aW9uIjp7ImFzc3VyYW5jZV9sZXZlbCI6ImhpZ2giLCJ0cnVzdF9mcmFtZXdvcmsiOiJlaWRhcyIsIl9zZCI6WyI2TjgzVzJUN2xvbnJBWENKWDVxelJ3c3ZLS25qSXZCMkUwbjVWbjBBaHVvIl19fSwiX3NkX2FsZyI6InNoYS0yNTYiLCJpc3MiOiJodHRwczovL3VhdC5ldWRpLXdhbGxldC1pdC1xZWFhLWlzc3Vlci5kZW1vLmlwenMuaXQiLCJjbmYiOnsiandrIjp7Imt0eSI6IkVDIiwiY3J2IjoiUC0yNTYiLCJraWQiOiJmMGVlYWQzMS03ZTA3LTRiYTEtOGY3YS05ZWU4YTllZWIyNWEiLCJ4IjoiYWN6WTUwOWx3ZGZyVHdRQTVTLXdiYkpaSmItUEMzT1RfZ01uOWRpcXI0USIsInkiOiJFaDExZUwxaDJCUmJGS05qU3Znbnp5SXRpM1dCTjNxeE56aVQ4UERrOUtvIn19LCJleHAiOjE3MzcxOTI0NTYsInR5cGUiOiJFdXJvcGVhbkRpc2FiaWxpdHlDYXJkIiwiaWF0IjoxNzA1NTcwMDU2LCJqdGkiOiJ1cm46dXVpZDoxZDNlYjFhZC1kMzBlLTRhYjktYTY4Ni05ZWY5MmU4ZTkzMGYiLCJzdGF0dXMiOiJodHRwczovL3VhdC5ldWRpLXdhbGxldC1pdC1xZWFhLWlzc3Vlci5kZW1vLmlwenMuaXQvc3RhdHVzIn0.MrbtZznuS3fnYugwMTFRi0AMTS5rKlLvqwbRRZWeqkA8EpSnEHtTUhA4bR-QF0sInThLeLFS5C4pVf414gy1UT-IS2vx0xksnXaUnMqIaPOF8ElRPTwUYI8tXeV8LM_wsmV61TtZadHOn6YHpju-jHEtMcD80ddwzJhSq4jig-lBVH_Ud-KWIKtN60SJ1uHxFar1Jdhoi6AlHI5u3nIzbmKG6a87qN00rqtcL2LE11IhDh3yg8XqbszqEaRftLtPl833_YD5t4tO0xiU25zq_TAWt5L_5ea7JjY6k-zzo-X2GEedRDRFSfmG6Nbk4ZvZ16ildG-pjiXLS6bpPQ1nvg~WyJ6dkQ1R3lxZnRVS1l4bXRmSTBiSUFnIiwiZ2l2ZW5fbmFtZSIsIk1BUklPIl0~WyJlaWNrRVZPa1plbHBiYVJSUnRfZmJBIiwiZmFtaWx5X25hbWUiLCJST1NTSSJd~WyJOaFdjUjl6dlJveXRuWnA0emdCbHpBIiwiYmlydGhkYXRlIiwiMTk4NC0wMS0yMyJd~WyJzcUhuekZsM2tUa1JiRTA4Uy13VXRnIiwiZmlzY2FsX2NvZGUiLCJUSU5JVC1SU1NNUkE4MEExMEg1MDFBIl0~WyI2a25kRV9jaVVCQU1LM3VmSk5kRHNRIiwic2VyaWFsX251bWJlciIsIjAwMDAwMDAwIl0~WyI0endXX2pSUy1QSkVQWXlOWHBrYm53IiwiZXhwaXJhdGlvbl9kYXRlIiwiMjAyNS0xMC0wMSJd~WyJFQ2FwRkE3Qk1BNVYxdFR6RnVkdjVBIiwiYWNjb21wYW55aW5nX3BlcnNvbl9yaWdodCIsIjEiXQ~WyJ0ZElsLUU1ZGNwUmhNSzdsSmVHY1BnIiwiZXZpZGVuY2UiLFt7InR5cGUiOiJlbGVjdHJvbmljX3JlY29yZCIsInJlY29yZCI6eyJ0eXBlIjoiaHR0cHM6Ly9ldWRpLndhbGxldC5wZG5kLmdvdi5pdCIsInNvdXJjZSI6eyJvcmdhbml6YXRpb25fbmFtZSI6Ik1pbmlzdGVybyBwZXIgbGUgZGlzYWJpbGl0w6AiLCJvcmdhbml6YXRpb25faWQiOiJ1cm46ZXVkaTppdDpvcmdhbml6YXRpb25faWQ6aXBhX2NvZGU6UUxIQ0ZDIiwiY291bnRyeV9jb2RlIjoiSVQifX19XV0"
          },
          "format": {
            "type": "string",
            "description": "Format of the Credentials issued. This MUST be 'vc+sd-jwt'",
            "example": "vc+sd-jwt"
          },
          "c_nonce": {
            "type": "string",
            "description": "String containing a nonce value to be used to create a proof of possession of key material when requesting a further Credential or for the renewal of a credential",
            "example": "ts_EtUQs0ieiIS1NYNBHEQSoy3ct4gpy-4FZKwHilkY"
          },
          "c_nonce_expires_in": {
            "type": "integer",
            "format": "int32",
            "description": "Integer, it represents the lifetime in seconds of the c_nonce",
            "example": 86400
          }
        },
        "required": [
          "credential",
          "format",
          "c_nonce",
          "c_nonce_expires_in"
        ]
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "The error code",
            "example": "invalid_proof"
          },
          "error_description": {
            "type": "string",
            "description": "Text in human-readable form providing further details to clarify the nature of the error encountered",
            "example": "The proof field is not present or the provided key proof is invalid or not bound to a nonce provided by the Credential Issuer."
          }
        },
        "required": [
          "error"
        ]
      }
    }
  }
}