{
  "openapi": "3.0.2",
  "info": {
    "title": "IT Wallet API",
    "version": "0.6.0",
    "description": "API for the Italian EUDI Wallet implementation profile (version: '0.6.0')  <a target=\"blank\" href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/\">https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/</a>"
  },
  "servers": [
    {
      "url": "https://api.server.test/it-wallet-api/v0.6.0",
      "description": "Main (production) server"
    }
  ],
  "paths": {
    "/as/par": {
      "post": {
        "summary": "Starts authorization flow for the Wallet",
        "tags": ["Credential Issuance Flow"],
        "operationId": "parRequest",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ParRequest"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse_400"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse_405"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse_413"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse_429"
                }
              }
            }
          },
          "5XX": {
            "description": "Unexpected error."
          }
        }
      }
    },
    "/authorize": {
      "get": {
        "summary": "Issuing authorization code to the Wallet",
        "tags": ["Credential Issuance Flow"],
        "operationId": "authorize",
        "parameters": [
          {
            "name": "jwt_user",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_=]+)$"
            },
            "description": "A signed JWT that includes claims regarding the authentication of the user by a Service Provider (SP) or a Relay Party (RP) (<a target=\"blank\" href=\"https://github.com/it-helpers/it-wallet-helpers/blob/0.6.0/docs/schema/jwt_wte.json\">View the JSON schema</a>)"
          },
          {
            "name": "state",
            "in": "cookie",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "It MUST be set to the same value of the 'state' parameter in the PAR Request, in URL-encoded format",
            "example": "fyZiOL9Lf2CeKuNT2JzxiLRDink0uPcd"
          },
          {
            "name": "client_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "It MUST be set to the same value in the PAR Request, in URL-encoded format",
            "allowEmptyValue": true,
            "example": "$thumprint-of-the-jwk-in-the-cnf-wallet-attestation$"
          },
          {
            "name": "request_uri",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "It MUST be set to the same value as obtained by PAR Response, in URL-encoded format",
            "allowEmptyValue": true,
            "example": "urn%3ietf%3params%3oauth%3request_uri%3bwc4JK-ESC0w8acc191e-Y1LTC2"
          },
          {
            "name": "idphint",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The identifier of the hinted Identity Provider ID, in URL-encoded format",
            "allowEmptyValue": true,
            "example": "https%3A%2F%2Fidp.example.org"
          }
        ],
        "responses": {
          "302": {
            "description": "Found",
            "headers": {
              "Location": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "The Location response header indicates the URL to redirect the Wallet Instance to. This URL present in query string the authorization code generated by the authorization server (parameter 'code') and the same 'state' and 'iss' parameters were present in the PAR Request.     If the request fails due to a missing, invalid, or mismatching redirection URI, or if the client  identifier is missing or invalid, the authorization server MUST NOT automatically redirect the  user-agent to the invalid redirection URI. If the authorization server denies the access request or  if the request fails for reasons other than a missing or invalid redirection URI, the authorization  server informs the client by adding the error parameter (in URL-encoded format) and  the error_description parameter (in URL-encoded format) to the query component of the redirection URI  ([RFC 6749#section-4.1.2.1] https://datatracker.ietf.org/doc/html/rfc6749.html#section-4.1.2.1)",
                "examples": {
                  "302_After_Authentication_Flow": {
                    "description": "Redirect URI at the end of the authentication flow",
                    "value": "https://start.wallet.example.org?code=SplxlOBeZQQYbYS6WxSbIA&state=fyZiOL9Lf2CeKuNT2JzxiLRDink0uPcd&iss=https%3A%2F%2Fpid-provider.example.org"
                  },
                  "302_Authentication_Request_Invalid": {
                    "description": "Redirect URI in  the end of the authentication flow",
                    "value": "https://start.wallet.example.org?error=server_error&error_description=The%20authorization%20server%20encountered%20an%20unexpected%20condition%20that%20prevented%20it%20from%20fulfilling%20the%20request%20response_type%20value&state=fyZiOL9Lf2CeKuNT2JzxiLRDink0uPcd&iss=https%3A%2F%2Fpid-provider.example.org"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/token": {
      "post": {
        "summary": "Issuing access token to the Wallet",
        "tags": ["Credential Issuance Flow"],
        "operationId": "tokenRequest",
        "parameters": [
          {
            "in": "header",
            "name": "DPoP",
            "schema": {
              "type": "string",
              "description": "The DPoP Proof JWT for the Token Endpoint, in signed JWT format (<a target=\"blank\" href=\"https://github.com/it-helpers/it-wallet-helpers/blob/0.6.0/docs/schema/jwt_dpop_token_endpoint.json\">View the JSON schema</a>)",
              "pattern": "^([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_=]+)$"
            },
            "example": "eyJ0eXAiOiJkcG9wK2p3dCIsImFsZyI6IkVTMjU2IiwiandrIjp7Imt0eSI6IkVDIiwieCI6IjM1bHZDOHV6MlFyV3BRSjNUVUg4dDlvOURVUk1wN3lkVTUxOFJLRGwyMGsiLCJ5IjoiSThCdVhCMmJ2eGVsekpBZDdPS2hkLVp3akNzdDA1Rng0N01iXzB1Z3JvcyIsImNydiI6IlAtMjU2In19.eyJqdGkiOiJlMWozVl9iS2ljOC1MQUVBIiwiaHRtIjoiUE9TVCIsImh0dSI6Imh0dHBzOi8vaXQtd2FsbGV0LWVpZC1wcm92aWRlci5leGFtcGxlLml0L3Rva2VuIiwiaWF0IjoxNzEwMzQ2MzQzfQ.mIDdPx1KjBnitErOYJjvzr5EYjl8dRQlzAT30e0mhk8NZZCwAMfktzcyb1_IuEywi_VMbrWTp1gFOAxJv_uaJQ"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TokenRequest"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "5XX": {
            "description": "Unexpected error."
          }
        }
      }
    },
    "/credential": {
      "post": {
        "summary": "Issuing eID Credential to the Wallet",
        "operationId": "credentialRequest",
        "tags": ["Credential Issuance Flow"],
        "parameters": [
          {
            "in": "header",
            "name": "DPoP",
            "schema": {
              "type": "string",
              "description": "The DPoP Proof for the Credential Endpoint, in signed JWT format (<a target=\"blank\" href=\"https://github.com/it-helpers/it-wallet-helpers/blob/0.6.0/docs/schema/jwt_dpop_credential_endpoint.json\">View the JSON schema</a>)",
              "pattern": "^([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_=]+)$"
            },
            "example": "eyJ0eXAiOiJkcG9wK2p3dCIsImFsZyI6IkVTMjU2IiwiandrIjp7Imt0eSI6IkVDIiwieCI6IjM1bHZDOHV6MlFyV3BRSjNUVUg4dDlvOURVUk1wN3lkVTUxOFJLRGwyMGsiLCJ5IjoiSThCdVhCMmJ2eGVsekpBZDdPS2hkLVp3akNzdDA1Rng0N01iXzB1Z3JvcyIsImNydiI6IlAtMjU2In19.eyJqdGkiOiJlMWozVl9iS2ljOC1MQUVCIiwiaHRtIjoiUE9TVCIsImh0dSI6Imh0dHBzOi8vaXQtd2FsbGV0LWVpZC1wcm92aWRlci5leGFtcGxlLml0L2NyZWRlbnRpYWwiLCJpYXQiOjE3MTAzNDYzNDMsImF0aCI6ImZVSHlPMnIyWjNEWjUzRXNOcldCYjB4V1hvYU55NTlJaUtDQXFrc21RRW8ifQ.vnMKJBR2HB0CmWdrag6lt6aNRtN8BVvXiBoENFiqKlgXK7LFKz75WRza69Z9YhAd9yxAj2lKHlBGAulOG_IcMg"          
          },
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string",
              "description": "The DPoP-bound Access Token, in signed JWT format(<a target=\"blank\" href=\"https://github.com/it-helpers/it-wallet-helpers/blob/0.6.0/docs/schema/jwt_dpop_bound_access_token.json\">View the JSON schema</a>)",
              "pattern": "^([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_=]+)$"
            },
            "example":"DPoP eyJ0eXAiOiJkcG9wK2p3dCIsImFsZyI6IkVTMjU2Iiwia2lkIjoiY3o2dXM2cHdsYmswYTNxNnNjZHc4M3gifQ.eyJqdGkiOiItQndDM0VTYzZhY2MybFRjIiwiaXNzIjoiaHR0cHM6Ly9pdC13YWxsZXQtZWlkLXByb3ZpZGVyLmV4YW1wbGUuaXQvdG9rZW4iLCJzdWIiOiJOemJMc1hoOHVEQ2NkN25vV1hGWkFmSGt4WnNSR0M5WHMiLCJhdWQiOiJodHRwczovL2l0LXdhbGxldC1laWQtcHJvdmlkZXIuZXhhbXBsZS5pdC9jcmVkZW50aWFsIiwiaWF0IjoxNzExNDAzNDMyLCJleHAiOjE3MTE0MDQwMzIsImprdCI6ImtRTVUxM05ydmljMkQ5SUdwMnQtUGhMZmlIR0VGRzVST0VJSWV5dWU3Tk0ifQ.9qrEiuuKa490FT3JyJy9hqnjopVkZM98q59blR0Q24NdTE2VVTDQIvjoJE3thYLN8Vqe_dI2-I1V31wK_W_JQQ"
           }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CredentialRequest"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "5XX": {
            "description": "Unexpected error."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ParRequest": {
        "type": "object",
        "properties": {
          "response_type": {
            "type": "string",
            "description": "MUST be set to 'code'",
            "example": "code"
          },
          "client_id": {
            "type": "string",
            "description": "MUST be set to the thumbprint of the jwk value in the cnf parameter inside the Wallet Attestation JWT",
            "example": "$thumprint-of-the-jwk-in-the-cnf-wallet-attestation$"
          },
          "code_challenge": {
            "type": "string",
            "description": "A challenge derived from the code verifier that is sent in the authorization request",
            "example": "E9Melhoa2OwvFrEMTJguCHaoeK1t8URWbuGJSstw-cM"
          },
          "code_challenge_method": {
            "type": "string",
            "description": "A method that was used to derive code challenge. It MUST be set to 'S256'",
            "example": "S256"
          },
          "request": {
            "type": "string",
            "description": "It MUST be a signed JWT (<a target=\"blank\" href=\"https://github.com/it-helpers/it-wallet-helpers/blob/0.6.0/docs/schema/jwt_request_object.json\">View the JSON schema</a>). The private key corresponding to the public one in the cnf parameter inside the Wallet Attestation JWT MUST be used for signing the Request Object",
            "pattern": "^([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_=]+)$",
            "example": "$SIGNED-JWT"
          },
          "client_assertion_type": {
            "type": "string",
            "description": "It MUST be set to 'urn:ietf:params:oauth:client-assertion-type:jwt-client-attestation'",
            "example": "urn:ietf:params:oauth:client-assertion-type:jwt-client-attestation"
          },
          "client_assertion": {
            "type": "string",
            "description": "It MUST be set to a value containing the Wallet Attestation JWT (<a target=\"blank\" href=\"https://github.com/it-helpers/it-wallet-helpers/blob/0.6.0/docs/schema/jwt_wte.json\">View the JSON schema</a>) and the Proof of Possession (<a target=\"blank\" href=\"https://github.com/it-helpers/it-wallet-helpers/blob/0.6.0/docs/schema/jwt_wte_proof.json\">View the JSON schema</a>), separated with the ~ character",
            "example": "$WIA~WIA-PoP"
          }
        },
        "required": [
          "response_type",
          "client_id",
          "code_challenge",
          "code_challenge_method",
          "request",
          "client_assertion_type",
          "client_assertion"
        ]
      },
      "ParResponse": {
        "type": "object",
        "properties": {
          "request_uri": {
            "type": "string",
            "description": "The request URI corresponding to the authorization request posted. This URI MUST be a single-use reference to the respective authorization request. It MUST contain some part generated using a cryptographically strong pseudorandom algorithm. The value format MUST be urn:ietf:params:oauth:request_uri:<reference-value> with <reference-value> as the random part of the URI that references the respective authorization request data",
            "example": "urn:ietf:params:oauth:request_uri:bwc4JK-ESC0w8acc191e-Y1LTC2"
          },
          "expires_in": {
            "type": "integer",
            "format": "int32",
            "description": "Integer, it represents the lifetime in seconds of the request URI",
            "example": 60
          }
        },
        "required": [
          "request_uri",
          "expires_in"
        ]
      },
      "TokenRequest": {
        "type": "object",
        "properties": {
          "grant_type": {
            "type": "string",
            "description": "MUST be set to 'authorization_code'",
            "example": "authorization_code"
          },
          "code": {
            "type": "string",
            "description": "The authorization code returned in the Authorization Response",
            "example": "SplxlOBeZQQYbYS6WxSbIA"
          },
          "redirect_uri": {
            "type": "string",
            "description": "It MUST be set as the Request Objectredirect_uri claim of the PAR Request",
            "example": "https://start.wallet.example.org/cb"
          },
          "code_verifier": {
            "type": "string",
            "description": "Verification code of the code_challenge of the PAR Request",
            "example": "dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk"
          },
          "client_assertion_type": {
            "type": "string",
            "description": "It MUST be set to 'urn:ietf:params:oauth:client-assertion-type:jwt-client-attestation'",
            "example": "urn:ietf:params:oauth:client-assertion-type:jwt-client-attestation"
          },
          "client_assertion": {
            "type": "string",
            "description": "It MUST be set to a value containing the Wallet Attestation JWT and the Proof of Possession, separated with the ~ character",
            "example": "$WIA~WIA-PoP"
          }
        },
        "required": [
          "grant_type",
          "code",
          "redirect_uri",
          "code_verifier",
          "c_nonce_expires_in",
          "client_assertion_type",
          "client_assertion"
        ]
      },
      "TokenResponse": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "The DPoP-bound Access Token, in signed JWT format, allows accessing the PID/(Q)EAA Credential Endpoint for obtaining Credentials specified in the PAR Request",
            "pattern": "^([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_=]+)$",
            "example": "eyJhbGciOiJFUzI1NiJ9.eyJzdWIiOiJzdWJfcGFpcndpc2UiLCJhdWQiOiJodHRwczovL3VhdC5ldWRpLXdhbGxldC1pdC1xZWFhLWlzc3Vlci5kZW1vLmlwenMuaXQvdG9rZW4iLCJqa3QiOiJrUU1VMTNOcnZpYzJEOUlHcDJ0LVBoTGZpSEdFRkc1Uk9FSUlleXVlN05NIiwiZXhwIjoxNzA1NTczNjU1LCJpYXQiOjE3MDU1NzAwNTUsIm5vbmNlIjoidHNfRXRVUXMwaWVpSVMxTllOQkhFUVNveTNjdDRncHktNEZaS3dIaWxrWSIsImp0aSI6ImY4NTU1Y2ViLWM2NWMtNDAyNS05Mzc4LWI2NjcyYjYxNDlhZiIsImNsaWVudF9pZCI6Imh0dHBzOi8vdWF0LmV1ZGktd2FsbGV0LWl0LXFlYWEtaXNzdWVyLmRlbW8uaXB6cy5pdC90b2tlbiJ9.VyT25r23eO_ppWuw0ONV6GKjJFfvYtJKQSIngGwtyklmckhE3vg5U7Cws9V41GOU6F77MVifGfXf0l2HP3mW1Q"
          },
          "token_type": {
            "type": "string",
            "description": "Type of Access Token returned. It MUST be equal to 'DPoP'",
            "example": "DPoP"
          },
          "expires_in": {
            "type": "integer",
            "format": "int32",
            "description": "Expiry time of the Access Token in seconds",
            "example": 3600
          },
          "c_nonce": {
            "type": "string",
            "description": "String containing a nonce value to be used to create a proof of possession of key material when requesting a Credential",
            "example": "ts_EtUQs0ieiIS1NYNBHEQSoy3ct4gpy-4FZKwHilkY"
          },
          "c_nonce_expires_in": {
            "type": "integer",
            "format": "int32",
            "description": "Integer, it represents the lifetime in seconds of the c_nonce",
            "example": 86400
          },
          "authorization_details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuthorizationDetails"
            },
            "description": "Array, used to identify authorizations grainted with the DPoP-bound Access Token"
          }
        },
        "required": [
          "access_token",
          "token_type",
          "expires_in",
          "c_nonce",
          "c_nonce_expires_in",
          "authorization_details"
        ]
      },
      "AuthorizationDetails": {
        "type": "object",
        "description": "Object containing the detailed description of a specific autorization",
        "properties": {
          "type": {
            "type": "string",
            "description": "The authorization details type. It MUST be set to 'openid_credential'"
          },
          "credential_configuration_id": {
            "type": "string",
            "description": "The unique identifier of the authorized Credential"
          }
        },
        "required": [
          "type",
          "credential_configuration_id"
        ]
      },
      "CredentialRequest": {
        "type": "object",
        "properties": {
          "credential_definition": {
            "type": "object",
            "description": "Object containing the detailed description of the credential types the Wallet Instance requests in the Credential Request",
            "properties": {
              "type": {
                "type": "array",
                "description": "Array containing the credential type values the Wallet requests in the Credential Request. Credential types supported by the Credential Issuer are specified in the credential_configurations_supported map in the Credential Issuer Metadata",
                "items": {
                  "type": "string",
                  "example": "PersonIdentificationData"
                }
              }
            }
          },
          "format": {
            "type": "string",
            "description": "Format of the Credentials to be issued. This MUST be 'vc+sd-jwt'",
            "example": "vc+sd-jwt"
          },
          "proof": {
            "type": "object",
            "description": "Object containing proof of possession of the key material the issued Credentials shall be bound to",
            "properties": {
              "proof_type": {
                "type": "object",
                "properties": {
                  "proof_type": {
                    "type": "string",
                    "description": "String denoting the proof type. It MUST be 'jwt'",
                    "example": "jwt"
                  },
                  "jwt": {
                    "type": "string",
                    "description": "The base64url encoded SHA-256 thumprint of the JWT proof public key (in JWK format); the claim 'jwk' of the credential MUST be set to this thumprint for bounding the Credential to the JWT proof public key",
                    "example": "eyJraWQiOiJkaWQ6ZXhhbXBsZTplYm"
                  }
                }
              }
            }
          }
        },
        "required": [
          "credential_definition",
          "format",
          "proof"
        ]
      },
      "CredentialResponse": {
        "type": "object",
        "properties": {
          "credential": {
            "type": "object",
            "description": "The Credential",
            "properties": {
              "type": {
                "type": "array",
                "description": "Array containing the credential type values the Wallet requests in the Credential Request",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "format": {
            "type": "string",
            "description": "Format of the Credentials issued. This MUST be 'vc+sd-jwt'"
          },
          "c_nonce": {
            "type": "string",
            "description": "String containing a nonce value to be used to create a proof of possession of key material when requesting a further Credential or for the renewal of a credential"
          },
          "c_nonce_expires_in": {
            "type": "integer",
            "format": "int32",
            "description": "Integer, it represents the lifetime in seconds of the c_nonce"
          }
        },
        "required": [
          "credential",
          "format",
          "c_nonce",
          "c_nonce_expires_in"
        ]
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "The error code",
            "example": "invalid_proof"
          },
          "error_description": {
            "type": "string",
            "description": "Text in human-readable form providing further details to clarify the nature of the error encountered",
            "example": "The proof field is not present or the provided key proof is invalid or not bound to a nonce provided by the Credential Issuer."
          }
        },
        "required": [
          "error"
        ]
      },
      "ErrorResponse_429": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "The error code",
            "example": "too_many_requests"
          },
          "error_description": {
            "type": "string",
            "description": "Text in human-readable form providing further details to clarify the nature of the error encountered",
            "example": "If the number of requests from a client during a particular time period exceeds the number the authorization server allows, the authorization server responds with an HTTP 429 (Too Many Requests) status code."
          }
        },
        "required": [
          "error"
        ]
      },
      "ErrorResponse_413": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "The error code",
            "example": "payload_too_large"
          },
          "error_description": {
            "type": "string",
            "description": "Text in human-readable form providing further details to clarify the nature of the error encountered",
            "example": "If the request size was beyond the upper bound that the authorization server allows, the authorization server responds with an HTTP 413 (Payload Too Large) status code."
          }
        },
        "required": [
          "error"
        ]
      },
      "ErrorResponse_405": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "The error code",
            "example": "method_not-allowed"
          },
          "error_description": {
            "type": "string",
            "description": "Text in human-readable form providing further details to clarify the nature of the error encountered",
            "example": "If the request did not use the POST method, the authorization server responds with an HTTP 405 (Method Not Allowed) status code"
          }
        },
        "required": [
          "error"
        ]
      },
      "ErrorResponse_400": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "The error code",
            "example": "invalid_request"
          },
          "error_description": {
            "type": "string",
            "description": "Text in human-readable form providing further details to clarify the nature of the error encountered",
            "example": "The redirect_uri is not valid for the given client"
          }
        },
        "required": [
          "error"
        ]
      }
    }
  }
}