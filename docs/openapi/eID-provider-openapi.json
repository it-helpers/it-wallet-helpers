{
  "openapi": "3.0.2",
  "info": {
    "title": "IT Wallet API",
    "version": "0.6.0",
    "description": "API for the Italian EUDI Wallet implementation profile (version: '0.6.0') <a target=\"blank\" href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/\">https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/</a>"
  },
  "servers": [
    {
      "url": "https://api.server.test/it-wallet-api/v0.6.0",
      "description": "Main (production) server"
    }
  ],
  "paths": {
    "/as/par": {
      "post": {
        "summary": "Starts authorization flow for the Wallet",
        "tags": [
          "Credential Issuance Flow"
        ],
        "operationId": "parRequest",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ParRequest"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The error code",
                      "example": "invalid_request"
                    },
                    "error_description": {
                      "type": "string",
                      "description": "Text in human-readable form providing further details to clarify the nature of the error encountered",
                      "example": "The redirect_uri is not valid for the given client"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The error code",
                      "example": "method_not-allowed"
                    },
                    "error_description": {
                      "type": "string",
                      "description": "Text in human-readable form providing further details to clarify the nature of the error encountered",
                      "example": "If the request did not use the POST method, the authorization server responds with an HTTP 405 (Method Not Allowed) status code"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The error code",
                      "example": "payload_too_large"
                    },
                    "error_description": {
                      "type": "string",
                      "description": "Text in human-readable form providing further details to clarify the nature of the error encountered",
                      "example": "If the request size was beyond the upper bound that the authorization server allows, the authorization server responds with an HTTP 413 (Payload Too Large) status code."
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The error code",
                      "example": "too_many_requests"
                    },
                    "error_description": {
                      "type": "string",
                      "description": "Text in human-readable form providing further details to clarify the nature of the error encountered",
                      "example": "If the number of requests from a client during a particular time period exceeds the number the authorization server allows, the authorization server responds with an HTTP 429 (Too Many Requests) status code."
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "Unexpected error."
          }
        }
      }
    },
    "/authorize": {
      "get": {
        "summary": "Issuing authorization code to the Wallet",
        "tags": [
          "Credential Issuance Flow"
        ],
        "operationId": "authorize",
        "parameters": [
          {
            "name": "jwt_user",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "jwt (<base64-encoded header>.<base64-encoded claims>.<base64-encoded signature>)",
              "pattern": "^[A-Za-z0-9_-]{2,}(?:\\.[A-Za-z0-9_-]{2,}){2}$"
            },
            "description": "A signed JWT that includes claims regarding the authentication of the user by a Service Provider (SP) or a Relay Party (RP) (<a target=\"blank\" href=\"https://github.com/it-helpers/it-wallet-helpers/blob/0.6.0/docs/schema/jwt_wte.json\">View the JSON schema</a>)"
          },
          {
            "name": "state",
            "in": "cookie",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "It MUST be set to the same value of the 'state' parameter in the PAR Request, in URL-encoded format",
            "example": "fyZiOL9Lf2CeKuNT2JzxiLRDink0uPcd"
          },
          {
            "name": "client_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "It MUST be set to the same value in the PAR Request (in URL-encoded format)",
            "allowEmptyValue": true,
            "example": "AxjAnj0t5qpRVgR6apZ7gChaPb6y8gNm7CkPd58PD4c"
          },
          {
            "name": "request_uri",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "It MUST be set to the same value as obtained by PAR Response (in URL-encoded format)",
            "allowEmptyValue": true,
            "example": "urn%3ietf%3params%3oauth%3request_uri%3bwc4JK-ESC0w8acc191e-Y1LTC2"
          },
          {
            "name": "idphint",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The identifier of the hinted Identity Provider ID (in URL-encoded format)",
            "allowEmptyValue": true,
            "example": "https%3A%2F%2Fidp.example.org"
          }
        ],
        "responses": {
          "302": {
            "description": "Found",
            "headers": {
              "Location": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "The Location response header indicates the URL to redirect the Wallet Instance to. This URL present in query string the authorization code generated by the authorization server (parameter 'code') and the same 'state' and 'iss' parameters were present in the PAR Request (in URL-encoded format). If the request fails due to a missing, invalid, or mismatching redirection URI, or if the client  identifier is missing or invalid, the authorization server MUST NOT automatically redirect the  user-agent to the invalid redirection URI. If the authorization server denies the access request or  if the request fails for reasons other than a missing or invalid redirection URI, the authorization  server informs the client by adding the error parameter (in URL-encoded format) and  the error_description parameter (in URL-encoded format) to the query component of the redirection URI  ([RFC 6749#section-4.1.2.1] https://datatracker.ietf.org/doc/html/rfc6749.html#section-4.1.2.1)",
                "examples": {
                  "302_After_Authentication_Flow": {
                    "description": "Redirect URI at the end of the authentication flow",
                    "value": "https://start.wallet.example.org?code=SplxlOBeZQQYbYS6WxSbIA&state=fyZiOL9Lf2CeKuNT2JzxiLRDink0uPcd&iss=https%3A%2F%2Fpid-provider.example.org"
                  },
                  "302_Authentication_Request_Invalid": {
                    "description": "Redirect URI in  the end of the authentication flow",
                    "value": "https://start.wallet.example.org?error=server_error&error_description=The%20authorization%20server%20encountered%20an%20unexpected%20condition%20that%20prevented%20it%20from%20fulfilling%20the%20request%20response_type%20value&state=fyZiOL9Lf2CeKuNT2JzxiLRDink0uPcd&iss=https%3A%2F%2Fpid-provider.example.org"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/token": {
      "post": {
        "summary": "Issuing access token to the Wallet",
        "description": "1. <b>Client</b> generates a public/private key pair for use with DPoP; \n 2. <b>Client</b> creates a DPoP proof JWT for the /token endpoint of the authorizatiuon server adding the DPoP public key in the JWT header and signs the JWT with the DPoP private key, according to Section 4.2 of the DPoP specification (RFC 9449); \n 3. <b>Client</b> sends a request to the /token endpoint of the authorization server for issuing an access token bounded to the public key of the DPoP proof presented in the DPoP HTTP header of the request; \n 4. The <b>authorization server</b> must validate the token request and the DPoP proof JWT in the DPoP HTTP header according to Section 4.3 of the DPoP specifications (RFC 9449); \n 5. The <b>authorization server</b> extracts WTE from the token request and control is equal to the WTE received previously within the PAR Request; \n 6. The <b>authorization server</b> generates an <u>access token</u> bounded to the public key of the DPoP proof JWT, according to the <a target=\"blank\" href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#access-token\">EUDI IT Wallet specification</a> (the issued DPoP-bounded access token represents the client's authorization to access to the /credential endpoint of the credential issuer for issuing a verifiable credential of type 'PersonIdentificationData'); \n 7. The <b>authorization server</b> creates a string containg a <u>nonce</u> value to be used to create a proof of possession of private key material when requesting a Credential (the nonce can be used only once and has a limited lifetime); \n 8. The <b>authorization server</b> sends the response containing the <u>DPoP-bounded access token</u>, <u>authorized verifiable credential types</u> with the DPoP-bound Access Token, the <u>nonce</u> and the <u>nonce expires time</u>",
        "tags": [
          "Credential Issuance Flow"
        ],
        "operationId": "tokenRequest",
        "parameters": [
          {
            "in": "header",
            "name": "DPoP",
            "schema": {
              "type": "string",
              "format": "jwt (<base64-encoded header>.<base64-encoded claims>.<base64-encoded signature>)",
              "pattern": "^[A-Za-z0-9_-]{2,}(?:\\.[A-Za-z0-9_-]{2,}){2}$"
            },
            "description": "The DPoP proof JWT (in signed JWT format) presented in the request to the /token endpoint of the authorization server for issuing an access token bounded to the public key specified within the JWK header of the DPoP proof JWT. The issued DPoP-bounded access token represents the client's authorization to access to the /credential endpoint of the credential issuer for issuing a verifiable credential of type 'PersonIdentificationData'.</br></br> Header is a JSON object with this <a target=\"blank\" href=\"https://raw.githubusercontent.com/it-helpers/it-wallet-helpers/0.6.0/docs/schema/jwt_dpop_header.json\">JSON schema</a> </br></br> Payload is a JSON object with this <a target=\"blank\" href=\"https://raw.githubusercontent.com/it-helpers/it-wallet-helpers/0.6.0/docs/schema/jwt_dpop_token_endpoint.json\">JSON schema</a>",
            "example": "eyJ0eXAiOiJkcG9wK2p3dCIsImFsZyI6IkVTMjU2IiwiandrIjp7Imt0eSI6IkVDIiwieCI6IjM1bHZDOHV6MlFyV3BRSjNUVUg4dDlvOURVUk1wN3lkVTUxOFJLRGwyMGsiLCJ5IjoiSThCdVhCMmJ2eGVsekpBZDdPS2hkLVp3akNzdDA1Rng0N01iXzB1Z3JvcyIsImNydiI6IlAtMjU2In19.eyJqdGkiOiJlMWozVl9iS2ljOC1MQUVBIiwiaHRtIjoiUE9TVCIsImh0dSI6Imh0dHBzOi8vaXQtd2FsbGV0LWVpZC1wcm92aWRlci5leGFtcGxlLml0L3Rva2VuIiwiaWF0IjoxNzEwMzQ2MzQzfQ.mIDdPx1KjBnitErOYJjvzr5EYjl8dRQlzAT30e0mhk8NZZCwAMfktzcyb1_IuEywi_VMbrWTp1gFOAxJv_uaJQ"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TokenRequest"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The error code",
                      "example": "invalid_client"
                    },
                    "error_description": {
                      "type": "string",
                      "description": "Text in human-readable form providing further details to clarify the nature of the error encountered",
                      "example": "Client authentication failed"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "Unexpected error."
          }
        }
      }
    },
    "/credential": {
      "post": {
        "summary": "Issuing eID Credential to the Wallet",
        "description": "1. <b>Client</b> validates the token response received from the /token endpoint of the authotization server; \n 2. <b>Client</b> extras the DPoP-bounded access token, the nonce and the nonce expires time from the token response; validates the DPoP-bound access token and controls nonce expires time; \n 3. <b>Client</b> creates a <u>JWT proof</u> for the /credential endpoint of the credential issuer adding the nonce in the payload, the DPoP public key in the JWT header and signs the JWT with the DPoP private key, according to the <a target=\"blank\" href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#credential-request\">EUDI IT Wallet specification</a>; \n 4. <b>Client</b> creates a <u>DPoP proof JWT</u> for the /credential endpoint of the credential issuer adding the DPoP public key in the JWT header and signs the JWT with the DPoP private key, according to Section 4.2 of the DPoP specification (RFC 9449); \n 5. <b>Client</b> sends a request to the /credential endpoint of the credential issuer for issuing a verifiable credential of type 'PersonIdentificationData' bounded to the public key of the <u>JWT proof</u> presented in the request body with the <u>type 'PersonIdentificationData'</u> and the <u>format 'vc+sd-jwt'</u>; the credential request includes in the Authorization HTTP header the <u>DPoP-bounded access token</u> and contains in the DPoP HTTP header the <u>DPoP proof JWT</u> as proof of possession of the access token sign private key; \n 6. The <b>credential issuer</b> must validate the credential request received, verify the DPoP-bounded access token in the Authorization HTTP header and the DPoP proof JWT in the DPoP HTTP header according to Section 4.3 of the DPoP specifications (RFC 9449); it must also control that the public key of the DPoP proof JWT matches the public key that the access token is bound to (it provides additional assurance about the legitimacy of the client to present the access token) \n 7. The <b>credential issuer</b> extracts JWT proof from the credential request and checks its validity, then controls if the nonce inside the JWT proof is equal to the nonce sent previously to the Client within the Token Response and verifies the nonce expiration; \n 8. The <b>authorization server</b> generates the <u>verifiable credential</u> requested bounded to the public key of the JWT proof, according to the <a target=\"blank\" href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-data-model.html#id1\">EUDI IT Wallet specification</a> and the <a target=\"blank\" href=\"https://www.ietf.org/archive/id/draft-ietf-oauth-sd-jwt-vc-02.html\">SD-JWT-based Verifiable Credentials (SD-JWT VC) specification</a> (type 'PersonIdentificationData' and format 'vc+sd-jw'); \n 8. The <b>authorization server</b> creates a string containg a nonce value to be used to create a new JWT proof for the /credential endpoint of the credential issuer when requesting a new verifiable credential of type 'PersonIdentificationData' with the same DPoP-bounded access token (the nonce can be used only once and has a limited lifetime); \n 9. The authorization server sends the response containing the DPoP-bounded access token, the authorizations grainted with the DPoP-bound Access Tokent, the nonce and the nonce expires time",
        "operationId": "credentialRequest",
        "tags": [
          "Credential Issuance Flow"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string",
              "format": "jwt (<base64-encoded header>.<base64-encoded claims>.<base64-encoded signature>)",
              "pattern": "^[A-Za-z0-9_-]{2,}(?:\\.[A-Za-z0-9_-]{2,}){2}$"
            },
            "description": "The DPoP-bound access token (in signed JWT format) presented in the request to the /credential endpoint of the credential issuer for issuing a verifiable credential of type 'PersonIdentificationData'. The access token represents the client's authorization to access to the /credential endpoint of the credential issuer for issuing a verifiable credential of type 'PersonIdentificationData'.</br></br> Header is a JSON object with this <a target=\"blank\" href=\"https://raw.githubusercontent.com/it-helpers/it-wallet-helpers/0.6.0/docs/schema/jwt_dpop_header.json\">JSON schema</a> </br></br> Payload is a JSON object with this <a target=\"blank\" href=\"https://raw.githubusercontent.com/it-helpers/it-wallet-helpers/0.6.0/docs/schema/jwt_dpop_credential_endpoint.json\">JSON schema</a>",
            "example": "DPoP eyJ0eXAiOiJkcG9wK2p3dCIsImFsZyI6IkVTMjU2Iiwia2lkIjoiY3o2dXM2cHdsYmswYTNxNnNjZHc4M3gifQ.eyJqdGkiOiItQndDM0VTYzZhY2MybFRjIiwiaXNzIjoiaHR0cHM6Ly9pdC13YWxsZXQtZWlkLXByb3ZpZGVyLmV4YW1wbGUuaXQvdG9rZW4iLCJzdWIiOiJOemJMc1hoOHVEQ2NkN25vV1hGWkFmSGt4WnNSR0M5WHMiLCJhdWQiOiJodHRwczovL2l0LXdhbGxldC1laWQtcHJvdmlkZXIuZXhhbXBsZS5pdC9jcmVkZW50aWFsIiwiaWF0IjoxNzExNDAzNDMyLCJleHAiOjE3MTE0MDQwMzIsImprdCI6ImtRTVUxM05ydmljMkQ5SUdwMnQtUGhMZmlIR0VGRzVST0VJSWV5dWU3Tk0ifQ.9qrEiuuKa490FT3JyJy9hqnjopVkZM98q59blR0Q24NdTE2VVTDQIvjoJE3thYLN8Vqe_dI2-I1V31wK_W_JQQ"
          },
          {
            "in": "header",
            "name": "DPoP",
            "schema": {
              "type": "string",
              "format": "jwt (<base64-encoded header>.<base64-encoded claims>.<base64-encoded signature>)",
              "pattern": "^[A-Za-z0-9_-]{2,}(?:\\.[A-Za-z0-9_-]{2,}){2}$"
            },
            "description": "The DPoP proof JWT (in signed JWT format) presented with the access token in the request to the /credential endpoint of the credential issuer as proof possession of the access token sign private key.</br></br> Header is a JSON object with this <a target=\"blank\" href=\"https://raw.githubusercontent.com/it-helpers/it-wallet-helpers/0.6.0/docs/schema/jwt_dpop_header.json\">JSON schema</a> </br></br> Payload is a JSON object with this <a target=\"blank\" href=\"https://raw.githubusercontent.com/it-helpers/it-wallet-helpers/0.6.0/docs/schema/jwt_dpop_credential_endpoint.json\">JSON schema</a>",
            "example": "eyJ0eXAiOiJkcG9wK2p3dCIsImFsZyI6IkVTMjU2IiwiandrIjp7Imt0eSI6IkVDIiwieCI6IjM1bHZDOHV6MlFyV3BRSjNUVUg4dDlvOURVUk1wN3lkVTUxOFJLRGwyMGsiLCJ5IjoiSThCdVhCMmJ2eGVsekpBZDdPS2hkLVp3akNzdDA1Rng0N01iXzB1Z3JvcyIsImNydiI6IlAtMjU2In19.eyJqdGkiOiJlMWozVl9iS2ljOC1MQUVCIiwiaHRtIjoiUE9TVCIsImh0dSI6Imh0dHBzOi8vaXQtd2FsbGV0LWVpZC1wcm92aWRlci5leGFtcGxlLml0L2NyZWRlbnRpYWwiLCJpYXQiOjE3MTAzNDYzNDMsImF0aCI6ImZVSHlPMnIyWjNEWjUzRXNOcldCYjB4V1hvYU55NTlJaUtDQXFrc21RRW8ifQ.vnMKJBR2HB0CmWdrag6lt6aNRtN8BVvXiBoENFiqKlgXK7LFKz75WRza69Z9YhAd9yxAj2lKHlBGAulOG_IcMg"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CredentialRequest"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "5XX": {
            "description": "Unexpected error."
          }
        }
      }
    },
    "/.well-know/openid-federation": {
      "get": {
        "summary": "Retrieve Entity Configuration of eID Provider.",
        "tags": [
          "Credential Issuance Flow"
        ],
        "operationId": "federationEntityConfigurationRequest",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/entity-statement+jwt": {
                "schema": {
                  "type": "string",
                  "description": "Metadata that an Entity publishes about itself (in signed JWT format), verifiable with a trusted third party (Superior Entity). It's called Entity Configuration. (<a target=\"blank\" href=\"https://github.com/it-helpers/it-wallet-helpers/blob/0.6.0/docs/schema/jwt_entity-configuration_eid_provider.json\">View the JSON schema</a>).",
                  "format": "jwt (<base64-encoded header>.<base64-encoded claims>.<base64-encoded signature>)",
                  "pattern": "^[A-Za-z0-9_-]{2,}(?:\\.[A-Za-z0-9_-]{2,}){2}$",
                  "example": "eyJhbGciOiJFUzI1NiIsImtpZCI6IkZBTkZTM1luQzl0amlDYWl2aFdMVlVKM0F4d0dHel85OHVSRmFxTUVFcyIsInR5cCI6ImVudGl0eS1zdGF0ZW1lbnQrand0In0.eyJleHAiOiIxNjQ5NjEwMjQ5IiwiaWF0IjoiMTY0OTQzNzQ0OSIsImlzcyI6Imh0dHBzOi8vaXQtd2FsbGV0LWVpZC1wcm92aWRlci5leGFtcGxlLml0Iiwic3ViIjoiaHR0cHM6Ly9pdC13YWxsZXQtZWlkLXByb3ZpZGVyLmV4YW1wbGUuaXQiLCJqd2tzIjp7ImtleXMiOlt7Imt0eSI6IlJTQSIsInVzZSI6InNpZyIsIm4iOiIxVGEtc0UgLi4uIiwiZSI6IkFRQUIiLCJraWQiOiJGQU5GUzNZbkM5dGppQ2FpdmhXTFZVSjNBeHdHR3pfOTh1UkZhcU1FRXMifV19LCJhdXRob3JpdHlfaGludHMiOlsiaHR0cHM6Ly9zdXBlcmlvci1lbnRpdHkuZXhhbXBsZS5vcmcvZmVkZXJhdGlvbiJdLCJtZXRhZGF0YSI6eyJmZWRlcmF0aW9uX2VudGl0eSI6eyJvcmdhbml6YXRpb25fbmFtZSI6IlBJRCBQcm92aWRlciBPcmdhbml6YXRpb24gRXhhbXBsZSIsImhvbWVwYWdlX3VyaSI6Imh0dHBzOi8vaXQtd2FsbGV0LWVpZC1wcm92aWRlci5leGFtcGxlLml0IiwicG9saWN5X3VyaSI6Imh0dHBzOi8vaXQtd2FsbGV0LWVpZC1wcm92aWRlci5leGFtcGxlLml0L3ByaXZhY3lfcG9saWN5IiwidG9zX3VyaSI6Imh0dHBzOi8vaXQtd2FsbGV0LWVpZC1wcm92aWRlci5leGFtcGxlLml0L2luZm9fcG9saWN5IiwibG9nb191cmkiOiJodHRwczovL2l0LXdhbGxldC1laWQtcHJvdmlkZXIuZXhhbXBsZS5pdC9sb2dvLnN2ZyIsImNvbnRhY3RzIjpbIm9wc0BwaWQtcHJvdmlkZXIuZXhhbXBsZS5vcmciXSwiZmVkZXJhdGlvbl9yZXNvbHZlX2VuZHBvaW50IjoiaHR0cHM6Ly9pdC13YWxsZXQtZWlkLXByb3ZpZGVyLmV4YW1wbGUuaXQvcmVzb2x2ZSJ9LCJvYXV0aF9hdXRob3JpemF0aW9uX3NlcnZlciI6eyJhdXRob3JpemF0aW9uX2VuZHBvaW50IjoiaHR0cHM6Ly9pdC13YWxsZXQtZWlkLXByb3ZpZGVyLmV4YW1wbGUuaXQvYXV0aG9yaXphdGlvbiIsInB1c2hlZF9hdXRob3JpemF0aW9uX3JlcXVlc3RfZW5kcG9pbnQiOiJodHRwczovL2l0LXdhbGxldC1laWQtcHJvdmlkZXIuZXhhbXBsZS5pdC9hcy9wYXIiLCJkcG9wX3NpZ25pbmdfYWxnX3ZhbHVlc19zdXBwb3J0ZWQiOlsiRVMyNTYiLCJFUzUxMiJdLCJ0b2tlbl9lbmRwb2ludCI6Imh0dHBzOi8vaXQtd2FsbGV0LWVpZC1wcm92aWRlci5leGFtcGxlLml0L3Rva2VuIiwiY2xpZW50X3JlZ2lzdHJhdGlvbl90eXBlc19zdXBwb3J0ZWQiOlsiYXV0b21hdGljIl0sImNvZGVfY2hhbGxlbmdlX21ldGhvZHNfc3VwcG9ydGVkIjpbIlMyNTYiXSwiYXV0aG9yaXphdGlvbl9kZXRhaWxzX3R5cGVzX3N1cHBvcnRlZCI6WyJvcGVuaWRfY3JlZGVudGlhbCJdLCJhY3JfdmFsdWVzX3N1cHBvcnRlZCI6WyJodHRwczovL3d3dy5zcGlkLmdvdi5pdC9TcGlkTDIiLCJodHRwczovL3d3dy5zcGlkLmdvdi5pdC9TcGlkTDMiXSwiZ3JhbnRfdHlwZXNfc3VwcG9ydGVkIjpbImF1dGhvcml6YXRpb25fY29kZSJdLCJpc3N1ZXIiOiJodHRwczovL2l0LXdhbGxldC1laWQtcHJvdmlkZXIuZXhhbXBsZS5pdCIsImp3a3MiOnsia2V5cyI6W3sia3R5IjoiRUMiLCJraWQiOiJGQU5GUzNZbkM5dGppQ2FpdmhXTFZVSjNBeHdHR3pfOTh1UkZhcU1FRXMifV19LCJzY29wZXNfc3VwcG9ydGVkIjpbIlBlcnNvbklkZW50aWZpY2F0aW9uRGF0YSJdLCJyZXF1ZXN0X3BhcmFtZXRlcl9zdXBwb3J0ZWQiOnRydWUsInJlcXVlc3RfdXJpX3BhcmFtZXRlcl9zdXBwb3J0ZWQiOmZhbHNlLCJyZXNwb25zZV90eXBlc19zdXBwb3J0ZWQiOlsiY29kZSJdLCJzdWJqZWN0X3R5cGVzX3N1cHBvcnRlZCI6WyJwYWlyd2lzZSJdLCJ0b2tlbl9lbmRwb2ludF9hdXRoX21ldGhvZHNfc3VwcG9ydGVkIjpbImF0dGVzdF9qd3RfY2xpZW50X2F1dGgiXSwidG9rZW5fZW5kcG9pbnRfYXV0aF9zaWduaW5nX2FsZ192YWx1ZXNfc3VwcG9ydGVkIjpbIkVTMjU2IiwiRVMzODQiLCJFUzUxMiJdLCJyZXF1ZXN0X29iamVjdF9zaWduaW5nX2FsZ192YWx1ZXNfc3VwcG9ydGVkIjpbIkVTMjU2IiwiRVMzODQiLCJFUzUxMiJdfSwib3BlbmlkX2NyZWRlbnRpYWxfaXNzdWVyIjp7ImNyZWRlbnRpYWxfaXNzdWVyIjoiaHR0cHM6Ly9pdC13YWxsZXQtZWlkLXByb3ZpZGVyLmV4YW1wbGUuaXQiLCJjcmVkZW50aWFsX2VuZHBvaW50IjoiaHR0cHM6Ly9pdC13YWxsZXQtZWlkLXByb3ZpZGVyLmV4YW1wbGUuaXQvY3JlZGVudGlhbCIsInJldm9jYXRpb25fZW5kcG9pbnQiOiJodHRwczovL2l0LXdhbGxldC1laWQtcHJvdmlkZXIuZXhhbXBsZS5pdC9yZXZva2UiLCJzdGF0dXNfYXR0ZXN0YXRpb25fZW5kcG9pbnQiOiJodHRwczovL2l0LXdhbGxldC1laWQtcHJvdmlkZXIuZXhhbXBsZS5pdC9zdGF0dXMiLCJkaXNwbGF5IjpbeyJuYW1lIjoiUElEIFByb3ZpZGVyIEl0YWxpYW5vIGRpIGVzZW1waW8iLCJsb2NhbGUiOiJpdC1JVCJ9LHsibmFtZSI6IkV4YW1wbGUgUElEIFByb3ZpZGVyIiwibG9jYWxlIjoiZW4tVVMiLCJsb2dvIjp7InVybCI6Imh0dHBzOi8vaXQtd2FsbGV0LWVpZC1wcm92aWRlci5leGFtcGxlLml0L3B1YmxpYy9sb2dvLnN2ZyIsImFsdF90ZXh0IjoibG9nbyBkaSBxdWVzdG8gUElEIFByb3ZpZGVyIn19XSwiandrcyI6eyJrZXlzIjpbeyJjcnYiOiJQLTI1NiIsImt0eSI6IkVDIiwieCI6Im5ld0s1cURZTWVrckNQUE8teUVZVGRKVldKTVR6YXNNYXZ0MnZtMU1iLUEiLCJ5IjoiVml6WGFMTzZkemVlc1pQeGZwR1phYlRLM2NUWHRCVWJJaVFwbWlZUnRTRSIsImtpZCI6ImZmMGJkZWQwNDVmZTYzZmU1ZDFkNjRkZDgzYjU2N2UwIn1dfSwiY3JlZGVudGlhbF9jb25maWd1cmF0aW9uc19zdXBwb3J0ZWQiOlt7ImZvcm1hdCI6InZjK3NkLWp3dCIsImNyeXB0b2dyYXBoaWNfYmluZGluZ19tZXRob2RzX3N1cHBvcnRlZCI6WyJqd2siXSwiY3JlZGVudGlhbF9zaWduaW5nX2FsZ192YWx1ZXNfc3VwcG9ydGVkIjpbIkVTMjU2IiwiRVMzODQiLCJFUzUxMiJdLCJwcm9vZl90eXBlc19zdXBwb3J0ZWQiOnsiand0Ijp7InByb29mX3NpZ25pbmdfYWxnX3ZhbHVlc19zdXBwb3J0ZWQiOlsiRVMyNTYiXX19LCJkaXNwbGF5IjpbeyJuYW1lIjoiUElEIEl0YWxpYW5vIGRpIGVzZW1waW8iLCJsb2NhbGUiOiJpdC1JVCIsImxvZ28iOnsidXJsIjoiaHR0cHM6Ly9pdC13YWxsZXQtZWlkLXByb3ZpZGVyLmV4YW1wbGUuaXQvcHVibGljL2xvZ28uc3ZnIiwiYWx0X3RleHQiOiJsb2dvIGRpIHF1ZXN0YSBDcmVkZW56aWFsZSJ9LCJiYWNrZ3JvdW5kX2NvbG9yIjoiIzEyMTA3YyIsInRleHRfY29sb3IiOiIjRkZGRkZGIn0seyJuYW1lIjoiRXhhbXBsZSBJdGFsaWFuIFBJRCIsImxvY2FsZSI6ImVuLVVTIiwibG9nbyI6eyJ1cmwiOiJodHRwczovL2l0LXdhbGxldC1laWQtcHJvdmlkZXIuZXhhbXBsZS5pdC9wdWJsaWMvbG9nby5zdmciLCJhbHRfdGV4dCI6IlRoZSBsb2dvIG9mIHRoaXMgY3JlZGVudGlhbCJ9LCJiYWNrZ3JvdW5kX2NvbG9yIjoiIzEyMTA3YyIsInRleHRfY29sb3IiOiIjRkZGRkZGIn1dLCJjcmVkZW50aWFsX2RlZmluaXRpb24iOnsidHlwZSI6WyJQZXJzb25JZGVudGlmaWNhdGlvbkRhdGEiXSwidmVyaWZpY2F0aW9uIjp7InRydXN0X2ZyYW1ld29yayI6ImVpZGFzIiwiYXNzdXJhbmNlX2xldmVsIjoiaGlnaCIsImV2aWRlbmNlIjpbeyJ0eXBlIjoiZWxlY3Ryb25pY19yZWNvcmQiLCJyZWNvcmQiOnsidHlwZSI6Imh0dHBzOi8vZXVkaS53YWxsZXQuY2llLmdvdi5pdCIsInNvdXJjZSI6eyJvcmdhbml6YXRpb25fbmFtZSI6Ik1pbmlzdGVybyBkZWxsJ0ludGVybm8iLCJvcmdhbml6YXRpb25faWQiOiJ1cm46ZXVkaTppdDpvcmdhbml6YXRpb25faWQ6aXBhX2NvZGU6bV9pdCIsImNvdW50cnlfY29kZSI6IklUIn19fV19LCJjcmVkZW50aWFsU3ViamVjdCI6eyJnaXZlbl9uYW1lIjp7Im1hbmRhdG9yeSI6dHJ1ZSwiZGlzcGxheSI6W3sibmFtZSI6IkN1cnJlbnQgRmlyc3QgTmFtZSIsImxvY2FsZSI6ImVuLVVTIn0seyJuYW1lIjoiTm9tZSIsImxvY2FsZSI6Iml0LUlUIn1dfSwiZmFtaWx5X25hbWUiOnsibWFuZGF0b3J5Ijp0cnVlLCJkaXNwbGF5IjpbeyJuYW1lIjoiQ3VycmVudCBGYW1pbHkgTmFtZSIsImxvY2FsZSI6ImVuLVVTIn0seyJuYW1lIjoiQ29nbm9tZSIsImxvY2FsZSI6Iml0LUlUIn1dfSwiYmlydGhfZGF0ZSI6eyJtYW5kYXRvcnkiOnRydWUsImRpc3BsYXkiOlt7Im5hbWUiOiJEYXRlIG9mIEJpcnRoIiwibG9jYWxlIjoiZW4tVVMifSx7Im5hbWUiOiJEYXRhIGRpIE5hc2NpdGEiLCJsb2NhbGUiOiJpdC1JVCJ9XX0sInVuaXF1ZV9pZCI6eyJtYW5kYXRvcnkiOnRydWUsImRpc3BsYXkiOlt7Im5hbWUiOiJVbmlxdWUgSWRlbnRpZmllciIsImxvY2FsZSI6ImVuLVVTIn0seyJuYW1lIjoiSWRlbnRpZmljYXRpdm8gdW5pdm9jbyIsImxvY2FsZSI6Iml0LUlUIn1dfSwidGF4X2lkX2NvZGUiOnsibWFuZGF0b3J5Ijp0cnVlLCJkaXNwbGF5IjpbeyJuYW1lIjoiVGF4IElkIE51bWJlciIsImxvY2FsZSI6ImVuLVVTIn0seyJuYW1lIjoiQ29kaWNlIEZpc2NhbGUiLCJsb2NhbGUiOiJpdC1JVCJ9XX19fX1dfX19.h-VsgOMMpnwTZNHcm5e_amXhBvqH4teRfh5CUT3WbRJb2fRIgQU6yBiGaZXFkcR1dYodQNqy3Ds4Hu15Yn6ZWg"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The error code",
                      "example": "federation_not_enabled"
                    },
                    "error_description": {
                      "type": "string",
                      "description": "Text in human-readable form providing further details to clarify the nature of the error encountered",
                      "example": "OpenID Connect Federation 1.0 not enabled"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "Unexpected error."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ParRequest": {
        "type": "object",
        "description": "The par request",
        "properties": {
          "response_type": {
            "type": "string",
            "description": "MUST be set to 'code'",
            "example": "code"
          },
          "client_id": {
            "type": "string",
            "description": "MUST be set to the base64url encoded SHA-256 thumbprint of the public key specified inside the claim 'jwt' (in JWT format) of the cnf parameter of the Wallet Attestation JWT",
            "example": "AxjAnj0t5qpRVgR6apZ7gChaPb6y8gNm7CkPd58PD4c"
          },
          "code_challenge": {
            "type": "string",
            "description": "A challenge derived from the code verifier that is sent in the authorization request",
            "example": "E9Melhoa2OwvFrEMTJguCHaoeK1t8URWbuGJSstw-cM"
          },
          "code_challenge_method": {
            "type": "string",
            "description": "A method that was used to derive code challenge. It MUST be set to 'S256'",
            "example": "S256"
          },
          "request": {
            "type": "string",
            "description": "It MUST be a signed JWT (<a target=\"blank\" href=\"https://github.com/it-helpers/it-wallet-helpers/blob/0.6.0/docs/schema/jwt_request_object.json\">View the JSON schema</a>). The private key corresponding to the public one in the cnf parameter inside the Wallet Attestation JWT MUST be used for signing the Request Object",
            "format": "jwt (<base64-encoded header>.<base64-encoded claims>.<base64-encoded signature>)",
            "pattern": "^[A-Za-z0-9_-]{2,}(?:\\.[A-Za-z0-9_-]{2,}){2}$",
            "example": "$SIGNED-JWT"
          },
          "client_assertion_type": {
            "type": "string",
            "description": "It MUST be set to 'urn:ietf:params:oauth:client-assertion-type:jwt-client-attestation' (in URL-encoded format)",
            "example": "urn%3Aietf%3Aparams%3Aoauth%3Aclient-assertion-type%3Ajwt-client-attestation"
          },
          "client_assertion": {
            "type": "string",
            "description": "It MUST be set to a value containing the Wallet Attestation (in signed JWT format) and the Proof of Possession of the Wallet Attestation (in signed JWT format) separated with the ~ character",
            "example": "$WIA~WIA-PoP"
          }
        },
        "required": [
          "response_type",
          "client_id",
          "code_challenge",
          "code_challenge_method",
          "request",
          "client_assertion_type",
          "client_assertion"
        ]
      },
      "ParResponse": {
        "type": "object",
        "description": "The par response",
        "properties": {
          "request_uri": {
            "type": "string",
            "description": "The request URI corresponding to the authorization request posted. This URI MUST be a single-use reference to the respective authorization request. It MUST contain some part generated using a cryptographically strong pseudorandom algorithm. The value format MUST be urn:ietf:params:oauth:request_uri:<reference-value> with <reference-value> as the random part of the URI that references the respective authorization request data",
            "example": "urn:ietf:params:oauth:request_uri:bwc4JK-ESC0w8acc191e-Y1LTC2"
          },
          "expires_in": {
            "type": "integer",
            "format": "int32",
            "description": "Integer, it represents the lifetime in seconds of the request URI",
            "example": 60
          }
        },
        "required": [
          "request_uri",
          "expires_in"
        ]
      },
      "TokenRequest": {
        "type": "object",
        "description": "The token request",
        "properties": {
          "grant_type": {
            "type": "string",
            "description": "MUST be set to 'authorization_code'",
            "example": "authorization_code"
          },
          "code": {
            "type": "string",
            "description": "The authorization code returned in the Authorization Response",
            "example": "SplxlOBeZQQYbYS6WxSbIA"
          },
          "redirect_uri": {
            "type": "string",
            "description": "It MUST be set as the Request Objectredirect_uri claim of the PAR Request",
            "example": "https://start.wallet.example.org/cb"
          },
          "code_verifier": {
            "type": "string",
            "description": "Verification code of the code_challenge of the PAR Request",
            "example": "dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk"
          },
          "client_assertion_type": {
            "type": "string",
            "description": "It MUST be set to 'urn:ietf:params:oauth:client-assertion-type:jwt-client-attestation' (in URL-encoded format)",
            "example": "urn%3Aietf%3Aparams%3Aoauth%3Aclient-assertion-type%3Ajwt-client-attestation"
          },
          "client_assertion": {
            "type": "string",
            "description": "It MUST be set to a value containing the Wallet Attestation (in signed JWT format) and the Proof of Possession of the Wallet Attestation (in signed JWT format) separated with the ~ character",
            "example": "$WIA~WIA-PoP"
          }
        },
        "required": [
          "grant_type",
          "code",
          "redirect_uri",
          "code_verifier",
          "c_nonce_expires_in",
          "client_assertion_type",
          "client_assertion"
        ]
      },
      "TokenResponse": {
        "type": "object",
        "description": "The token response",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "The DPoP-bound Access Token (in signed JWT format) allows accessing the PID/(Q)EAA Credential Endpoint for obtaining Credentials specified in the PAR Request",
            "format": "jwt (<base64-encoded header>.<base64-encoded claims>.<base64-encoded signature>)",
            "pattern": "^([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_=]+)$",
            "example": "eyJhbGciOiJFUzI1NiJ9.eyJzdWIiOiJzdWJfcGFpcndpc2UiLCJhdWQiOiJodHRwczovL3VhdC5ldWRpLXdhbGxldC1pdC1xZWFhLWlzc3Vlci5kZW1vLmlwenMuaXQvdG9rZW4iLCJqa3QiOiJrUU1VMTNOcnZpYzJEOUlHcDJ0LVBoTGZpSEdFRkc1Uk9FSUlleXVlN05NIiwiZXhwIjoxNzA1NTczNjU1LCJpYXQiOjE3MDU1NzAwNTUsIm5vbmNlIjoidHNfRXRVUXMwaWVpSVMxTllOQkhFUVNveTNjdDRncHktNEZaS3dIaWxrWSIsImp0aSI6ImY4NTU1Y2ViLWM2NWMtNDAyNS05Mzc4LWI2NjcyYjYxNDlhZiIsImNsaWVudF9pZCI6Imh0dHBzOi8vdWF0LmV1ZGktd2FsbGV0LWl0LXFlYWEtaXNzdWVyLmRlbW8uaXB6cy5pdC90b2tlbiJ9.VyT25r23eO_ppWuw0ONV6GKjJFfvYtJKQSIngGwtyklmckhE3vg5U7Cws9V41GOU6F77MVifGfXf0l2HP3mW1Q"
          },
          "token_type": {
            "type": "string",
            "description": "Type of Access Token returned. It MUST be equal to 'DPoP'",
            "example": "DPoP"
          },
          "expires_in": {
            "type": "integer",
            "format": "int32",
            "description": "Expiry time of the Access Token in seconds",
            "example": 3600
          },
          "c_nonce": {
            "type": "string",
            "description": "String containing a nonce value to be used to create a proof of possession of Private key material when requesting a Credential",
            "example": "ts_EtUQs0ieiIS1NYNBHEQSoy3ct4gpy-4FZKwHilkY"
          },
          "c_nonce_expires_in": {
            "type": "integer",
            "format": "int32",
            "description": "Integer, it represents the lifetime in seconds of the c_nonce",
            "example": 86400
          },
          "authorization_details": {
            "type": "array",
            "description": "Array, used to identify the authorized Verifiable Credential types with the DPoP-bound Access Token",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "The authorization details type. It MUST be set to 'openid_credential'",
                  "example": "openid_credential"
                },
                "credential_configuration_id": {
                  "type": "string",
                  "description": "The unique identifier of the authorized Verifiable Credential type",
                  "example": "PersonIdentificationData"
                }
              },
              "required": [
                "type",
                "credential_configuration_id"
              ]
            }
          }
        },
        "required": [
          "access_token",
          "token_type",
          "expires_in",
          "c_nonce",
          "c_nonce_expires_in",
          "authorization_details"
        ]
      },
      "WellKnowResponse": {
        "type": "object",
        "description": "The well-known response",
        "properties": {
          "entity_configuration": {
            "type": "string",
            "description": "Metadata that an Entity publishes about itself (in signed JWT format), verifiable with a trusted third party (Superior Entity). It's called Entity Configuration. (<a target=\"blank\" href=\"https://github.com/it-helpers/it-wallet-helpers/blob/0.6.0/docs/schema/jwt_well_know_openid_federation.json\">View the JSON schema</a>).",
            "format": "jwt (<base64-encoded header>.<base64-encoded claims>.<base64-encoded signature>)",
            "pattern": "^[A-Za-z0-9_-]{2,}(?:\\.[A-Za-z0-9_-]{2,}){2}$",
            "example": "ewoKICAiYWxnIjogIkVTMjU2IiwKICAia2lkIjogIkZBTkZTM1luQzl0amlDYWl2aFdMVlVKM0F4d0dHel85OHVSRmFxTUVFcyIsCiAgInR5cCI6ICJlbnRpdHktc3RhdGVtZW50K2p3dCIKCn0..vnMKJBR2HB0CmWdrag6lt6aNRtN8BVvXiBoENFiqKlgXK7LFKz75WRza69Z9YhAd9yxAj2lKHlBGAulOG_IcMg"
          }
        },
        "required": [
          "response"
        ]
      },
      "CredentialRequest": {
        "type": "object",
        "description": "The credendential request",
        "required": [
          "credential_definition",
          "format",
          "proof"
        ],
        "properties": {
          "credential_definition": {
            "type": "object",
            "description": "JSON object containing the verifiable credential type requested",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "array",
                "description": "Array of one string, used to identify the verifiable credential type requested",
                "example": "[\"PersonIdentificationData\"]",
                "items": {
                  "type": "string",
                  "example": "PersonIdentificationData"
                }
              }
            }
          },
          "format": {
            "type": "string",
            "description": "Format of the verifiable credential type to be issued. This MUST be 'vc+sd-jwt' (selective disclosure JWT format)",
            "example": "vc+sd-jwt"
          },
          "proof": {
            "type": "object",         
            "description": "JSON object containing a reference to the public key specified inside the JWT proof (in JWK format) the issued Credentials shall be bound to",
            "required": [
              "proof_type",
              "jwt"
            ],
            "properties": {
              "proof_type": {
                "type": "string",
                "description": "String denoting the proof type. It MUST be 'jwt'",
                "example": "jwt"
              },
              "jwt": {
                "type": "string",
                "description": "The base64url encoded SHA-256 thumbprint of the public key specified inside the claim 'jwt' of the JWT proof (in JWK format) the issued Credentials shall be bound to",
                "example": "eyJraWQiOiJkaWQ6ZXhhbXBsZTplYm"
              }
            }
          }
        }
      },
      "CredentialResponse": {
        "type": "object",
        "description": "The credendential response",
        "properties": {
          "format": {
            "type": "string",
            "description": "Format of the verifiable credential issued. This MUST be 'vc+sd-jwt'",
            "example": "vc+sd-jwt"
          },
          "credential": {
            "type": "string",
            "format": "vc+sd-jwt",
            "description": "The verifiable credential (VC) issued in vc+sd-jwt format:<br/><base64-encoded-url(JWT header)>.<base64-encoded-url(JWT payload)>.<base64-encoded-url(JWT signature)>~<Disclosure 1>~[Disclosure 2]~...~[Disclosure N]<br/><br/>For each payload claim of the VC is to be made selectively disclosable, the issuer must create a Disclosure as follow:<ul><li>Create a JSOM array of 3 strings:</li><ul><li>A salt value base64url encoded;</li><li>The claim name as it would be used in a regular JWT payload;</li><li>The claim value as it would be used in a regular JWT payload.</li></ul><li>base64url encoded the JSON array, producing a string. This string is the Disclosure</li></ul>The following example illustrates the steps described above.<br/>The JSON array created is: [\"pZ5MRyOxpVWZuHLoJ-yjRg\", \"tax_id_code\", \"TINIT-XXXXXXXXXXXXXXXX\"]<br/>The resulting Disclosure would be: WyJwWjVNUnlPeHBWV1p1SExvSi15alJnIiwgInRheF9pZF9jb2RlIiwgIlRJTklULVhYWFhYWFhYWFhYWFhYWFgiXQ",
            "pattern": "^[A-Za-z0-9_-]{2,}(?:\\.[A-Za-z0-9_-]{2,}){2}(?:\\~[A-Za-z0-9_-]{2,})+$",
            "example": "ewogICAidHlwIjoidmMrc2Qtand0IiwKICAgImFsZyI6IkVTMjU2IiwKICAgImtpZCI6ImVOTi1nNWk2Q25MS2NsdFFCcDZhYmJpb0dNYnpNNm11VzN2dXh3NnVoODgiCn0.ewogICJfc2QiOiBbCiAgICAiN1dHNG5UNksyNl9SMzk3NXpjd25Wd2dvSEE3Yjk4OF8zLXZKemJaZjZZYyIsCiAgICAiTk94VnpqVUpnNjY3aUJkZUR3bXI2dFo0NlgtamNoS3dJVnhNQWZ2NDN5YyIsCiAgICAiVEsyUmd1UFlvWHpDeDB2djVoYk45dTVNMm1IbFdCdDQxcUdXbExYQ051OCIsCiAgICAiVUhDaHBHdE5GMmJqMUZ2QWZCYnkxcm5mN1dYa3hlbEZKNWE0dlNqMkZPNCIsCiAgICAicTZUcW54YXU5N3R1LU1xVURnMGZTQW1MR1pkU3VNVU1rNmEyczNiY3NDMCIsCiAgICAid3lmeFZxcTlCb3NQVDd0TjRTSE9JNEU0OFAxOWFWQTFrdFc1WmYwRS1mYyIKICBdLAogICJleHAiOiAxODgzMDAwMDAwLAogICJpc3MiOiAiaHR0cHM6Ly9waWRwcm92aWRlci5leGFtcGxlLm9yZyIsCiAgInN1YiI6ICJOemJMc1hoOHVEQ2NkN25vV1hGWkFmSGt4WnNSR0M5WHMiLAogICJzdGF0dXMiOiB7CiAgICAic3RhdHVzX2F0dGVzdGF0aW9uIjogewogICAgICAiY3JlZGVudGlhbF9oYXNoX2FsZyI6ICJzaGEtMjU2IgogICAgfQogIH0sCiAgInZjdCI6ICJQZXJzb25JZGVudGlmaWNhdGlvbkRhdGEiLAogICJfc2RfYWxnIjogInNoYS0yNTYiLAogICJjbmYiOiB7CiAgICAiandrIjogewogICAgICAia3R5IjogIkVDIiwKICAgICAgImNydiI6ICJQLTI1NiIsCiAgICAgICJ4IjogIlRDQUVSMTladnUzT0hGNGo0VzR2ZlNWb0hJUDFJTGlsRGxzN3ZDZUdlbWMiLAogICAgICAieSI6ICJaeGppV1diWk1RR0hWV0tWUTRoYlNJaXJzVmZ1ZWNDRTZ0NGpUOUYySFpRIgogICAgfQogIH0KfQ.MrbtZznuS3fnYugwMTFRi0AMTS5rKlLvqwbRRZWeqkA8EpSnEHtTUhA4bR-QF0sInThLeLFS5C4pVf414gy1UT-IS2vx0xksnXaUnMqIaPOF8ElRPTwUYI8tXeV8LM_wsmV61TtZadHOn6YHpju-jHEtMcD80ddwzJhSq4jig-lBVH_Ud-KWIKtN60SJ1uHxFar1Jdhoi6AlHI5u3nIzbmKG6a87qN00rqtcL2LE11IhDh3yg8XqbszqEaRftLtPl833_YD5t4tO0xiU25zq_TAWt5L_5ea7JjY6k-zzo-X2GEedRDRFSfmG6Nbk4ZvZ16ildG-pjiXLS6bpPQ1nvg~WyI1N212eWNUaDV5WkNyS0xaNXhuZlV3IiwgImlhdCIsIDE2ODMwMDAwMDBd~WyJrdWNyQm1sb19oTWFJRkY1ODVSemFRIiwgInVuaXF1ZV9pZCIsICJ4eHh4 eHh4eC14eHh4LXh4eHgteHh4eC14eHh4eHh4eHh4eHgiXQ~WyJOVE5Sb09pdVZWUnRGNkNFenRkOVp3IiwgImdpdmVuX25hbWUiLCAiTWFyaW8iXQ~WyJGRFNTUGdnekdCVXdRTEhEU0U2d1FRIiwgImZhbWlseV9uYW1lIiwgIlJvc3NpIl0~WyJLWjhlNXdWRXREdmIxemlTUEE0RHpBIiwgImJpcnRoX2RhdGUiLCAiMTk4MC0wMS0xMCJd~WyJwWjVNUnlPeHBWV1p1SExvSi15alJnIiwgInRheF9pZF9jb2RlIiwgIlRJTklULVhYWFhYWFhYWFhYWFhYWFgiXQ"
          },
          "c_nonce": {
            "type": "string",
            "description": "String containing a nonce value to be used to create a proof of possession of key material when requesting a further Credential",
            "example": "ts_EtUQs0ieiIS1NYNBHEQSoy3ct4gpy-4FZKwHilkY"
          },
          "c_nonce_expires_in": {
            "type": "integer",
            "format": "int32",
            "description": "Integer, it represents the lifetime in seconds of the c_nonce",
            "example": 86400
          }
        },
        "required": [
          "credential",
          "format",
          "c_nonce",
          "c_nonce_expires_in"
        ]
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "The error code",
            "example": "invalid_proof"
          },
          "error_description": {
            "type": "string",
            "description": "Text in human-readable form providing further details to clarify the nature of the error encountered",
            "example": "The proof field is not present or the provided key proof is invalid or not bound to a nonce provided by the Credential Issuer."
          }
        },
        "required": [
          "error"
        ]
      }
    }
  }
}