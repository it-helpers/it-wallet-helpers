{
  "openapi": "3.0.2",
  "info": {
    "title": "IT Wallet API",
    "version": "0.6.0",
    "description": "API for the Italian EUDI Wallet implementation profile (version: '0.6.0')  <a target=\"blank\" href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/\">https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/</a>"
  },
  "servers": [
    {
      "url": "https://api.server.test/it-wallet-api/v0.6.0",
      "description": "Main (production) server"
    }
  ],
  "paths": {
    "/as/par": {
      "post": {
        "summary": "Starts authorization flow for the Wallet",
        "tags": ["EAA Issuance Flow"],
        "operationId": "parRequest",
        "description": "<ol><li><b>Wallet Instance</b> have previously: <ul><li>obtained EAA Provider federation metadata (<a href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/trust.html#entity-configuration\">Entity Configuration</a>) that discloses the URL endpoints, public keys, algorithms supported, credential types supported, and any other parameter required for interoperability needs;</li><li>created a PKCE code verifier and its challenge (SHA256) for the Pushed Authorization Request (<a href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#pushed-authorization-request-par-request\">PAR Request</a>) to send to this endpoint;</li><li>created a <a href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#pushed-authorization-request-par-request\">PAR Request</a> for starting an authorzation flow to obtain an access token that authorize to access to the /credendential endpoint for requestinf an EAA credential.</li></ul></li><li><b>Wallet Instance</b> sends a <a href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#pushed-authorization-request-par-request\">PAR Request</a> to this endpoint</li><li><b>Authorization Server</b> validates <a href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#pushed-authorization-request-par-request\">PAR Request</a> received;</li> <li><b>Authorization Server</b> extracts the identifier of the Wallet Instance (<i>client_id</i>), the Wallet Instance side application session (<i>state</i>), the <a href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/wallet-attestation.html#id1\"><i>WTE</i></a> and its proof of possession (<i>WTE-PoP</i>), validates and storing them in the local database along with the PAR Request using the <i>state</i> as key; </li> <li><b>Authorization Server</b> extracts from the <a href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/wallet-attestation.html#id1\">WTE</a> of the Wallet Provider's identifier that issued the Wallet Instance (claim iss) and uses it to verify the presence in the local database of a valid trust chain related to the Wallet Provider (in case of absence it starts a federation flow that provides for building the Wallet Provider's trust chain and storing it in the local database by associating it with the <a href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#pushed-authorization-request-par-request\">PAR Request</a>);</li> <li><b>Authorization Server</b> validates the signature of the <a href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/wallet-attestation.html#id1\">WTE</a> using the Wallet Provider's federation public key contained in the Wallet Provider's <a href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/trust.html#entity-configuration\">Entity Configuration</a> retrieved from its trust chain; the identifier of this public key (specified into the claim <i>kid</i>) must match exactly the claim <i>kid</i> specified in the <a href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/wallet-attestation.html#id1\">WTE</a> header;</li> <li><b>Authorization Server</b> verifies that the Wallet Instance is the rightful owner of the submitted <a href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/wallet-attestation.html#id1\">WTE</a> by going to validate the signature of the WTE-PoP and checking if the public key of the Wallet Instance to which the <a href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/wallet-attestation.html#id1\">WTE</a> is bound (contained into the WTE claim <i>cnf</i>) is the same public key referenced by the claim <i>kid</i> of the WTE-DPoP header;</li> <li><b>Authorization Server</b> extracts the JWT request object from the <a href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#pushed-authorization-request-par-request\">PAR Request</a> (claim <i>request</i>) and verifies its signature using the public key of the Wallet Instance to which the <a href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/wallet-attestation.html#id1\">WTE</a> is bound (contained into the <a href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/wallet-attestation.html#id1\">WTE</a> claim <i>cnf</i>);</li> <li><b>Authorization Server</b> generates a time-limited disposable request uri that identifies the <a href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#pushed-authorization-request-par-request\">PAR Request</a> within the Authorization Server (e.g., SHA1 hash of the PAR Request) and creates a <a href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#pushed-authorization-request-par-response\">PAR Response</a> that encapsulates that URI (claim <i>request_uri</i>) and its validity interval (claim <i>request_uri_expires_in</i>);</li> <li><b>Authorization Server</b> stores the <i>identifier of the Wallet Provider</i>, <i>request_uri</i>, <i>request_uri_expires_in</i> and <a href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#pushed-authorization-request-par-response\"><i>PAR Response</i></a> in local database by associating them with the previously saved <a href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#pushed-authorization-request-par-request\"><i>PAR Request</i></a></li> <li><b>Authorization Server</b> sends <a href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#pushed-authorization-request-par-response\">PAR Request</a> to the Client.</li></ol>",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ParRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_405"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_413"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "5XX": {
            "description": "Unexpected error."
          }
        }
      }
    },
    "/authorize": {
      "get": {
        "tags": ["EAA Issuance Flow"],
        "summary": "Issuing an authorization code to the Wallet Instance",
        "description": "<ol><li><b>Wallet Instance</b> opens its web view and sends an <a href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#authorization-request\">Authorization Request</a>, to this endpoint that presents in query string the Wallet Instance identifier (<i>client_id</i>), the <i>request_uri</i> returned by the <a href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#pushed-authorization-request-par-response\">PAR Response</a>;<li><b>Authorization Server</b> validates and stores in local database the <a href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#authorization-request\">Authorization Request</a>, associating it with the <a href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#pushed-authorization-request-par-request\">PAR Request</a> saved previously and identified through the <i>client_id</i> and the <i>request_uri</i> parameters specified in the request;</li><li><b>Authorization Server</b> redirects the Wallet Instance to the login service of the Relying Party (RP). The redirect set a session cookie (called <i>state</i>) that contains the unique application session identifier at the Wallet Instance side (previously sent in the <a href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#pushed-authorization-request-par-request\">PAR Request</a>). The login service of RP will then authenticate the Wallet Instance user by verifying the eID Credential that is required as input.</li></ol>",
        "operationId": "authorize",
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "It MUST be set to the same value in the PAR Request (in URL-encoded format)",
            "required": true,
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            },
            "example": "AxjAnj0t5qpRVgR6apZ7gChaPb6y8gNm7CkPd58PD4c"
          },
          {
            "name": "request_uri",
            "in": "query",
            "description": "It MUST be set to the same value as obtained by PAR Response (in URL-encoded format)",
            "required": true,
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            },
            "example": "urn%3ietf%3params%3oauth%3request_uri%3bwc4JK-ESC0w8acc191e-Y1LTC2"
          }
        ],
        "responses": {
          "302": {
            "description": "Found  <br> <br/> <b>No content</b> <br> <br/>  =>EXAMPLE Location Header: 'https%3A%2F%2Fwallet-rp.ipzs.it%2Flogin'",
            "headers": {
              "Location": {
                "description": "Contains the URL of the RP login service to redirect the web view of the Wallet Instance to.",
                "style": "simple",
                "explode": false,
                "schema": {
                  "type": "string",
                  "format": "uri"
                }  
              },
              "Set-Cookie":{
                "description": "Contains the unique application session identifier at the Wallet Instance side",
                "schema": {
                  "type": "string",
                  "example": "state=fyZiOL9Lf2CeKuNT2JzxiLRDink0uPcd; Path=/; HttpOnly; Secure"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_405"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_413"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "5XX": {
            "description": "Unexpected error."
          }
        }
      }
    },
    "/token": {
      "post": {
        "tags": [
          "EAA Issuance Flow"
        ],
        "summary": "Issuing an access token to the Wallet Instance",
        "description": "<ol><li><b>Wallet Instance</b> have previously: <ul><li>generated a public/private key pair for use with DPoP;</li><li>created a DPoP proof JWT for the /token endpoint of the Authorizatiuon Server of EAA Provider adding the DPoP public key in the JWT header and signed the JWT with the DPoP private key, according to Section 4.2 of the DPoP specification (<a target=\"blank\" href=\"https://datatracker.ietf.org/doc/html/rfc9449.html#name-checking-dpop-proofs\">RFC 9449</a>).</li></ul></li><li><b>Wallet Instance</b> sends a <a target=\"blank\" href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#token-request\">Token Request</a>, that includes the WTE with its proof of possession (WTE-PoP) and the authorization code, to the /token endpoint of the Authorization Server for issuing an Access Token bounded to the public key of the DPoP proof presented in the DPoP HTTP header of the <a target=\"blank\" href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#token-request\">Token Request</a>;</li><li><b>Authorization Server</b> validates the <a target=\"blank\" href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#token-request\">Token Request</a> and the DPoP proof JWT in the DPoP HTTP header according to Section 4.3 of the DPoP specifications (<a target=\"blank\" href=\"https://datatracker.ietf.org/doc/html/rfc9449.html#name-checking-dpop-proofs\">RFC 9449</a>);</li><li><b>Authorization Server</b> extracts WTE from the <a target=\"blank\" href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#token-request\">Token Request</a> and control is equal to the WTE received previously within the <a target=\"blank\" href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#pushed-authorization-request-par-request\">PAR Request</a>;</li><li><b>Authorization Server</b> generates an <b>Access Token</b> bounded to the public key of the DPoP proof JWT presented in the DPoP HTTP header of the <a target=\"blank\" href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#token-request\">Token Request</a> (according to the <a target=\"blank\" href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#access-token\">EUDI IT Wallet specification</a>) that represents the client authorization to access to the /credential endpoint of the Credential Issuer for issuing an EAA credential; this Access Token presents a claim <b>sub</b> that contains an identifier assigned to the authenticated user and a claim <b>jkt</b> contains the SHA256 base64-url encoded of the public key defined into the DPoP proof JWT;</li><li><b>Authorization Server</b> creates a string containg a <b>nonce</b> value to be used to create a proof of possession of private key material that the Wallet Instance must present to the /credential endpoint with the access token (this nonce can be used only once and has a limited lifetime);</li><li><b>Authorization Server</b> sends the <a target=\"blank\" href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#token-response\">Token Response</a> containing the <i>DPoP-bounded access token</i>, the <i>authorized verifiable credential types</i> with the DPoP-bound Access Token, the <i>nonce</i> and the <i>nonce expires time;</i><li><b>Authorization Server</b> stores the <i><a target=\"blank\" href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#token-request\">Token Request</a></i>, the <i>DPoP-bounded access token</i>, the <i>sub</i> of the DPoP-bounded access token, the <i>nonce</i>, the <i>nonce expires time</i> and the <a target=\"blank\" href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#token-response\">Token Response</a> in local databse with association to <a target=\"blank\" href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#pushed-authorization-request-par-request\">PAR Request</a> previously received and identified through the parameter <i>code</i> specified in the request.</li></ol>",
        "operationId": "tokenRequest",
        "parameters": [
          {
            "name": "DPoP",
            "in": "header",
            "description": "The DPoP proof JWT (in signed JWT format) presented in the request to the /token endpoint of the authorization server for issuing an access token bounded to the public key specified within the JWK header of the DPoP proof JWT. The issued DPoP-bounded access token represents the client's authorization to access to the /credential endpoint of the credential issuer for issuing a verifiable credential of type 'PersonIdentificationData'.<br /><br /><a target=\"blank\" href=\"https://raw.githubusercontent.com/it-helpers/it-wallet-helpers/0.6.0/docs/schemes/jwt_dpop_header.json\">JSON Header schema</a><br /><br /><a target=\"blank\" href=\"https://raw.githubusercontent.com/it-helpers/it-wallet-helpers/0.6.0/docs/schemes/jwt_dpop_token_endpoint.json\">JSON Payload schema</a><br/><br/><a target=\"blank\" href=\"https://jwt.io/#debugger-io?token=eyJ0eXAiOiJkcG9wK2p3dCIsImFsZyI6IkVTMjU2IiwiandrIjp7Imt0eSI6IkVDIiwieCI6IjM1bHZDOHV6MlFyV3BRSjNUVUg4dDlvOURVUk1wN3lkVTUxOFJLRGwyMGsiLCJ5IjoiSThCdVhCMmJ2eGVsekpBZDdPS2hkLVp3akNzdDA1Rng0N01iXzB1Z3JvcyIsImNydiI6IlAtMjU2In19.ewoJImp0aSI6ICJlMWozVl9iS2ljOC1MQUVBIiwKCSJodG0iOiAiUE9TVCIsCgkiaHR1IjogImh0dHBzOi8vaXQtd2FsbGV0LWVhYS1wcm92aWRlci5leGFtcGxlLml0L3Rva2VuIiwKCSJpYXQiOiAxNzEwMzQ2MzQzCn0.mIDdPx1KjBnitErOYJjvzr5EYjl8dRQlzAT30e0mhk8NZZCwAMfktzcyb1_IuEywi_VMbrWTp1gFOAxJv_uaJQ&publicKey=%7B%0A%20%20%22kty%22%3A%20%22EC%22%2C%0A%20%20%22x%22%3A%20%2235lvC8uz2QrWpQJ3TUH8t9o9DURMp7ydU518RKDl20k%22%2C%0A%20%20%22y%22%3A%20%22I8BuXB2bvxelzJAd7OKhd-ZwjCst05Fx47Mb_0ugros%22%2C%0A%20%20%22crv%22%3A%20%22P-256%22%0A%7D\">EXAMPLE ON JWT.IO</a>",
            "required": true,
            "schema": {
              "pattern": "^[A-Za-z0-9_-]{2,}(?:\\.[A-Za-z0-9_-]{2,}){2}$",
              "type": "string",
              "format": "Signed JWT",
              "example": "eyJ0eXAiOiJkcG9wK2p3dCIsImFsZyI6IkVTMjU2IiwiandrIjp7Imt0eSI6IkVDIiwieCI6IjM1bHZDOHV6MlFyV3BRSjNUVUg4dDlvOURVUk1wN3lkVTUxOFJLRGwyMGsiLCJ5IjoiSThCdVhCMmJ2eGVsekpBZDdPS2hkLVp3akNzdDA1Rng0N01iXzB1Z3JvcyIsImNydiI6IlAtMjU2In19.ewoJImp0aSI6ICJlMWozVl9iS2ljOC1MQUVBIiwKCSJodG0iOiAiUE9TVCIsCgkiaHR1IjogImh0dHBzOi8vaXQtd2FsbGV0LWVhYS1wcm92aWRlci5leGFtcGxlLml0L3Rva2VuIiwKCSJpYXQiOiAxNzEwMzQ2MzQzCn0.mIDdPx1KjBnitErOYJjvzr5EYjl8dRQlzAT30e0mhk8NZZCwAMfktzcyb1_IuEywi_VMbrWTp1gFOAxJv_uaJQ"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/TokenRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_400_1"
                }
              }
            }
          },
          "5XX": {
            "description": "Unexpected error."
          }
        }
      }
    },
    "/credential": {
      "post": {
        "tags": [
          "EAA Issuance Flow"
        ],
        "summary": "Issuing an EAA Credential to the Wallet Instance",
        "description": "<ol><li><b>Wallet Instance</b> have previously: <ul><li>validated the <a target=\"blank\" href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#token-response\">Token Response</a> received from the /token endpoint of the Authotization Server of eID Provider;</li><li>validated the <i>DPoP-bounded access token</i>, the <i>nonce</i> and the nonce expires time extracted from the <a target=\"blank\" href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#token-response\">Token Response</a>;</li><li>created a <u>JWT proof</u> for the /credential endpoint of the Credential Issuer of eID Provider adding the <i>nonce</i> in the payload according to the <a target=\"blank\" href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#credential-request\">EUDI IT Wallet specification</a> and adding the DPoP public key in the JWT proof header and signs the JWT proof with the DPoP private key;</li><li>created a <u>DPoP proof JWT</u> for the /credential endpoint of the Credential Issuer of eID Provider adding the DPoP public key in the JWT header and signs the JWT with the DPoP private key, according to Section 4.2 of the DPoP specification (<a target=\"blank\" href=\"https://datatracker.ietf.org/doc/html/rfc9449.html#name-checking-dpop-proofs\">RFC 9449</a>).</li></ul></li><li> \n<b>Wallet Instance</b> sends a <a target=\"blank\" href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#credential-request\">Credential Request</a> to the /credential endpoint of the Credential Issuer of eID Provider for issuing an eID credential bounded to the public key of the <u>JWT proof</u> presented in the request body with the <u>type 'PersonIdentificationData'</u> and the <u>format 'vc+sd-jwt'</u>; the <a target=\"blank\" href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#credential-request\">Credential Request</a> includes in the Authorization HTTP header the <u>DPoP-bounded access token</u> and contains in the DPoP HTTP header the <u>DPoP proof JWT</u> as proof of possession of the access token sign private key;</li><li><b>Credential Issuer</b> validates <a target=\"blank\" href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#credential-request\">Credential Request</a> received, verify the DPoP-bounded access token in the Authorization HTTP header and the DPoP proof JWT in the DPoP HTTP header according to Section 4.3 of the DPoP specifications (<a target=\"blank\" href=\"https://datatracker.ietf.org/doc/html/rfc9449.html#name-checking-dpop-proofs\">RFC 9449</a>); it must also control that the public key of the DPoP proof JWT matches the public key that the access token is bound to (it provides additional assurance about the legitimacy of the Wallet Instance to present the access token);</li><li><b>Credential Issuer</b> extracts JWT proof from the <a target=\"blank\" href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#credential-request\">Credential Request</a> and checks its validity, then controls if the <i>nonce</i> inside the JWT proof is equal to the <i>nonce</i> sent previously to the Wallet Instance within the <a target=\"blank\" href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#token-response\">Token Response</a> and verifies the <i>nonce</i> expiration;</li><li><b>Credential Issuer</b> generates the eID credential requested bounded to the public key of the JWT proof, according to the <a target=\"blank\" href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-data-model.html#id1\">EUDI IT Wallet specification</a> and the <a target=\"blank\" href=\"https://www.ietf.org/archive/id/draft-ietf-oauth-sd-jwt-vc-02.html\">SD-JWT-based Verifiable Credentials (SD-JWT VC) specification</a> (type 'PersonIdentificationData' and format 'vc+sd-jw');</li><li><b>Credential Issuer</b> creates a string containg a <i>nonce</i> value to be used to create a new JWT proof for the /credential endpoint of the Credential Issuer when requesting a new eID credential with the same DPoP-bounded access token (the nonce can be used only once and has a limited lifetime);</li><li><b>Credential Issuer</b>sends the <a target=\"blank\" href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#credential-response\">Credential Response</a> containing the eID credential, the nonce and the nonce expires time;</li><li><b>Credential Issuer</b> stores the <i><a target=\"blank\" href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#credential-request\">Credential Request</a></i>, the <i>nonce</i>, the <i>nonce expires time</i> and the <a target=\"blank\" href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#credential-response\">Credential Response</a> in local databse with association to <a target=\"blank\" href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-issuance.html#pushed-authorization-request-par-request\">PAR Request</a> previously received and identified through the <i>sub</i> of the Access Token specified in the request.</li></ol>",
        "operationId": "credentialRequest",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "The DPoP-bound access token (in signed JWT format) presented in the request to the /credential endpoint of the credential issuer for issuing a verifiable credential of type 'PersonIdentificationData'. The access token represents the client's authorization to access to the /credential endpoint of the credential issuer for issuing a verifiable credential of type 'PersonIdentificationData'.<br /><br /><a target=\"blank\" href=\"https://raw.githubusercontent.com/it-helpers/it-wallet-helpers/0.6.0/docs/schemes/jwt_dpop_header.json\">JSON Header schema</a> <br /><br /><a target=\"blank\" href=\"https://raw.githubusercontent.com/it-helpers/it-wallet-helpers/0.6.0/docs/schemes/jwt_dpop_bound_access_token.json\">JSON Payload schema</a><br/><br/><a target=\"blank\" href=\"https://jwt.io/#debugger-io?token=eyJ0eXAiOiJkcG9wK2p3dCIsImFsZyI6IkVTMjU2IiwiandrIjp7Imt0eSI6IkVDIiwieCI6IjM1bHZDOHV6MlFyV3BRSjNUVUg4dDlvOURVUk1wN3lkVTUxOFJLRGwyMGsiLCJ5IjoiSThCdVhCMmJ2eGVsekpBZDdPS2hkLVp3akNzdDA1Rng0N01iXzB1Z3JvcyIsImNydiI6IlAtMjU2In19.ewoJImp0aSI6ICJmODU1NWNlYi1jNjVjLTQwMjUtOTM3OC1iNjY3MmI2MTQ5YWYiLAoJImlzcyI6ICJodHRwczovL2l0LXdhbGxldC1laWQtcHJvdmlkZXIuZXhhbXBsZS5pdC90b2tlbiIsCgkic3ViIjogIk56YkxzWGg4dURDY2Q3bm9XWEZaQWZIa3hac1JHQzlYcyIsCgkiYXVkIjogImh0dHBzOi8vaXQtd2FsbGV0LWVpZC1wcm92aWRlci5leGFtcGxlLml0L2NyZWRlbnRpYWwiLAoJImlhdCI6IDE3MDU1NzAwNTUsCgkiZXhwIjogMTcwNTU3MzY1NSwKCSJqa3QiOiAia1FNVTEzTnJ2aWMyRDlJR3AydC1QaExmaUhHRUZHNVJPRUlJZXl1ZTdOTSIsCgkibmJmIjogIjE3MTAzNDYzNDMiCn0.vnMKJBR2HB0CmWdrag6lt6aNRtN8BVvXiBoENFiqKlgXK7LFKz75WRza69Z9YhAd9yxAj2lKHlBGAulOG_IcMg&publicKey=%7B%0A%20%20%22kty%22%3A%20%22EC%22%2C%0A%20%20%22x%22%3A%20%2235lvC8uz2QrWpQJ3TUH8t9o9DURMp7ydU518RKDl20k%22%2C%0A%20%20%22y%22%3A%20%22I8BuXB2bvxelzJAd7OKhd-ZwjCst05Fx47Mb_0ugros%22%2C%0A%20%20%22crv%22%3A%20%22P-256%22%0A%7D\">EXAMPLE ON JWT.IO</a>",
            "required": true,
            "schema": {
              "pattern": "^[A-Za-z0-9_-]{2,}(?:\\.[A-Za-z0-9_-]{2,}){2}$",
              "type": "string",
              "format": "Signed JWT",
              "example": "eyJ0eXAiOiJkcG9wK2p3dCIsImFsZyI6IkVTMjU2IiwiandrIjp7Imt0eSI6IkVDIiwieCI6IjM1bHZDOHV6MlFyV3BRSjNUVUg4dDlvOURVUk1wN3lkVTUxOFJLRGwyMGsiLCJ5IjoiSThCdVhCMmJ2eGVsekpBZDdPS2hkLVp3akNzdDA1Rng0N01iXzB1Z3JvcyIsImNydiI6IlAtMjU2In19.ewoJImp0aSI6ICJmODU1NWNlYi1jNjVjLTQwMjUtOTM3OC1iNjY3MmI2MTQ5YWYiLAoJImlzcyI6ICJodHRwczovL2l0LXdhbGxldC1laWQtcHJvdmlkZXIuZXhhbXBsZS5pdC90b2tlbiIsCgkic3ViIjogIk56YkxzWGg4dURDY2Q3bm9XWEZaQWZIa3hac1JHQzlYcyIsCgkiYXVkIjogImh0dHBzOi8vaXQtd2FsbGV0LWVpZC1wcm92aWRlci5leGFtcGxlLml0L2NyZWRlbnRpYWwiLAoJImlhdCI6IDE3MDU1NzAwNTUsCgkiZXhwIjogMTcwNTU3MzY1NSwKCSJqa3QiOiAia1FNVTEzTnJ2aWMyRDlJR3AydC1QaExmaUhHRUZHNVJPRUlJZXl1ZTdOTSIsCgkibmJmIjogIjE3MTAzNDYzNDMiCn0.vnMKJBR2HB0CmWdrag6lt6aNRtN8BVvXiBoENFiqKlgXK7LFKz75WRza69Z9YhAd9yxAj2lKHlBGAulOG_IcMg"
            }
          },
          {
            "name": "DPoP",
            "in": "header",
            "description": "The DPoP proof JWT (in signed JWT format) presented with the access token in the request to the /credential endpoint of the credential issuer as proof possession of the access token sign private key.<br /><br /><a target=\"blank\" href=\"https://raw.githubusercontent.com/it-helpers/it-wallet-helpers/0.6.0/docs/schemes/jwt_dpop_header.json\">JSON Header schema</a> <br /><br /><a target=\"blank\" href=\"https://raw.githubusercontent.com/it-helpers/it-wallet-helpers/0.6.0/docs/schemes/jwt_dpop_credential_endpoint.json\">JSON Payload schema</a><br/><br/><a target=\"blank\" href=\"https://jwt.io/#debugger-io?token=eyJ0eXAiOiJkcG9wK2p3dCIsImFsZyI6IkVTMjU2IiwiandrIjp7Imt0eSI6IkVDIiwieCI6IjM1bHZDOHV6MlFyV3BRSjNUVUg4dDlvOURVUk1wN3lkVTUxOFJLRGwyMGsiLCJ5IjoiSThCdVhCMmJ2eGVsekpBZDdPS2hkLVp3akNzdDA1Rng0N01iXzB1Z3JvcyIsImNydiI6IlAtMjU2In19.ewogICJqdGkiOiAiZTFqM1ZfYktpYzgtTEFFQiIsCiAgImlhdCI6IDE3MTAzNDYzNDMsCiAgImh0dSI6ICJodHRwczovL2l0LXdhbGxldC1laWQtcHJvdmlkZXIuZXhhbXBsZS5pdC9jcmVkZW50aWFsIiwKICAiaHRtIjogIlBPU1QiLAogICJpYXQiOiAxNzEwMzQ2MzQzLAogICJhdGgiOiAiZlVIeU8ycjJaM0RaNTNFc05yV0JiMHhXWG9hTnk1OUlpS0NBcWtzbVFFbyIKfQ.vnMKJBR2HB0CmWdrag6lt6aNRtN8BVvXiBoENFiqKlgXK7LFKz75WRza69Z9YhAd9yxAj2lKHlBGAulOG_IcMg&publicKey=%7B%0A%20%20%22kty%22%3A%20%22EC%22%2C%0A%20%20%22x%22%3A%20%2235lvC8uz2QrWpQJ3TUH8t9o9DURMp7ydU518RKDl20k%22%2C%0A%20%20%22y%22%3A%20%22I8BuXB2bvxelzJAd7OKhd-ZwjCst05Fx47Mb_0ugros%22%2C%0A%20%20%22crv%22%3A%20%22P-256%22%0A%7D\">EXAMPLE ON JWT.IO</a>",
            "required": true,
            "schema": {
              "pattern": "^[A-Za-z0-9_-]{2,}(?:\\.[A-Za-z0-9_-]{2,}){2}$",
              "type": "string",
              "format": "Signed JWT",
              "example": "eyJ0eXAiOiJkcG9wK2p3dCIsImFsZyI6IkVTMjU2IiwiandrIjp7Imt0eSI6IkVDIiwieCI6IjM1bHZDOHV6MlFyV3BRSjNUVUg4dDlvOURVUk1wN3lkVTUxOFJLRGwyMGsiLCJ5IjoiSThCdVhCMmJ2eGVsekpBZDdPS2hkLVp3akNzdDA1Rng0N01iXzB1Z3JvcyIsImNydiI6IlAtMjU2In19.ewogICJqdGkiOiAiZTFqM1ZfYktpYzgtTEFFQiIsCiAgImlhdCI6IDE3MTAzNDYzNDMsCiAgImh0dSI6ICJodHRwczovL2l0LXdhbGxldC1laWQtcHJvdmlkZXIuZXhhbXBsZS5pdC9jcmVkZW50aWFsIiwKICAiaHRtIjogIlBPU1QiLAogICJpYXQiOiAxNzEwMzQ2MzQzLAogICJhdGgiOiAiZlVIeU8ycjJaM0RaNTNFc05yV0JiMHhXWG9hTnk1OUlpS0NBcWtzbVFFbyIKfQ.vnMKJBR2HB0CmWdrag6lt6aNRtN8BVvXiBoENFiqKlgXK7LFKz75WRza69Z9YhAd9yxAj2lKHlBGAulOG_IcMg"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CredentialRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK <br><br>Header is a JSON object with this <a target=\"blank\" href=\"https://raw.githubusercontent.com/it-helpers/it-wallet-helpers/0.6.0/docs/schemes/jwt_vc_sd_header.json\">JSON schema</a> <br /><br /> Payload is a JSON object with this <a target=\"blank\" href=\"https://raw.githubusercontent.com/it-helpers/it-wallet-helpers/0.6.0/docs/schemes/jwt_vc_sc.json\">JSON schema</a> <br> The verifiable credential (VC) is a digitally signed JWT carrying the information about a subject in clear text and containing SHA256 digests/thumbprints over the selectively disclosable claims with the Disclosures outside the document, using the format defined in <a target=\"blank\" href=\"https://datatracker.ietf.org/doc/html/draft-ietf-oauth-selective-disclosure-jwt-07\">draft-ietf-oauth-selective-disclosure-jwt-07</a> and <a target=\"blank\" href=\"https://hub.ebsi.eu/vc-framework/did/selective-disclosure-sd-jwt\">draft-selective-disclosure-sd-jwt</a>. <br/>The SD-JWT and the Disclosures are issued as a single concatenated string, with the tilde ~ serving as a separator.<br/>The first block comprises the SD-JWT, while the remainder constitutes the Disclosures. <br/><SD-JWT> ~ <Disclosure 1> ~ <Disclosure 2> ~ ... <br/><br/>SD-JWT=<base64-url-encoded(header)>.<base64-url-encoded(payload)>.<base64-url-encoded(signature)><br/><br/>Disclosure is created as follow: <br/> <br/> 1) Create an array of three elements in this order: salt (base64url-encode minimum 128 bits of cryptographically secure pseudorandom data), claim name, claim value; <br/> <br/> 2) JSON-encode the array generated at the step 1, producing an UTF-8 string: <br> <i>$ echo -n '[\"pZ5MRyOxpVWZuHLoJ-yjRg\",\"tax_id_code\",\"RSSMRA80R01H501B\"]' </i> <br> --> <b>[\"pZ5MRyOxpVWZuHLoJ-yjRg\",\"tax_id_code\",\"RSSMRA80R01H501B\"]</b> <br/> <br/> 3) base64url-encode the byte representation of the UTF-8 string produced at the step 2 (the result is the Disclosure)<br> <i>$ echo -n '[\"pZ5MRyOxpVWZuHLoJ-yjRg\",\"tax_id_code\",\"RSSMRA80R01H501B\"]' | openssl base64 -a -A | sed 's/+/-/g; s,/,_,g; s/=//g' </i> <br> --> <b> WyJwWjVNUnlPeHBWV1p1SExvSi15alJnIiwidGF4X2lkX2NvZGUiLCJSU1NNUkE4MFIwMUg1MDFCIl0</b> <br><br>In the example given here, within the claim <b>&#95;sd</b> of the payload of the SD-JWT we found the base64url-encode of the SHA256 digest of the disclosure 'WyJwWjVNUnlPeHBWV1p1SExvSi15alJnIiwidGF4X2lkX2NvZGUiLCJSU1NNUkE4MFIwMUg1MDFCIl0' <br>$ echo -n 'W1wicFo1TVJ5T3hwVldadUhMb0oteWpSZ1wiLFwidGF4X2lkX2NvZGVcIixcIlJTU01SQTgwUjAxSDUwMUJcIl0'| openssl sha256 -binary | openssl base64 -a -A | sed 's/+/-/g; s,/,_,g; s/=//g' <br> --> <b>WIilTHgXkryvO4HdJATdqoYK3J8WSQAIujGxe1fb8bE</b> <br><br>{<br>  \"_sd\": [<br>    \"NOxVzjUJg667iBdeDwmr6tZ46X-jchKwIVxMAfv43yc\",<br>    \"wyfxVqq9BosPT7tN4SHOI4E48P19aVA1ktW5Zf0E-fc\",<br>    \"UHChpGtNF2bj1FvAfBby1rnf7WXkxelFJ5a4vSj2FO4\", <br>    \"TK2RguPYoXzCx0vv5hbN9u5M2mHlWBt41qGWlLXCNu8\", <br>    \"<b>WIilTHgXkryvO4HdJATdqoYK3J8WSQAIujGxe1fb8bE</b>\"  <br>  ], <br> \"exp\": 1883000000,<br>  \"iss\": \"https://pidprovider.example.org\",<br>  \"sub\": \"NzbLsXh8uDCcd7noWXFZAfHkxZsRGC9Xs\",<br>  \"status\": {<br>    \"status_attestation\": {<br>      \"credential_hash_alg\": \"sha-256\"<br>    }<br>  },<br>  \"vct\": \"PersonIdentificationData\",<br>  \"_sd_alg\": \"sha-256\",<br>  \"cnf\": {<br>    \"jwk\": {<br>      \"kty\": \"EC\",<br>      \"crv\": \"P-256\",<br>      \"x\": \"TCAER19Zvu3OHF4j4W4vfSVoHIP1ILilDls7vCeGemc\",<br>      \"y\": \"ZxjiWWbZMQGHVWKVQ4hbSIirsVfuecCE6t4jT9F2HZQ\"<br>    }<br>  }<br>}<br>",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "5XX": {
            "description": "Unexpected error."
          }
        }
      }
    },
    "/.well-known/openid-federation": {
      "get": {
        "tags": [
          "EAA Issuance Flow"
        ],
        "summary": "Retrieve Entity Configuration of EAA Provider.",
        "operationId": "federationEntityConfigurationRequest",
        "description": "<ol><li><b>Wallet Instance</b> calls the “/.well-know/openid-federation” OpenID Federation service of the EAA Provider (Federation Entity Configuration Request) to obtain its <a target=\"blank\" href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/trust.html#entity-configuration\">Entity Configuration</a>;</li><li><b>OpenID Federation Service</b> retrieves its federation metadata from the local database;</li><li><b>OpenID Federation Service</b> creates a signed JWT containing the federation metadata (<a target=\"blank\" href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/trust.html#entity-configuration\">Entity Configuration</a>);</li><li><b>OpenID Federation Service</b> creates and sends the Federation Entity Configuration Response containing the <a target=\"blank\" href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/trust.html#entity-configuration\">Entity Configuration</a>.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK  <br/><br/><a target=\"blank\" href=\"https://jwt.io/#debugger-io?token=eyJhbGciOiJFUzI1NiIsImtpZCI6IkZBTkZTM1luQzl0amlDYWl2aFdMVlVKM0F4d0dHel85OHVSRmFxTUVFcyIsInR5cCI6ImVudGl0eS1zdGF0ZW1lbnQrand0In0..h-VsgOMMpnwTZNHcm5e_amXhBvqH4teRfh5CUT3WbRJb2fRIgQU6yBiGaZXFkcR1dYodQNqy3Ds4Hu15Yn6ZWg&publicKey=%7B%0A%20%20%22kty%22%3A%20%22EC%22%2C%0A%20%20%22x%22%3A%20%2235lvC8uz2QrWpQJ3TUH8t9o9DURMp7ydU518RKDl20k%22%2C%0A%20%20%22y%22%3A%20%22I8BuXB2bvxelzJAd7OKhd-ZwjCst05Fx47Mb_0ugros%22%2C%0A%20%20%22crv%22%3A%20%22P-256%22%0A%7D\">EXAMPLE ON JWT.IO</a>",
            "content": {
              "application/entity-statement+jwt": {
                "schema": {
                  "pattern": "^[A-Za-z0-9_-]{2,}(?:\\.[A-Za-z0-9_-]{2,}){2}$",
                  "type": "string",
                  "description": "Metadata that an Entity publishes about itself (in signed JWT format), verifiable with a trusted third party (Superior Entity). It's called Entity Configuration. (<a target=\"blank\" href=\"https://github.com/it-helpers/it-wallet-helpers/blob/0.6.0/docs/schemes/jwt_entity-configuration_eid_provider.json\">View the JSON schema</a>).",
                  "format": "A digitally signed JWT",
                  "example": "eyJhbGciOiJFUzI1NiIsImtpZCI6IkZBTkZTM1luQzl0amlDYWl2aFdMVlVKM0F4d0dHel85OHVSRmFxTUVFcyIsInR5cCI6ImVudGl0eS1zdGF0ZW1lbnQrand0In0..h-VsgOMMpnwTZNHcm5e_amXhBvqH4teRfh5CUT3WbRJb2fRIgQU6yBiGaZXFkcR1dYodQNqy3Ds4Hu15Yn6ZWg"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "5XX": {
            "description": "Unexpected error."
          }
        }
      }
    },
    "/status": {
      "post": {
        "summary": "The Issuer provides the Wallet Instance with a Status Attestation.",
        "description": "<ol><li><b>Wallet Instance</b> sends the <a target=\"blank\" href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/revocation-lists.html#status-attestation-request-by-wallet-instance\">Status Attestation Request</a> via HTTP-POST;</li><li><b>Credential Issuer</b> checks validity of <a target=\"blank\" href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/revocation-lists.html#status-attestation-request-by-wallet-instance\">Status Attestation Request</a> and stores it in local database;</li><li><b>Credential Issuer</b> extracts the <a target=\"blank\" href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/revocation-lists.html#sec-revocation-credential-pop\">credential pop</a>;</li><li><b>Credential Issuer</b> retrieves from the database of the <a target=\"blank\" href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-data-model.html#id1\">digital credential</a> whose hash is specified within the <i>credential_hash</i> claim of the <a target=\"blank\" href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/revocation-lists.html#sec-revocation-credential-pop\">credential pop</a> and the credential holder user identifier (idANPR or CF);</li><li><b>Credential Issuer</b> verifies the <a target=\"blank\" href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/revocation-lists.html#sec-revocation-credential-pop\">credential pop</a> signature using the public key to which the <a target=\"blank\" href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-data-model.html#id1\">digital credential</a> is bound, i.e., the <i>JWK</i> key contained in the <i>cnf</i> claim of the credential (the claim <i>kid</i> of the <a target=\"blank\" href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/revocation-lists.html#sec-revocation-credential-pop\">credential pop</a> header coincides with the base64url-encoded SHA-256 thumbprint of that key);</li><li><b>Credential Issuer</b> sends of the digital credential data request by submitting the user ID retrieved in step 24 to the Authentic Source;</li><li><b>Credential Issuer</b> performs a formal validation of the response received from the Authentic Source: checks if the data received from the Authentic Source is still valid or has been revoked and checks if it is the same as the data present in the database (hashes of the data returned from the Authentic Source are generated and compared with the same data present locally in order to check for any updates on the same).<br><b>Note.</b> In the case of at least one data update, the <a target=\"blank\" href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-data-model.html#id1\">digital credential</a> must be revoked by the Credential Issuer of the eID Provider and no <a target=\"blank\" href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/revocation-lists.html#status-attestation\">Status Attestation</a> must be issued for this credential;</li><li><b>Credential Issuer</b> issues the <a target=\"blank\" href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/revocation-lists.html#status-attestation\">Status Attestation</a> in JWT format and stores it in database by associating it with the <a target=\"blank\" href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-data-model.html#id1\">digital credential</a>, creates the <a target=\"blank\" href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/revocation-lists.html#status-attestation-request-by-wallet-instance\">Status Attestation Response</a> that encapsulates the <a target=\"blank\" href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/revocation-lists.html#status-attestation\">Status Attestation</a> and stores it in database with linking to the S<a target=\"blank\" href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/revocation-lists.html#status-attestation-request-by-wallet-instance\">Status Attestation Request</a> saved in step 2;</li><li><b>Credential Issuer</b> sends the <a target=\"blank\" href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/revocation-lists.html#status-attestation-request-by-wallet-instance\">Status Attestation Response</a> to the wallet Istance.</li></ol>",
        "tags": [
          "EAA Issuance Flow"
        ],
        "operationId": "statusRequest",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StatusRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The error code",
                      "example": "invalid_request"
                    },
                    "error_description": {
                      "type": "string",
                      "description": "Text in human-readable form providing further details to clarify the nature of the error encountered",
                      "example": "The signature of credential_pop JWT is not valid"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The error code",
                      "example": "not_found"
                    },
                    "error_description": {
                      "type": "string",
                      "description": "Text in human-readable form providing further details to clarify the nature of the error encountered",
                      "example": "The Digital Credential can not be found by the Issuer"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The error code",
                      "example": "internal_server_error"
                    },
                    "error_description": {
                      "type": "string",
                      "description": "Text in human-readable form providing further details to clarify the nature of the error encountered",
                      "example": "The Issuer encountered an internal problem."
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The error code",
                      "example": "service_unavaible"
                    },
                    "error_description": {
                      "type": "string",
                      "description": "Text in human-readable form providing further details to clarify the nature of the error encountered",
                      "example": "The Issuer is temporary unavailable."
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/revoke": {
      "post": {
        "summary": "A Wallet Instance request the revocation of a Digital Credential",
        "description": "<ol><li><b>Wallet Instance</b> sends the <a target=\"blank\" href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/revocation-lists.html#revocation-request-by-wallet-instance\">Revocation request</a> via HTTP-POST that includes the <a target=\"blank\" href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/revocation-lists.html#sec-revocation-credential-pop\">credential pop</a> inside which is the hash of the <a target=\"blank\" href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-data-model.html#id1\">digital credential</a> for which it acts as proof of possesion;</li><li><b>Credential Issuer</b> validates the <a target=\"blank\" href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/revocation-lists.html#revocation-request-by-wallet-instance\">Revocation request</a> and stores it in database;</li><li><b>Credential Issuer</b> extracts the <a target=\"blank\" href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/revocation-lists.html#sec-revocation-credential-pop\">credential pop</a>;</li><li><b>Credential Issuer</b> retrieves from the database of the <a target=\"blank\" href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-data-model.html#id1\">digital credential</a> whose hash is specified within the <i>credential_hash</i> claim of the <a target=\"blank\" href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/revocation-lists.html#sec-revocation-credential-pop\">credential pop</a>;</li><li><b>Credential Issuer</b> verifies the <a target=\"blank\" href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/revocation-lists.html#sec-revocation-credential-pop\">credential pop</a> signature using the public key to which the <a target=\"blank\" href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-data-model.html#id1\">digital credential</a> is bound, i.e., the <i>JWK</i> key contained in the <i>cnf</i> claim of the credential (the claim <i>kid</i> of the <a target=\"blank\" href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/revocation-lists.html#sec-revocation-credential-pop\">credential pop</a> header coincides with the base64url-encoded SHA-256 thumbprint of that key);</li><li><b>Credential Issuer</b> revokes the <a target=\"blank\" href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/pid-eaa-data-model.html#id1\">digital credential</a> retrieved in step 4 and updates the database;</li><li><b>Credential Issuer</b> return an HTTP Response with status code <i>204 No Content</i> to the Wallet Istance.</li></ol>",
        "tags": [
          "EAA Issuance Flow"
        ],
        "operationId": "revokeRequest",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RevocationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The error code",
                      "example": "invalid_request"
                    },
                    "error_description": {
                      "type": "string",
                      "description": "Text in human-readable form providing further details to clarify the nature of the error encountered",
                      "example": "The issuer cannot fulfill the request because of invalid parameters"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The error code",
                      "example": "not_found"
                    },
                    "error_description": {
                      "type": "string",
                      "description": "Text in human-readable form providing further details to clarify the nature of the error encountered",
                      "example": "The Digital Credential to be revoked can not be found by the Issuer."
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The error code",
                      "example": "internal_server_error"
                    },
                    "error_description": {
                      "type": "string",
                      "description": "Text in human-readable form providing further details to clarify the nature of the error encountered",
                      "example": "The Issuer encountered an internal problem."
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The error code",
                      "example": "service_unavaible"
                    },
                    "error_description": {
                      "type": "string",
                      "description": "Text in human-readable form providing further details to clarify the nature of the error encountered",
                      "example": "The Issuer is temporary unavailable."
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/login": {
      "get": {
        "tags": [
          "RP Wallet"
        ],
        "summary": "TO DO Login request for starting a user authentication flow", 
        "description": "<ol><li><b>Client</b> sends a login request to the Relying Party  (RP) for starting a user authentication flow ;</li><li>The <b>Relying Party (RP)</b> generates an identifier for the login request received and save it with ;</li><li>The <b>RP</b> redirects the Wallet Instance to the IdP with the SAML authentication request, the signature, the signature algorithm used and the RelayState;</li><li>The <b>IdP</b> validates the SAML authentication request;</li><li>The <b>IdP</b> authenticates the user by prompting for a username and password or some other authentication factor</li><li>Upon successful authentication, the <b>IdP</b> generates a SAML response that include the SAML authentication assertion contains user identity and authentication context data and signs it;</li><li>The <b>IdP</b> redirects the Wallet Instance to the Assertion Consumer Service of the SP (specified inside the \"AssertionConsumerService\" element of the SP Metadata) with the generated SAML Response, the signature, the signature algorithm and the RelayState;</li></ol>",
        "operationId": "login",
        "parameters": [
          {
            "name": "state",
            "in": "cookie",
            "description": "Contains the unique application session identifier at the Wallet Instance side",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "fyZiOL9Lf2CeKuNT2JzxiLRDink0uPcd"
          },
          {
            "name": "idphint",
            "in": "query",
            "description": "The identifier of the hinted Identity Provider (entityID), in URL-encoded format",
            "required": true,
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            },
            "example": "https%3A%2F%2Fidp.example.org"
          },
          {
            "name": "target",
            "in": "query",
            "description": "Redirection URI of the SP, in URL-encoded format, to which the SP Assertion Consumer Service redirects the Wallet Instance with the SAML assertion extracted from the verified SAML Response (SP forward the request to the /authorization endpoint of the authorization server of eID Provider translating the SAML assertion to text plane values in HTTP heades).",
            "required": true,
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            },
            "example": "https%3A%2F%2Fwallet-sp.ipzs.it%2Fcallback"
          }
        ],
        "responses": {
          "302": {
            "description": "Found  <br> <br/> <b>No content</b> <br/><br/>=> EXAMPLE: 'https%3A%2F%2Fidp.example.org/saml2-sso?SAMLRequest=PHNhbWxwOkxvZ291dFJlcXVlc3QgeG1sbnM6c2FtbHA9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpwcm90b2NvbCIgeG1sbnM9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iCiAgICBJRD0iZDJiN2MzODhjZWMzNmZhN2MzOWMyOGZkMjk4NjQ0YTgiIElzc3VlSW5zdGFudD0iMjAwNC0wMS0yMVQxOTowMDo0OVoiIFZlcnNpb249IjIuMCI+CiAgICA8SXNzdWVyPmh0dHBzOi8vSWRlbnRpdHlQcm92aWRlci5jb20vU0FNTDwvSXNzdWVyPgogICAgPE5hbWVJRCBGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpuYW1laWQtZm9ybWF0OnBlcnNpc3RlbnQiPjAwNWEwNmUwLWFkODItMTEwZC1hNTU2LTAwNDAwNWIxM2EyYjwvTmFtZUlEPgogICAgPHNhbWxwOlNlc3Npb25JbmRleD4xPC9zYW1scDpTZXNzaW9uSW5kZXg+Cjwvc2FtbHA6TG9nb3V0UmVxdWVzdD4K&Signature=DCDqAwIDqSwyXGvG2cYvNjmj7P1kt0+kbCfRjq9gGTrN4KKPxvQl5EsFrWRkMOdxxuwPldWPKvfgX6rt+pKwLgCt1TqRj+71y+VdGS8ORsBeEIURRn9wSu+pKsWiHexwKnIe65bjONbg2db44QOWZlDe76fLi05Psy/7HZTQuMoDRFYSR//VyNGHQmf9Sxi6mkmrYMXPOyZAUfNhX4eLaXFfwCHt0yRrEcm/PAEDDa7uqe8Uo5ilstgXDWDodWdkSzk8ZS1irjFkvtxH7FJlm9ADtlW/SoX92jGjMIrdQwCyArI6o8KTiDp/cjDjHZGiXLx2WvS7GEibA7Qd+5hSBQ&SigAlg=http%3A%2F%2Fwww.w3.org%2F2000%2F09%2Fxmldsig%23rsa-sha1&RelayState=0043bfc1bc45110dae17004005b13a2b'",
            "headers": {
              "Location": {
                "description": "The Location response header indicates the URL of Identity Provider SSO seervice to redirect the Wallet Instance to. This URL present in query string the SANL authorization request (parameter 'SAMLRequest'), the signature (parameter 'Signature'), the signature algorithm (parameter 'SigAlg') and the login request id (parameter 'RelayState').",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }         
            }
          },
          "200": {
            "description": "Ok",
            "content": {
              "text/html:": {
                "example":"<?xml version='1.0' encoding='UTF-8'?>\n<!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.1//EN' 'http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd'>\n<html xmlns='http://www.w3.org/1999/xhtml'xml:lang='en'>\n<body onload='document.forms[0].submit()'>\n<noscript>\n<p>\n<strong>Note:</strong> Poiché il tuo browser non supporta JavaScript, devi premere il pulsante Continua una volta per procedere.\n</p>\n</noscript>\n<form action='https://idp.example.org/saml2-sso'method='post'>\n<div>\n<input type='hidden' name='RelayState' value='0043bfc1bc45110dae17004005b13a2b'/>\n<input type='hidden' name='SAMLRequest' value='PHNhbWxwOkxvZ291dFJlcXVlc3QgeG1sbnM6c2FtbHA9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpwcm90b2NvbCIgeG1sbnM9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iCiAgICBJRD0iZDJiN2MzODhjZWMzNmZhN2MzOWMyOGZkMjk4NjQ0YTgiIElzc3VlSW5zdGFudD0iMjAwNC0wMS0yMVQxOTowMDo0OVoiIFZlcnNpb249IjIuMCI+CiAgICA8SXNzdWVyPmh0dHBzOi8vSWRlbnRpdHlQcm92aWRlci5jb20vU0FNTDwvSXNzdWVyPgogICAgPE5hbWVJRCBGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpuYW1laWQtZm9ybWF0OnBlcnNpc3RlbnQiPjAwNWEwNmUwLWFkODItMTEwZC1hNTU2LTAwNDAwNWIxM2EyYjwvTmFtZUlEPgogICAgPHNhbWxwOlNlc3Npb25JbmRleD4xPC9zYW1scDpTZXNzaW9uSW5kZXg+Cjwvc2FtbHA6TG9nb3V0UmVxdWVzdD4K'/>\n<input type='hidden' name='Signature' value='J4if7CCeHVfn4H6hMZN5fijOjQIyZ/laoFUZWz4LCRN3J82UeoyYvAiTDoQOUZHTRJNU1lWGub1pW4QR9MH5bwfLEa8XDivA118dR0Q7YN5L/U5rmbxnGlQ9pV0jT44cRNeqtbLW0YF4plfcqg7E5iOSljE3QLkiaAdkAec2a4HwPFkn/JP7wO11Mc6kU8MLCBbZAa3+94ZvVwHBEdyCdU+1yEvf+JGxTw66BwI2ugmPfxvoJdsOOAWwS3KhAFhLLSPXnhb3nd/ovKNNV/khZYwqsFTFNTMA+0JraKsZiCRtEZzEPXaP9KilrjPIIvRVxDQhETj96flk5zMkEM3ruw=='/>\n<input type='hidden' name='SigAlg' value='http://www.w3.org/2000/09/xmldsig#rsa-sha1'/>\n</div>\n<noscript>\n<div>\n<input type='submit' value='Continua'/>\n</div>\n</noscript>\n</form>\n</body>\n</html>"
              }
            }
          }
        }
      }
    },
    "/request_uri": {
      "post": {
        "tags": [
          "RP Wallet"
        ],
        "summary": "Validating the SAML Response comes from a SAML IdP after successfully login",
        "description": "<ul><li><b>SP</b> validates the SAML response received from the Identity Provider and the SAML assertion that is contained in this response, creates a session for the authenticated user populated with the attributes extracted from the SAML assertion and redirects the Wallet Instance to the callback URI of the SP setting a session cookie ('sp_user_session') containing the unique user session identifier at the SP side (the callback URI is specified into the 'target' parameter of the login request previously recevived from the client)</li></ul>",
        "operationId": "assertionConsumer",
        "parameters": [
          {
            "name": "state",
            "in": "cookie",
            "description": "Contains the unique application session identifier at the Wallet Instance side",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "fyZiOL9Lf2CeKuNT2JzxiLRDink0uPcd"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
               
              }
            }
          }
        },
        "responses": {
          "302": {
            "description": "Found <br> <br/> <b>No content</b> <br> <br/> <b> EXAMPLE </b>: 'https%3A%2F%2Fwallet-sp.ipzs.it%2Fcallback'",
            "headers": {
              "Location": {
                "description": "The Location response header indicates the URL to which the instance wallet should be redirected. In this case the wallet instance will be redirected to the callback",
                "explode": false,
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              },
              "Set-Cookie":{
                "description": "Contains the unique user session identifier at the SP side",
                "schema": {
                  "type": "string",
                  "example": "sp_user_session=avZU92A1ke1goP4NT2JzxiLRPink89Pqw; Path=/; HttpOnly; Secure"
                }
              }
            }
          }
        }
      }
    },
    "/callback": {
      "get": {
        "tags": [
          "RP Wallet"
        ],
        "summary": "Forwarding authenticated user data to the /authorize_int endpoint of the eID Provider",
        "operationId": "callback",
        "description": "<ol><li>The <b>SP</b> validates the Wallet Instance request;</li><li>The <b>SP</b> extracts the unique user session identifier at the SP side from the session cookie 'sp_user_session' and use it for retrieving user data from his internal user session;</li><li>The <b>SP</b> forwards the request to the /authorize_int endpoint of eID Provider adding in header HTTP the user data extracted from the 'cookie sp_user_session' (eIDAS minimum set and authentication level) and the unique application session identifier at the Wallet Instance side extracted from the 'cookie state'.</li></ol> ",
        "parameters": [
          {
            "name": "state",
            "in": "cookie",
            "description": "Contains the unique application session identifier at the Wallet Instance side",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "fyZiOL9Lf2CeKuNT2JzxiLRDink0uPcd"
          },
          {
            "name": "sp_user_session",
            "in": "cookie",
            "description": "Contains the unique user session identifier at the SP side",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "avZU92A1ke1goP4NT2JzxiLRPink89Pqw"
          }
        ],
        "responses": {
          "302": {
            "description": "Found  <br> <br/> <b>No content</b> <br> <br/> <b> EXAMPLE </b>: 'https%3A%2F%2Fit-wallet-eid-provider.example.it%2Fauthorize_int'",
            "headers": {
              "Location": {
                "description": "The Location response header indicates the URL to forward the Wallet Instance to Eht internat Authorization Service of the eId Provider",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }  
              }
              }
            
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ParRequest": {
        "type": "object",
        "properties": {
          "response_type": {
            "type": "string",
            "description": "MUST be set to 'code'",
            "example": "code"
          },
            "client_id": {
              "type": "string",
              "description": "MUST be set to the base64url encoded SHA-256 thumbprint of the public key specified inside the claim 'jwt' (in JWT format) of the cnf parameter of the Wallet Attestation JWT",
              "example": "AxjAnj0t5qpRVgR6apZ7gChaPb6y8gNm7CkPd58PD4c"
            },
          "code_challenge": {
            "type": "string",
            "description": "A challenge derived from the code PKCE verifier that is sent in the authorization request",
            "example": "E9Melhoa2OwvFrEMTJguCHaoeK1t8URWbuGJSstw-cM"
          },
          "code_challenge_method": {
            "type": "string",
            "description": "A method that was used to calculate the challenge. It MUST be set to 'S256'",
            "example": "S256"
          },
          "request": {
            "type": "string",
            "description": "Contains a signed JWT (the private key used to sign this JWT must match to the public one in the cnf parameter inside the Wallet Attestation).<br/><br/><a target=\"blank\" href=\"https://github.com/it-helpers/it-wallet-helpers/blob/0.6.0/docs/schemes/jwt_request_object_header.json\">JSON Header schema</a><br/><br/><a target=\"blank\" href=\"https://github.com/it-helpers/it-wallet-helpers/blob/0.6.0/docs/schemes/jwt_request_object.json\">JSON Payload schema</a>",
            "pattern": "^([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_=]+)$",
            "example": "$SIGNED-JWT"
          },
          "client_assertion_type": {
            "type": "string",
            "description": "It MUST be set to 'urn:ietf:params:oauth:client-assertion-type:jwt-client-attestation'",
            "example": "urn:ietf:params:oauth:client-assertion-type:jwt-client-attestation"
          },
          "client_assertion": {
            "type": "string",
            "description": "It MUST be set to a value containing the Wallet Attestation (in signed JWT format) and the Proof of Possession of the Wallet Attestation (in signed JWT format) separated with the ~ character",
            "example": "$WIA~WIA-PoP"
          }
        },
        "required": [
          "response_type",
          "client_id",
          "code_challenge",
          "code_challenge_method",
          "request",
          "client_assertion_type",
          "client_assertion"
        ]
      },
      "ParResponse": {
        "type": "object",
        "properties": {
          "request_uri": {
            "type": "string",
            "description": "The request URI corresponding to the authorization request posted. This URI MUST be a single-use reference to the respective authorization request. It MUST contain some part generated using a cryptographically strong pseudorandom algorithm. The value format MUST be urn:ietf:params:oauth:request_uri:<reference-value> with <reference-value> as the random part of the URI that references the respective authorization request data",
            "example": "urn:ietf:params:oauth:request_uri:bwc4JK-ESC0w8acc191e-Y1LTC2"
          },
          "expires_in": {
            "type": "integer",
            "format": "int32",
            "description": "Integer, it represents the lifetime in seconds of the request URI",
            "example": 60
          }
        },
        "required": [
          "request_uri",
          "expires_in"
        ]
      },
      "TokenRequest": {
        "type": "object",
        "properties": {
          "grant_type": {
            "type": "string",
            "description": "MUST be set to 'authorization_code'",
            "example": "authorization_code"
          },
          "code": {
            "type": "string",
            "description": "The authorization code returned in the Authorization Response",
            "example": "SplxlOBeZQQYbYS6WxSbIA"
          },
          "redirect_uri": {
            "type": "string",
            "description": "It MUST be set as the Request Objectredirect_uri claim of the PAR Request",
            "example": "https://start.wallet.example.org/cb"
          },
          "code_verifier": {
            "type": "string",
            "description": "Verification code of the code_challenge of the PAR Request",
            "example": "dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk"
          },
          "client_assertion_type": {
            "type": "string",
            "description": "It MUST be set to 'urn:ietf:params:oauth:client-assertion-type:jwt-client-attestation'",
            "example": "urn:ietf:params:oauth:client-assertion-type:jwt-client-attestation"
          },
          "client_assertion": {
            "type": "string",
            "description": "It MUST be set to a value containing the Wallet Attestation JWT and the Proof of Possession, separated with the ~ character",
            "example": "$WIA~WIA-PoP"
          }
        },
        "required": [
          "grant_type",
          "code",
          "redirect_uri",
          "code_verifier",
          "c_nonce_expires_in",
          "client_assertion_type",
          "client_assertion"
        ]
      },
      "TokenResponse": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "The DPoP-bound Access Token, in signed JWT format, allows accessing the PID/(Q)EAA Credential Endpoint for obtaining Credentials specified in the PAR Request",
            "pattern": "^([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_=]+)$",
            "example": "eyJhbGciOiJFUzI1NiJ9.eyJzdWIiOiJzdWJfcGFpcndpc2UiLCJhdWQiOiJodHRwczovL3VhdC5ldWRpLXdhbGxldC1pdC1xZWFhLWlzc3Vlci5kZW1vLmlwenMuaXQvdG9rZW4iLCJqa3QiOiJrUU1VMTNOcnZpYzJEOUlHcDJ0LVBoTGZpSEdFRkc1Uk9FSUlleXVlN05NIiwiZXhwIjoxNzA1NTczNjU1LCJpYXQiOjE3MDU1NzAwNTUsIm5vbmNlIjoidHNfRXRVUXMwaWVpSVMxTllOQkhFUVNveTNjdDRncHktNEZaS3dIaWxrWSIsImp0aSI6ImY4NTU1Y2ViLWM2NWMtNDAyNS05Mzc4LWI2NjcyYjYxNDlhZiIsImNsaWVudF9pZCI6Imh0dHBzOi8vdWF0LmV1ZGktd2FsbGV0LWl0LXFlYWEtaXNzdWVyLmRlbW8uaXB6cy5pdC90b2tlbiJ9.VyT25r23eO_ppWuw0ONV6GKjJFfvYtJKQSIngGwtyklmckhE3vg5U7Cws9V41GOU6F77MVifGfXf0l2HP3mW1Q"
          },
          "token_type": {
            "type": "string",
            "description": "Type of Access Token returned. It MUST be equal to 'DPoP'",
            "example": "DPoP"
          },
          "expires_in": {
            "type": "integer",
            "format": "int32",
            "description": "Expiry time of the Access Token in seconds",
            "example": 3600
          },
          "c_nonce": {
            "type": "string",
            "description": "String containing a nonce value to be used to create a proof of possession of key material when requesting a Credential",
            "example": "ts_EtUQs0ieiIS1NYNBHEQSoy3ct4gpy-4FZKwHilkY"
          },
          "c_nonce_expires_in": {
            "type": "integer",
            "format": "int32",
            "description": "Integer, it represents the lifetime in seconds of the c_nonce",
            "example": 86400
          },
          "authorization_details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuthorizationDetails"
            },
            "description": "Array, used to identify authorizations grainted with the DPoP-bound Access Token"
          }
        },
        "required": [
          "access_token",
          "token_type",
          "expires_in",
          "c_nonce",
          "c_nonce_expires_in",
          "authorization_details"
        ]
      },
      "WellKnowResponse": {
        "type": "object",
        "properties": {
          "entity_configuration": {
            "type": "string",
            "description": "Metadata that an Entity publishes about itself, verifiable with a trusted third party (Superior Entity). It's called Entity Configuration. (<a target=\"blank\" href=\"https://github.com/it-helpers/it-wallet-helpers/blob/0.6.0/docs/schemes/jwt_entity-configuration_eid_provider.json\">View the JSON schema</a>).",
            "pattern": "^([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_=]+)$",
            "example": "ewoKICAiYWxnIjogIkVTMjU2IiwKICAia2lkIjogIkZBTkZTM1luQzl0amlDYWl2aFdMVlVKM0F4d0dHel85OHVSRmFxTUVFcyIsCiAgInR5cCI6ICJlbnRpdHktc3RhdGVtZW50K2p3dCIKCn0..vnMKJBR2HB0CmWdrag6lt6aNRtN8BVvXiBoENFiqKlgXK7LFKz75WRza69Z9YhAd9yxAj2lKHlBGAulOG_IcMg"
          }
        },
        "required": [
          "response"
        ]
      },
      "AuthorizationDetails": {
        "type": "object",
        "description": "Object containing the detailed description of a specific autorization. Credential being described in the credential_configurations_supported map in the Credential Issuer Metadata",
        "properties": {
          "type": {
            "type": "string",
            "description": "The authorization details type. It MUST be set to 'openid_credential'",
            "example": "openid_credential"
          },
          "credential_configuration_id": {
            "type": "string",
            "description": "The unique identifier of the authorized Credential",
            "example": "PersonIdentificationData"
          }
        },
        "required": [
          "type",
          "credential_configuration_id"
        ]
      },
      "CredentialRequest": {
        "type": "object",
        "properties": {
          "credential_definition": {
            "type": "object",
            "description": "Object containing the detailed description of the credential types the Wallet Instance requests in the Credential Request",
            "properties": {
              "type": {
                "type": "array",
                "description": "Array containing the credential type values the Wallet requests in the Credential Request. Credential types supported by the Credential Issuer are specified in the credential_configurations_supported map in the Credential Issuer Metadata",
                "items": {
                  "type": "string",
                  "example": "PersonIdentificationData"
                }
              }
            }
          },
          "format": {
            "type": "string",
            "description": "Format of the Credentials to be issued. This MUST be 'vc+sd-jwt'",
            "example": "vc+sd-jwt"
          },
          "proof": {
            "type": "object",
            "description": "Object containing proof of possession of the key material the issued Credentials shall be bound to",
            "properties": {
              "proof_type": {
                "type": "object",
                "properties": {
                  "proof_type": {
                    "type": "string",
                    "description": "String denoting the proof type. It MUST be 'jwt'",
                    "example": "jwt"
                  },
                  "jwt": {
                    "type": "string",
                    "description": "The base64url encoded SHA-256 thumprint of the JWT proof public key (in JWK format); the claim 'jwk' of the credential MUST be set to this thumprint for bounding the Credential to the JWT proof public key",
                    "example": "eyJraWQiOiJkaWQ6ZXhhbXBsZTplYm"
                  }
                }
              }
            }
          }
        },
        "required": [
          "credential_definition",
          "format",
          "proof"
        ]
      },
      "ErrorResponse": {
        "required": [
          "error"
        ],
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "The error code",
            "example": "invalid_proof"
          },
          "error_description": {
            "type": "string",
            "description": "Text in human-readable form providing further details to clarify the nature of the error encountered",
            "example": "The proof field is not present or the provided key proof is invalid or not bound to a nonce provided by the Credential Issuer."
          }
        }
      },
      "CredentialResponse": {
        "type": "object",
        "properties": {
          "credential": {
            "type": "object",
            "description": "The Credential",
            "properties": {
              "type": {
                "type": "array",
                "description": "Array containing the credential type values the Wallet requests in the Credential Request",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "format": {
            "type": "string",
            "description": "Format of the Credentials issued. This MUST be 'vc+sd-jwt'"
          },
          "c_nonce": {
            "type": "string",
            "description": "String containing a nonce value to be used to create a proof of possession of key material when requesting a further Credential or for the renewal of a credential"
          },
          "c_nonce_expires_in": {
            "type": "integer",
            "format": "int32",
            "description": "Integer, it represents the lifetime in seconds of the c_nonce"
          }
        },
        "required": [
          "credential",
          "format",
          "c_nonce",
          "c_nonce_expires_in"
        ]
      },
      "StatusRequest": {
        "type": "object",
        "properties": {
          "credential_pop": {
            "type": "string",
            "description": "A signed JWT as a cryptographic proof of possesion of the <a target=\"blank\" href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/revocation-lists.html#sec-revocation-credential-pop\">Digital Credential</a> <br/><br/><a target=\"blank\" href=\"https://raw.githubusercontent.com/it-helpers/it-wallet-helpers/0.6.0/docs/schemes/jwt_credential_pop_header.json\">JSON Header schema</a><br/><br/><a target=\"blank\" href=\"https://raw.githubusercontent.com/it-helpers/it-wallet-helpers/0.6.0/docs/schemes/jwt_credential_pop.json\">JSON Payload schema</a><br/><br/><a target=\"blank\" href=\"https://jwt.io/#debugger-io?token=ewogICAgImFsZyI6ICJFUzI1NiIsCiAgICAidHlwIjogInN0YXR1cy1hdHRlc3RhdGlvbi1yZXF1ZXN0K2p3dCIsCiAgICAia2lkIjogImVOTi1nNWk2Q25MS2NsdFFCcDZhYmJpb0dNYnpNNm11VzN2dXh3NnVoODgiCn0.ewogICAgImlzcyI6ICJld29nSUNBZ0ltTnVaaUk2SUhzS0lDQWdJQ0FnSUNBaWFuZHJJam9nZXdvZ0lDQWdJQ0FnSUNBZ0lDQWlhM1I1SWpvZ0lrVkRJaXdLSUNBZ0lDQWdJQ0FnSUNBZ0ltTnlkaUk2SUNKUUxUSTFOaUlzQ2lBZ0lDQWdJQ0FnSUNBZ0lDSjRJam9nSWxSRFFVVlNNVGxhZG5VelQwaEdOR28wVnpSMlpsTldiMGhKVURGSlRHbHNSR3h6TjNaRFpVZGxiV01pTEFvZ0lDQWdJQ0FnSUNBZ0lDQWllU0k2SUNKYWVHcHBWMWRpV2sxUlIwaFdWMHRXVVRSb1lsTkphWEp6Vm1aMVpXTkRSVFowTkdwVU9VWXlTRnBSSWdvZ0lDQWdJQ0FnSUgwS0lDQWdJSDBLZlEiLAogICAgImlhdCI6IDE1MDQ2OTkxMzYsCiAgICAiZXhwIjogMTUwNDcwMDEzNiwKICAgICJjcmVkZW50aWFsX2hhc2giOiAiMjExZjgwNDAwZWRlYWFmNjgzYmE2NTBlODJiOWFjZTI0NmQzNDM3Mjc4YjAxZTczYjc3OTM5YjFjYTZjYzgwZCIsCiAgICAiY3JlZGVudGlhbF9oYXNoX2FsZyI6ICJzaGEtMjU2IiwKICAgICJjbmYiOiB7CiAgICAgICAgImp3ayI6IHsKICAgICAgICAgICAgImt0eSI6ICJFQyIsCiAgICAgICAgICAgICJjcnYiOiAiUC0yNTYiLAogICAgICAgICAgICAieCI6ICJUQ0FFUjE5WnZ1M09IRjRqNFc0dmZTVm9ISVAxSUxpbERsczd2Q2VHZW1jIiwKICAgICAgICAgICAgInkiOiAiWnhqaVdXYlpNUUdIVldLVlE0aGJTSWlyc1ZmdWVjQ0U2dDRqVDlGMkhaUSIKICAgICAgICB9CiAgICB9Cn0.VyT25r23eO_ppWuw0ONV6GKjJFfvYtJKQSIngGwtyklmckhE3vg5U7Cws9V41GOU6F77MVifGfXf0l2HP3mW1Q&publicKey=%7B%0A%20%20%22kty%22%3A%20%22EC%22%2C%0A%20%20%22x%22%3A%20%2235lvC8uz2QrWpQJ3TUH8t9o9DURMp7ydU518RKDl20k%22%2C%0A%20%20%22y%22%3A%20%22I8BuXB2bvxelzJAd7OKhd-ZwjCst05Fx47Mb_0ugros%22%2C%0A%20%20%22crv%22%3A%20%22P-256%22%0A%7D\">EXAMPLE ON JWT.IO</a>",
            "pattern": "^([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_=]+)$",
            "example": "ewogICAgImFsZyI6ICJFUzI1NiIsCiAgICAidHlwIjogInN0YXR1cy1hdHRlc3RhdGlvbi1yZXF1ZXN0K2p3dCIsCiAgICAia2lkIjogImVOTi1nNWk2Q25MS2NsdFFCcDZhYmJpb0dNYnpNNm11VzN2dXh3NnVoODgiCn0.ewogICAgImlzcyI6ICJld29nSUNBZ0ltTnVaaUk2SUhzS0lDQWdJQ0FnSUNBaWFuZHJJam9nZXdvZ0lDQWdJQ0FnSUNBZ0lDQWlhM1I1SWpvZ0lrVkRJaXdLSUNBZ0lDQWdJQ0FnSUNBZ0ltTnlkaUk2SUNKUUxUSTFOaUlzQ2lBZ0lDQWdJQ0FnSUNBZ0lDSjRJam9nSWxSRFFVVlNNVGxhZG5VelQwaEdOR28wVnpSMlpsTldiMGhKVURGSlRHbHNSR3h6TjNaRFpVZGxiV01pTEFvZ0lDQWdJQ0FnSUNBZ0lDQWllU0k2SUNKYWVHcHBWMWRpV2sxUlIwaFdWMHRXVVRSb1lsTkphWEp6Vm1aMVpXTkRSVFowTkdwVU9VWXlTRnBSSWdvZ0lDQWdJQ0FnSUgwS0lDQWdJSDBLZlEiLAogICAgImlhdCI6IDE1MDQ2OTkxMzYsCiAgICAiZXhwIjogMTUwNDcwMDEzNiwKICAgICJjcmVkZW50aWFsX2hhc2giOiAiMjExZjgwNDAwZWRlYWFmNjgzYmE2NTBlODJiOWFjZTI0NmQzNDM3Mjc4YjAxZTczYjc3OTM5YjFjYTZjYzgwZCIsCiAgICAiY3JlZGVudGlhbF9oYXNoX2FsZyI6ICJzaGEtMjU2IiwKICAgICJjbmYiOiB7CiAgICAgICAgImp3ayI6IHsKICAgICAgICAgICAgImt0eSI6ICJFQyIsCiAgICAgICAgICAgICJjcnYiOiAiUC0yNTYiLAogICAgICAgICAgICAieCI6ICJUQ0FFUjE5WnZ1M09IRjRqNFc0dmZTVm9ISVAxSUxpbERsczd2Q2VHZW1jIiwKICAgICAgICAgICAgInkiOiAiWnhqaVdXYlpNUUdIVldLVlE0aGJTSWlyc1ZmdWVjQ0U2dDRqVDlGMkhaUSIKICAgICAgICB9CiAgICB9Cn0.VyT25r23eO_ppWuw0ONV6GKjJFfvYtJKQSIngGwtyklmckhE3vg5U7Cws9V41GOU6F77MVifGfXf0l2HP3mW1Q"
          }
        },
        "required": [
          "status_attestation"
        ]
      },
      "RevocationRequest": {
        "type": "object",
        "properties": {
          "credential_pop": {
            "type": "string",
            "description": "A signed JWT as a cryptographic proof of possesion of the <a target=\"blank\" href=\"https://italia.github.io/eudi-wallet-it-docs/v0.6.0/en/revocation-lists.html#sec-revocation-credential-pop\">Digital Credential</a> <br/><br/><a target=\"blank\" href=\"https://raw.githubusercontent.com/it-helpers/it-wallet-helpers/0.6.0/docs/schemes/jwt_credential_pop_header.json\">JSON Header schema</a><br/><br/><a target=\"blank\" href=\"https://raw.githubusercontent.com/it-helpers/it-wallet-helpers/0.6.0/docs/schemes/jwt_credential_pop.json\">JSON Payload schema</a><br/><br/><a target=\"blank\" href=\"https://jwt.io/#debugger-io?token=ewogICAgImFsZyI6ICJFUzI1NiIsCiAgICAidHlwIjogInN0YXR1cy1hdHRlc3RhdGlvbi1yZXF1ZXN0K2p3dCIsCiAgICAia2lkIjogImVOTi1nNWk2Q25MS2NsdFFCcDZhYmJpb0dNYnpNNm11VzN2dXh3NnVoODgiCn0.ewogICAgImlzcyI6ICJld29nSUNBZ0ltTnVaaUk2SUhzS0lDQWdJQ0FnSUNBaWFuZHJJam9nZXdvZ0lDQWdJQ0FnSUNBZ0lDQWlhM1I1SWpvZ0lrVkRJaXdLSUNBZ0lDQWdJQ0FnSUNBZ0ltTnlkaUk2SUNKUUxUSTFOaUlzQ2lBZ0lDQWdJQ0FnSUNBZ0lDSjRJam9nSWxSRFFVVlNNVGxhZG5VelQwaEdOR28wVnpSMlpsTldiMGhKVURGSlRHbHNSR3h6TjNaRFpVZGxiV01pTEFvZ0lDQWdJQ0FnSUNBZ0lDQWllU0k2SUNKYWVHcHBWMWRpV2sxUlIwaFdWMHRXVVRSb1lsTkphWEp6Vm1aMVpXTkRSVFowTkdwVU9VWXlTRnBSSWdvZ0lDQWdJQ0FnSUgwS0lDQWdJSDBLZlEiLAogICAgImlhdCI6IDE1MDQ2OTkxMzYsCiAgICAiZXhwIjogMTUwNDcwMDEzNiwKICAgICJjcmVkZW50aWFsX2hhc2giOiAiMjExZjgwNDAwZWRlYWFmNjgzYmE2NTBlODJiOWFjZTI0NmQzNDM3Mjc4YjAxZTczYjc3OTM5YjFjYTZjYzgwZCIsCiAgICAiY3JlZGVudGlhbF9oYXNoX2FsZyI6ICJzaGEtMjU2IiwKICAgICJjbmYiOiB7CiAgICAgICAgImp3ayI6IHsKICAgICAgICAgICAgImt0eSI6ICJFQyIsCiAgICAgICAgICAgICJjcnYiOiAiUC0yNTYiLAogICAgICAgICAgICAieCI6ICJUQ0FFUjE5WnZ1M09IRjRqNFc0dmZTVm9ISVAxSUxpbERsczd2Q2VHZW1jIiwKICAgICAgICAgICAgInkiOiAiWnhqaVdXYlpNUUdIVldLVlE0aGJTSWlyc1ZmdWVjQ0U2dDRqVDlGMkhaUSIKICAgICAgICB9CiAgICB9Cn0.VyT25r23eO_ppWuw0ONV6GKjJFfvYtJKQSIngGwtyklmckhE3vg5U7Cws9V41GOU6F77MVifGfXf0l2HP3mW1Q&publicKey=%7B%0A%20%20%22kty%22%3A%20%22EC%22%2C%0A%20%20%22x%22%3A%20%2235lvC8uz2QrWpQJ3TUH8t9o9DURMp7ydU518RKDl20k%22%2C%0A%20%20%22y%22%3A%20%22I8BuXB2bvxelzJAd7OKhd-ZwjCst05Fx47Mb_0ugros%22%2C%0A%20%20%22crv%22%3A%20%22P-256%22%0A%7D\">EXAMPLE ON JWT.IO</a>",
            "pattern": "^([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_=]+)$",
            "example": "ewogICAgImFsZyI6ICJFUzI1NiIsCiAgICAidHlwIjogInN0YXR1cy1hdHRlc3RhdGlvbi1yZXF1ZXN0K2p3dCIsCiAgICAia2lkIjogImVOTi1nNWk2Q25MS2NsdFFCcDZhYmJpb0dNYnpNNm11VzN2dXh3NnVoODgiCn0.ewogICAgImlzcyI6ICJld29nSUNBZ0ltTnVaaUk2SUhzS0lDQWdJQ0FnSUNBaWFuZHJJam9nZXdvZ0lDQWdJQ0FnSUNBZ0lDQWlhM1I1SWpvZ0lrVkRJaXdLSUNBZ0lDQWdJQ0FnSUNBZ0ltTnlkaUk2SUNKUUxUSTFOaUlzQ2lBZ0lDQWdJQ0FnSUNBZ0lDSjRJam9nSWxSRFFVVlNNVGxhZG5VelQwaEdOR28wVnpSMlpsTldiMGhKVURGSlRHbHNSR3h6TjNaRFpVZGxiV01pTEFvZ0lDQWdJQ0FnSUNBZ0lDQWllU0k2SUNKYWVHcHBWMWRpV2sxUlIwaFdWMHRXVVRSb1lsTkphWEp6Vm1aMVpXTkRSVFowTkdwVU9VWXlTRnBSSWdvZ0lDQWdJQ0FnSUgwS0lDQWdJSDBLZlEiLAogICAgImlhdCI6IDE1MDQ2OTkxMzYsCiAgICAiZXhwIjogMTUwNDcwMDEzNiwKICAgICJjcmVkZW50aWFsX2hhc2giOiAiMjExZjgwNDAwZWRlYWFmNjgzYmE2NTBlODJiOWFjZTI0NmQzNDM3Mjc4YjAxZTczYjc3OTM5YjFjYTZjYzgwZCIsCiAgICAiY3JlZGVudGlhbF9oYXNoX2FsZyI6ICJzaGEtMjU2IiwKICAgICJjbmYiOiB7CiAgICAgICAgImp3ayI6IHsKICAgICAgICAgICAgImt0eSI6ICJFQyIsCiAgICAgICAgICAgICJjcnYiOiAiUC0yNTYiLAogICAgICAgICAgICAieCI6ICJUQ0FFUjE5WnZ1M09IRjRqNFc0dmZTVm9ISVAxSUxpbERsczd2Q2VHZW1jIiwKICAgICAgICAgICAgInkiOiAiWnhqaVdXYlpNUUdIVldLVlE0aGJTSWlyc1ZmdWVjQ0U2dDRqVDlGMkhaUSIKICAgICAgICB9CiAgICB9Cn0.VyT25r23eO_ppWuw0ONV6GKjJFfvYtJKQSIngGwtyklmckhE3vg5U7Cws9V41GOU6F77MVifGfXf0l2HP3mW1Q"
          }
        },
        "required": [
          "status_attestation"
        ]
      },
      "StatusResponse": {
        "type": "object",
        "properties": {
          "status_attestation": {
            "type": "string",
            "description": "The Issuer then returns the Status Attestation to the Wallet Instance as a signed JWT",
            "pattern": "^([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_=]+)$",
            "example": "ewogICAgImFsZyI6ICJFUzI1NiIsCiAgICAidHlwIjogInN0YXR1cy1hdHRlc3RhdGlvbitqd3QiLAogICAgImtpZCI6ICJlTk4tZzVpNkNuTEtjbHRRQnA2YWJiaW9HTWJ6TTZtdVczdnV4dzZ1aDg4Igp9.ewogICAgImlzcyI6ICJld29nSUNBZ0ltTnVaaUk2SUhzS0lDQWdJQ0FnSUNBaWFuZHJJam9nZXdvZ0lDQWdJQ0FnSUNBZ0lDQWlhM1I1SWpvZ0lrVkRJaXdLSUNBZ0lDQWdJQ0FnSUNBZ0ltTnlkaUk2SUNKUUxUSTFOaUlzQ2lBZ0lDQWdJQ0FnSUNBZ0lDSjRJam9nSWxSRFFVVlNNVGxhZG5VelQwaEdOR28wVnpSMlpsTldiMGhKVURGSlRHbHNSR3h6TjNaRFpVZGxiV01pTEFvZ0lDQWdJQ0FnSUNBZ0lDQWllU0k2SUNKYWVHcHBWMWRpV2sxUlIwaFdWMHRXVVRSb1lsTkphWEp6Vm1aMVpXTkRSVFowTkdwVU9VWXlTRnBSSWdvZ0lDQWdJQ0FnSUgwS0lDQWdJSDBLZlEiLAogICAgImlhdCI6IDE1MDQ2OTkxMzYsCiAgICAiZXhwIjogMTUwNDcwMDEzNiwKICAgICJjcmVkZW50aWFsX2hhc2giOiAiMjExZjgwNDAwZWRlYWFmNjgzYmE2NTBlODJiOWFjZTI0NmQzNDM3Mjc4YjAxZTczYjc3OTM5YjFjYTZjYzgwZCIsCiAgICAiY3JlZGVudGlhbF9oYXNoX2FsZyI6ICJzaGEtMjU2IiwKICAgICJjbmYiOiB7CiAgICAgICAgImp3ayI6IHsKICAgICAgICAgICAgImt0eSI6ICJFQyIsCiAgICAgICAgICAgICJjcnYiOiAiUC0yNTYiLAogICAgICAgICAgICAieCI6ICJUQ0FFUjE5WnZ1M09IRjRqNFc0dmZTVm9ISVAxSUxpbERsczd2Q2VHZW1jIiwKICAgICAgICAgICAgInkiOiAiWnhqaVdXYlpNUUdIVldLVlE0aGJTSWlyc1ZmdWVjQ0U2dDRqVDlGMkhaUSIKICAgICAgICB9CiAgICB9Cn0.VyT25r23eO_ppWuw0ONV6GKjJFfvYtJKQSIngGwtyklmckhE3vg5U7Cws9V41GOU6F77MVifGfXf0l2HP3mW1Q"
          }
        },
        "required": [
          "status_attestation"
        ]
      },
      "inline_response_400": {
        "required": [
          "error"
        ],
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "The error code",
            "example": "invalid_request"
          },
          "error_description": {
            "type": "string",
            "description": "Text in human-readable form providing further details to clarify the nature of the error encountered",
            "example": "The redirect_uri is not valid for the given client"
          }
        }
      },
      "inline_response_405": {
        "required": [
          "error"
        ],
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "The error code",
            "example": "method_not-allowed"
          },
          "error_description": {
            "type": "string",
            "description": "Text in human-readable form providing further details to clarify the nature of the error encountered",
            "example": "If the request did not use the POST method, the authorization server responds with an HTTP 405 (Method Not Allowed) status code"
          }
        }
      },
      "inline_response_413": {
        "required": [
          "error"
        ],
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "The error code",
            "example": "payload_too_large"
          },
          "error_description": {
            "type": "string",
            "description": "Text in human-readable form providing further details to clarify the nature of the error encountered",
            "example": "If the request size was beyond the upper bound that the authorization server allows, the authorization server responds with an HTTP 413 (Payload Too Large) status code."
          }
        }
      },
      "inline_response_429": {
        "required": [
          "error"
        ],
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "The error code",
            "example": "too_many_requests"
          },
          "error_description": {
            "type": "string",
            "description": "Text in human-readable form providing further details to clarify the nature of the error encountered",
            "example": "If the number of requests from a Wallet Instance during a particular time period exceeds the number the authorization server allows, the authorization server responds with an HTTP 429 (Too Many Requests) status code."
          }
        }
      },
      "inline_response_400_1": {
        "required": [
          "error"
        ],
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "The error code",
            "example": "invalid_client"
          },
          "error_description": {
            "type": "string",
            "description": "Text in human-readable form providing further details to clarify the nature of the error encountered",
            "example": "Client authentication failed"
          }
        }
      },
      "inline_response_404": {
        "required": [
          "error"
        ],
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "The error code",
            "example": "federation_not_enabled"
          },
          "error_description": {
            "type": "string",
            "description": "Text in human-readable form providing further details to clarify the nature of the error encountered",
            "example": "OpenID Connect Federation 1.0 not enabled"
          }
        }
      }
    }
  }
}